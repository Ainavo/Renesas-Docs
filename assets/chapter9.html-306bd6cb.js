import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const e={},t=p(`<h1 id="第9章-同步互斥与通信" tabindex="-1"><a class="header-anchor" href="#第9章-同步互斥与通信" aria-hidden="true">#</a> 第9章 同步互斥与通信</h1><p>本章是概述性的内容。可以把多任务系统当做一个团队，里面的每一个任务就相当于团队里的一个人。团队成员之间要协调工作进度(同步)、争用会议室(互斥)、沟通(通信)。多任务系统中所涉及的概念，都可以在现实生活中找到例子。</p><p>各类RTOS都会涉及这些概念：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)等。我们先站在更高角度来讲解这些概念。</p><h2 id="_9-1-同步与互斥的概念" tabindex="-1"><a class="header-anchor" href="#_9-1-同步与互斥的概念" aria-hidden="true">#</a> 9.1 同步与互斥的概念</h2><p>一句话理解同步与互斥：我等你用完厕所，我再用厕所。</p><p>什么叫同步？就是：哎哎哎，我正在用厕所，你等会。</p><p>什么叫互斥？就是：哎哎哎，我正在用厕所，你不能进来。</p><p>同步与互斥经常放在一起讲，是因为它们之的关系很大，“互斥”操作可以使用“同步”来实现。 我“等”你用完厕所，我再用厕所。这不就是用“同步”来实现“互斥”吗？</p><p>再举一个例子。在团队活动里，同事A先写完报表，经理B才能拿去向领导汇报。经理B必须等同事A完成报表，AB之间有依赖，B必须放慢脚步，被称为同步。在团队活动中，同事A已经使用会议室了，经理B也想使用，即使经理B是领导，他也得等着，这就叫互斥。经理B跟同事A说：你用完会议室就提醒我。这就是使用&quot;同步&quot;来实现&quot;互斥&quot;。</p><p>有时候看代码更容易理解，伪代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">void</span>  抢厕所<span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>有人在用<span class="token punctuation">)</span> 我眯一会<span class="token punctuation">;</span>
<span class="token number">04</span>    用厕所<span class="token punctuation">;</span>
<span class="token number">05</span>    喂，醒醒，有人要用厕所吗<span class="token punctuation">;</span>
<span class="token number">06</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设有A、B两人早起抢厕所，A先行一步占用了；B慢了一步，于是就眯一会；当A用完后叫醒B，B也就愉快地上厕所了。</p><p>在这个过程中，A、B是互斥地访问“厕所”，“厕所”被称之为临界资源。我们使用了“休眠-唤醒”的同步机制实现了“临界资源”的“互斥访问”。</p><p>同一时间只能有一个人使用的资源，被称为临界资源。比如任务A、B都要使用串口来打印，串口就是临界资源。如果A、B同时使用串口，那么打印出来的信息就是A、B混杂，无法分辨。所以使用串 口时，应该是这样：A用完，B再用；B用完，A再用。</p><h2 id="_9-2-同步与互斥并不简单" tabindex="-1"><a class="header-anchor" href="#_9-2-同步与互斥并不简单" aria-hidden="true">#</a> 9.2 同步与互斥并不简单</h2><p>在裸机程序里，可以使用一个全局变量或静态变量实现互斥操作，比如要互斥地使用LCD，可以使用如下代码。</p><p>示例代码1：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">int</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> 
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">04</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bCanUse<span class="token punctuation">)</span>
<span class="token number">05</span>    <span class="token punctuation">{</span> 
<span class="token number">06</span>         bCanUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">07</span>         <span class="token comment">/* 使用LCD */</span>
<span class="token number">08</span>         bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">09</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">10</span>    <span class="token punctuation">}</span>
<span class="token number">11</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在RTOS里，使用上述代码实现互斥操作时，大概率是没问题的，但是无法确保万无一失。</p><p>假设如下场景：有两个任务A、B都想调用LCD_PrintString，任务A执行到第4行代码时发现bCanUse为1，可以进入if语句块，它还没执行第6句指令就被切换出去了；然后任务B也调用LCD_PrintString，任务B执行到第4行代码时也发现bCanUse为1，也可以进入if语句块使用LCD。在这种情况下，使用静态变量并不能实现互斥操作。</p><p>上述例子中，是因为第4、第6两条指令被打断了，那么如下改进：在函数入口处先然让bCanUse减一。这能否实现万无一失的互斥操作呢？</p><p>示例代码2：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">int</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> 
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">04</span>    bCanUse<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token number">05</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bCanUse <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">06</span>    <span class="token punctuation">{</span> 
<span class="token number">07</span>         <span class="token comment">/* 使用LCD */</span>
<span class="token number">08</span>         bCanUse<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">09</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">10</span>    <span class="token punctuation">}</span>
<span class="token number">11</span>    <span class="token keyword">else</span>
<span class="token number">12</span>    <span class="token punctuation">{</span>
<span class="token number">13</span>        bCanUse<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">14</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">15</span>    <span class="token punctuation">}</span>
<span class="token number">16</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把第4行的代码使用汇编指令表示如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">04.1</span> LDR R0<span class="token punctuation">,</span> <span class="token punctuation">[</span>bCanUse<span class="token punctuation">]</span>  <span class="token comment">// 读取bCanUse的值，存入寄存器R0</span>
<span class="token number">04.2</span> DEC R0<span class="token punctuation">,</span> #<span class="token number">1</span>         <span class="token comment">// 把R0的值减一</span>
<span class="token number">04.3</span> STR R0<span class="token punctuation">,</span> <span class="token punctuation">[</span>bCanUse<span class="token punctuation">]</span>  <span class="token comment">// 把R0写入变量bCanUse </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设如下场景：有两个任务A、B都想调用LCD_PrintString，任务A执行到第04.1行代码时读到的bCanUse为1，存入寄存器R0就被切换出去了；然后任务B也调用LCD_PrintString，任务B执行到第4行时发现bCanUse为1并把它减为0，执行到第5行代码时发现条件成立可以进入if语句块使用LCD，然后任务B也被切换出去了；现在任务A继续运行第04.2行代码时R0为1，运行到第04.3行代码时把bCanUse设置为0，后续也能成功进入if的语句块。在这种情况下，任务A、B都能使用LCD。</p><p>上述方法不能保证万无一失的原因在于：在判断过程中，被打断了。如果能保证这个过程不被打断，就可以了：通过关闭中断来实现。</p><p>示例1的代码改进如下：在第5~7行前关闭中断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span> <span class="token keyword">int</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> 
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">04</span>    <span class="token function">disable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">05</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bCanUse<span class="token punctuation">)</span>
<span class="token number">06</span>    <span class="token punctuation">{</span> 
<span class="token number">07</span>         bCanUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">08</span>         <span class="token function">enable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">09</span>         <span class="token comment">/* 使用LCD */</span>
<span class="token number">10</span>         bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">11</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">12</span>    <span class="token punctuation">}</span>
<span class="token number">13</span>    <span class="token function">enable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token punctuation">}</span>

示例<span class="token number">2</span>的代码改进如下：在第<span class="token number">5</span>行前关闭中断。

\`\`\`c
<span class="token number">01</span> <span class="token keyword">int</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> 
<span class="token number">02</span> <span class="token punctuation">{</span>
<span class="token number">03</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> bCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">04</span>    <span class="token function">disable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">05</span>    bCanUse<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token number">06</span>    <span class="token function">enable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">07</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bCanUse <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">08</span>    <span class="token punctuation">{</span> 
<span class="token number">09</span>         <span class="token comment">/* 使用LCD */</span>
<span class="token number">10</span>         bCanUse<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">11</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">12</span>    <span class="token punctuation">}</span>
<span class="token number">13</span>    <span class="token keyword">else</span>
<span class="token number">14</span>    <span class="token punctuation">{</span>
<span class="token number">15</span>        <span class="token function">disable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span>        bCanUse<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token number">17</span>        <span class="token function">enable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">19</span>    <span class="token punctuation">}</span>
<span class="token number">20</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-3-示例8-同步互斥的缺陷" tabindex="-1"><a class="header-anchor" href="#_9-3-示例8-同步互斥的缺陷" aria-hidden="true">#</a> 9.3 示例8：同步互斥的缺陷</h2><p>假设有2个任务：任务1进行复杂的计算，任务2在等待任务1计算完毕，然后打印结果，它们之间就存在“同步”的关系。在等待过程中，如果任务2也参与调度的话，任务1就不能独享CPU，导致最终消耗的时间变长。</p><p>在0802_create_task_use_params的基础上，修改出0901_task_sync_exclusion。 关键代码在“applications\\calc_and_display_app.c”中，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">12</span> <span class="token keyword">static</span> <span class="token class-name">uint32_t</span> g_time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">13</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> g_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">14</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> g_calc_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> g_LCDCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">16</span>
<span class="token number">17</span> <span class="token keyword">void</span> <span class="token function">CalcTask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">18</span> <span class="token punctuation">{</span>
<span class="token number">19</span>      <span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">20</span>
<span class="token number">21</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_LCDCanUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>      g_LCDCanUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">23</span>      <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;CalcTask doing...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">24</span>      <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;PrintTask Waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span>      <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span>      g_LCDCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">27</span>
<span class="token number">28</span>      g_time <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">29</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token number">30</span>      <span class="token punctuation">{</span>
<span class="token number">31</span>              g_sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token number">32</span>      <span class="token punctuation">}</span>
<span class="token number">33</span>      g_calc_end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">34</span>      g_time <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> g_time<span class="token punctuation">;</span>
<span class="token number">35</span>
<span class="token number">36</span>      <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span> <span class="token punctuation">}</span>
<span class="token number">38</span>
<span class="token number">39</span>
<span class="token number">40</span> <span class="token keyword">void</span> <span class="token function">LcdPrintTask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">41</span> <span class="token punctuation">{</span>
<span class="token number">42</span>      <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token number">43</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">44</span>      <span class="token punctuation">{</span>
<span class="token number">45</span>              <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">46</span>
<span class="token number">47</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>g_calc_end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">48</span>
<span class="token number">49</span>              <span class="token comment">/* 打印信息 */</span>
<span class="token number">50</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_LCDCanUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span>              g_LCDCanUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">52</span>
<span class="token number">53</span>              <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>              len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;Sum: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">55</span>              <span class="token function">LCD_PrintHex</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> g_sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>
<span class="token number">57</span>              <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">58</span>              len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">&quot;Time(ms): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">59</span>              <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> g_time<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">60</span>              <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">61</span>
<span class="token number">62</span>              g_LCDCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">63</span>
<span class="token number">64</span>              <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">65</span>      <span class="token punctuation">}</span>
<span class="token number">66</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第28~34行是CalcTask任务的代码，它累加10000000个数据，统计出耗时。</p><p>第47行是LcdPrintTask任务的代码，它在等待CalcTask任务计算完毕。</p><p>注意第45行代码，如果这行代码不注释掉，让LcdPrintTask任务阻塞，计算耗时596ms；如果把第45行注释掉，LcdPrintTask也参与调度，那么计算耗时1192ms，刚好是2倍。</p><p>可见，使用全局变量来实现同步时，另一个“等待的任务”也会抢占CPU资源，程序效率低。后面会引入FreeRTOS的同步机制，使得“等待的任务”进入阻塞状态，提高CPU利用率。</p><h2 id="_9-4-各类方法的对比" tabindex="-1"><a class="header-anchor" href="#_9-4-各类方法的对比" aria-hidden="true">#</a> 9.4 各类方法的对比</h2><p>能实现同步、互斥的内核方法有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)。</p><p>它们都有类似的操作方法：获取/释放、阻塞/唤醒、超时。比如：</p><ul><li>任务A获取资源，用完后任务A释放资源</li><li>任务A获取不到资源则阻塞，任务B释放资源并把任务A唤醒</li><li>任务A获取不到资源则阻塞，并定个闹钟；A要么超时返回，要么在这段时间内因为任务B释放资源而被唤醒。</li></ul><p>这些内核对象五花八门，记不住怎么办？我也记不住，通过对比的方法来区分它们。</p><ul><li>能否传信息？还是只能传递状态？</li><li>为众生（所有任务都可以使用）？只为你（只能指定任务使用）？</li><li>我生产，你们消费？</li><li>我上锁，只能由我开锁</li></ul><table><thead><tr><th><strong>内核对象</strong></th><th><strong>生产者</strong></th><th><strong>消费者</strong></th><th><strong>数据/状态</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>队列</td><td>ALL</td><td>ALL</td><td>数据：若干个数据 谁都可以往队列里扔数据， 谁都可以从队列里读数据</td><td>用来传递数据， 发送者、接收者无限制， 一个数据只能唤醒一个接收者</td></tr><tr><td>事件组</td><td>ALL</td><td>ALL</td><td>多个位：或、与 谁都可以设置(生产)多个位， 谁都可以等待某个位、若干个位</td><td>用来传递事件， 可以是N个事件， 发送者、接受者无限制， 可以唤醒多个接收者：像广播</td></tr><tr><td>信号量</td><td>ALL</td><td>ALL</td><td>数量：0~n 谁都可以增加一个数量， 谁都可消耗一个数量</td><td>用来维持资源的个数， 生产者、消费者无限制， 1个资源只能唤醒1个接收者</td></tr><tr><td>任务通知</td><td>ALL</td><td>只有我</td><td>数据、状态都可以传输， 使用任务通知时， 必须指定接受者</td><td>N对1的关系： 发送者无限制， 接收者只能是这个任务</td></tr><tr><td>互斥量</td><td>只能A开锁</td><td>A上锁</td><td>位：0、1 我上锁：1变为0， 只能由我开锁：0变为1</td><td>就像一个空厕所， 谁使用谁上锁， 也只能由他开锁</td></tr></tbody></table><p>使用图形对比如下：</p><ul><li>队列： <ul><li>里面可以放任意数据，可以放多个数据</li><li>任务、ISR都可以放入数据；任务、ISR都可以从中读出数据</li></ul></li><li>事件组： <ul><li>一个事件用一bit表示，1表示事件发生了，0表示事件没发生</li><li>可以用来表示事件、事件的组合发生了，不能传递数据</li><li>有广播效果：事件或事件的组合发生了，等待它的多个任务都会被唤醒</li></ul></li><li>信号量： <ul><li>核心是&quot;计数值&quot;</li><li>任务、ISR释放信号量时让计数值加1</li><li>任务、ISR获得信号量时，让计数值减1</li></ul></li><li>任务通知： <ul><li>核心是任务的TCB里的数值</li><li>会被覆盖</li><li>发通知给谁？必须指定接收任务</li><li>只能由接收任务本身获取该通知</li></ul></li><li>互斥量： <ul><li>数值只有0或1</li><li>谁获得互斥量，就必须由谁释放同一个互斥量</li></ul></li></ul><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-9/image1.png" style="zoom:67%;">`,47),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","chapter9.html.vue"]]);export{r as default};
