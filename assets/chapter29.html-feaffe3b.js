import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第29章-改进型环形缓冲区" tabindex="-1"><a class="header-anchor" href="#第29章-改进型环形缓冲区" aria-hidden="true">#</a> 第29章 改进型环形缓冲区</h1><h2 id="_29-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_29-1-基本概念" aria-hidden="true">#</a> 29.1 基本概念</h2><p>环形缓冲区是一个先进先出（FIFO）的闭环的存储空间。通俗的理解为，在内存中规划了一块“圆形”的地，将该“圆形”进行N（Ring Buffer的大小）等分，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image1.png" alt=""></p><p>但是实际上，处理器的内存不可能是这样一个闭环的存储方式，而是一片连续的，有起始有结束的空间：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image2.png" alt=""></p><p>开发者在程序中只能申请一段有头有尾的内存，通过软件设计将这片内存实现为一个环形的缓冲区。</p><p>一般而言，对于环形缓冲区的操作需要了解几个基本单位：</p><ul><li>内存起始地址pHead</li><li>内存结束地址pEnd</li><li>内存总大小Length</li><li>可写内存起始地址pwStart</li><li>可写内存大小wLength</li><li>可读内存起始地址prStart</li><li>可读内存大小rLength</li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image3.png" alt=""></p><p>可以发现这几个单位中是存在算术关系的：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image4.PNG" alt=""> ①</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image5.PNG" alt=""> ②</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image6.PNG" alt=""> ③</p><p>将②式换算下，以可写内存大小为结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image7.PNG" alt=""></p><p>将可读的数据称作有效数据valid data，可读的起始内存地址叫有效数据起始地址pValid，可读的数据个数叫有效数据个数pValidLength。而可写的内存，位于有效数据之后，称之为pValidEnd：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image8.png" alt=""></p><p>基于以上信息，就可以将环形缓冲区的信息抽象为结构体RingBufferInfo：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">RingBuffInfo</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pHead<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pEnd<span class="token punctuation">;</span>    
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pValid<span class="token punctuation">;</span>    
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pValidEnd<span class="token punctuation">;</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  nBufferLength<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  nValidLength<span class="token punctuation">;</span>   
<span class="token punctuation">}</span>RingBuffInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于可写的数据个数是可以通过缓冲区大小nBufferLength和有效数据个数nValidLength计算得到，因而未将其封装到RingBufferInfo结构体中。</p><p>对于环形缓冲区，主要的操作有：申请和释放空间，读写数据、清除数据。将这些操作方法和缓冲区信息一起封装为结构体RingBuffer：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span><span class="token punctuation">{</span>
    RingBuffInfo info<span class="token punctuation">;</span>
    <span class="token keyword">int</span>         <span class="token punctuation">(</span><span class="token operator">*</span>Write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         <span class="token punctuation">(</span><span class="token operator">*</span>Clear<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         <span class="token punctuation">(</span><span class="token operator">*</span>Free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>RingBuffer<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第07行的链表，用来管理多个环形缓冲区：把它们放在一个链表里。</p><h2 id="_29-2-申请缓冲区" tabindex="-1"><a class="header-anchor" href="#_29-2-申请缓冲区" aria-hidden="true">#</a> 29.2 申请缓冲区</h2><p>先申请一个RingBuffer结构体，再申请存储数据的空间，最后初始化。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span><span class="token function">RingBufferNew</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    ptbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptbuf<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">free</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Malloc %d bytes failed.\\r\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">+</span> length<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nBufferLength <span class="token operator">=</span> length<span class="token punctuation">;</span>
    
    ptbuf<span class="token operator">-&gt;</span>Write <span class="token operator">=</span> RingBufferWrite<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>Read <span class="token operator">=</span> RingBufferRead<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>Clear <span class="token operator">=</span> RingBufferClear<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>Free <span class="token operator">=</span> RingBufferFree<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> ptbuf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06行：使用C库函数malloc申请一个RingBuffer结构体；</li><li>第12行：分配存储数据的内存；</li><li>第18~21行：初始化缓冲区的信息；</li><li>第23~26行：填充操作函数；</li></ul><h2 id="_29-3-释放缓冲区" tabindex="-1"><a class="header-anchor" href="#_29-3-释放缓冲区" aria-hidden="true">#</a> 29.3 释放缓冲区</h2><p>先是否数据存储空间，再释放RingBuffer结构体本身。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RingBufferFree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-4-写数据到缓冲区" tabindex="-1"><a class="header-anchor" href="#_29-4-写数据到缓冲区" aria-hidden="true">#</a> 29.4 写数据到缓冲区</h2><p>往缓冲区中写入数据需要考虑三个点：</p><ul><li>剩下的空间是否足够？</li><li>超过空间的数据是丢还是留？</li><li>写入数据时如果越界了，就需要缓冲器的头部继续写</li></ul><p>如果从pValidEnd开始写入数据不会超过缓冲区的结束地址，那么直接从pValidEnd处开始写入数据即可：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image9.png" alt=""></p><p>如果从pValidEnd开始写入数据会超过缓冲区的结束地址，那么就需要考虑很多：</p><ul><li>计算从pValidEnd开始到pEnd可以写入多少个数据</li><li>还剩多少个数据需要从pHead处开始写</li><li>计算从pHead开始到pValid可以写入多少个数据，是否足够写入剩下的数据；不够的话如何处理？</li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image10.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image11.png" alt=""></p><p>在本书实验例程中，如果出现了剩余空间不足以容纳新数据时，就用新数据覆盖旧数据：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image12.png" alt=""></p><p>在这个过程中，有效数据的起始地址和结束地址，以及有效数据的个数，需要随着数据的写入跟着变化，这些数据的计算结合示意图可谓一目了然，此处就不再列出计算公式了。</p><p>如果缓冲区的剩余空间足够容纳新数据，那么写操作比较简单。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RingBufferWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">// copy buffer to pValidEnd</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token punctuation">)</span>  <span class="token comment">// 超过了Buffer范围需要分为两段</span>
    <span class="token punctuation">{</span>
        len1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token operator">-</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        len2 <span class="token operator">=</span> length <span class="token operator">-</span> len1<span class="token punctuation">;</span>
        
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd<span class="token punctuation">,</span> src<span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">,</span> src <span class="token operator">+</span> len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">+</span> len2<span class="token punctuation">;</span>   <span class="token comment">// 更新有效数据区尾地址</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd<span class="token punctuation">,</span> src<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">+</span> length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果缓冲区的剩余空间不足以容纳新数据，在使用新数据覆盖老数据时，涉及的计算比较繁琐，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RingBufferWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">// 重新计算已使用区的起始位置</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nBufferLength <span class="token punctuation">)</span>     <span class="token comment">// 要写入的数据超过了缓冲区总长度，分为两段写</span>
    <span class="token punctuation">{</span>
        move_len <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">+</span> length <span class="token operator">-</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nBufferLength<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">+</span> move_len<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            len1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token operator">-</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            len2 <span class="token operator">=</span> move_len <span class="token operator">-</span> len1<span class="token punctuation">;</span>
            
            ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">+</span> len2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">+</span> move_len<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nBufferLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">+</span> length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-5-从缓冲区读数据" tabindex="-1"><a class="header-anchor" href="#_29-5-从缓冲区读数据" aria-hidden="true">#</a> 29.5 从缓冲区读数据</h2><p>相比于写数据，读数据的操作就简单了许多。读数据时，从pValid处开始读，如果越过了pEnd，需要从pHead继续读取剩下的数据：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image13.png" alt=""></p><p>而如果从pValid处读取的数据个数不会越过pEnd，那么直接读出即可：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-29/image14.png" alt=""></p><p>环形缓冲区的读函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RingBufferRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&gt;</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        length <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">+</span> length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        len1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pEnd <span class="token operator">-</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        len2 <span class="token operator">=</span> length <span class="token operator">-</span> len1<span class="token punctuation">;</span>
        
        <span class="token function">memcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid<span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>dst <span class="token operator">+</span> len1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">+</span> len2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">+</span> length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">-=</span> length<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-6-清除缓冲区" tabindex="-1"><a class="header-anchor" href="#_29-6-清除缓冲区" aria-hidden="true">#</a> 29.6 清除缓冲区</h2><p>清除缓冲区时，让RingBuffer的各个成员恢复初始值即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RingBufferClear</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>ptbuf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nBufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValid <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pValidEnd <span class="token operator">=</span> ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>pHead<span class="token punctuation">;</span>
    ptbuf<span class="token operator">-&gt;</span>info<span class="token punctuation">.</span>nValidLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter29.html.vue"]]);export{r as default};
