import{_ as n,o as s,c as a,e}from"./app-829098b3.js";const t={},p=e(`<h1 id="第11章-信号量-semaphore" tabindex="-1"><a class="header-anchor" href="#第11章-信号量-semaphore" aria-hidden="true">#</a> 第11章 信号量(semaphore)</h1><p>前面介绍的队列(queue)可以用于传输数据：在任务之间、任务和中断之间。</p><p>消息队列用于传输多个数据，但是有时候我们只需要传递状态，这个状态值需要用一个数值表示，比如：</p><ul><li>卖家：做好了1个包子！做好了2个包子！做好了3个包子！</li><li>买家：买了1个包子，包子数量减1</li><li>这个停车位我占了，停车位减1</li><li>我开车走了，停车位加1</li></ul><p>在这种情况下我们只需要维护一个数值，使用信号量效率更高、更节省内存 本章涉及如下内容：</p><ul><li>怎么创建、删除信号量</li><li>怎么发送、获得信号量</li><li>什么是计数型信号量？什么是二进制信号量？</li></ul><h2 id="_11-1-信号量的特性" tabindex="-1"><a class="header-anchor" href="#_11-1-信号量的特性" aria-hidden="true">#</a> 11.1 信号量的特性</h2><h3 id="_11-1-1-信号量的常规操作" tabindex="-1"><a class="header-anchor" href="#_11-1-1-信号量的常规操作" aria-hidden="true">#</a> 11.1.1 信号量的常规操作</h3><p>信号量这个名字很恰当：</p><ul><li>信号：起通知作用</li><li>量：还可以用来表示资源的数量 <ul><li>当&quot;量&quot;没有限制时，它就是&quot;计数型信号量&quot;(Counting Semaphores)</li><li>当&quot;量&quot;只有0、1两个取值时，它就是&quot;二进制信号量&quot;(Binary Semaphores)</li></ul></li><li>支持的动作：&quot;give&quot;给出资源，计数值加1；&quot;take&quot;获得资源，计数值减1</li></ul><p>计数型信号量的典型场景是：</p><ul><li>计数：事件产生时&quot;give&quot;信号量，让计数值加1；处理事件时要先&quot;take&quot;信号量，就是获得信号量，让计数值减1。</li><li>资源管理：要想访问资源需要先&quot;take&quot;信号量，让计数值减1；用完资源后&quot;give&quot;信号量，让计数值加1。</li></ul><p>信号量的&quot;give&quot;、&quot;take&quot;双方并不需要相同，可以用于生产者-消费者场合：</p><ul><li>生产者为任务A、B，消费者为任务C、D</li><li>一开始信号量的计数值为0，如果任务C、D想获得信号量，会有两种结果： <ul><li>阻塞：买不到东西咱就等等吧，可以定个闹钟(超时时间)</li><li>即刻返回失败：不等</li></ul></li><li>任务A、B可以生产资源，就是让信号量的计数值增加1，并且把等待这个资源的顾客唤醒</li><li>唤醒谁？谁优先级高就唤醒谁，如果大家优先级一样就唤醒等待时间最长的人</li></ul><p>二进制信号量跟计数型的唯一差别，就是计数值的最大值被限定为1。</p><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-11/image1.png" alt=""></p><h3 id="_11-1-2-信号量跟队列的对比" tabindex="-1"><a class="header-anchor" href="#_11-1-2-信号量跟队列的对比" aria-hidden="true">#</a> 11.1.2 信号量跟队列的对比</h3><p>差异列表如下：</p><table><thead><tr><th><strong>队列</strong></th><th><strong>信号量</strong></th></tr></thead><tbody><tr><td>可以容纳多个数据， 创建队列时有2部分内存: 队列结构体、存储数据的空间</td><td>只有计数值，无法容纳其他数据。 创建信号量时，只需要分配信号量结构体</td></tr><tr><td>生产者：没有空间存入数据时可以阻塞</td><td>生产者：用于不阻塞，计数值已经达到最大时返回失败</td></tr><tr><td>消费者：没有数据时可以阻塞</td><td>消费者：没有资源时可以阻塞</td></tr></tbody></table><h3 id="_11-1-3-两种信号量的对比" tabindex="-1"><a class="header-anchor" href="#_11-1-3-两种信号量的对比" aria-hidden="true">#</a> 11.1.3 两种信号量的对比</h3><p>信号量的计数值都有限制：限定了最大值。如果最大值被限定为1，那么它就是二进制信号量；如果最大值不是1，它就是计数型信号量。</p><p>差别列表如下：</p><table><thead><tr><th><strong>二进制信号量</strong></th><th><strong>技术型信号量</strong></th></tr></thead><tbody><tr><td>被创建时初始值为0</td><td>被创建时初始值可以设定</td></tr><tr><td>其他操作是一样的</td><td>其他操作是一样的</td></tr></tbody></table><h2 id="_11-2-信号量函数" tabindex="-1"><a class="header-anchor" href="#_11-2-信号量函数" aria-hidden="true">#</a> 11.2 信号量函数</h2><p>使用信号量时，先创建、然后去添加资源、获得资源。使用句柄来表示一个信号量。</p><h3 id="_11-2-1-创建" tabindex="-1"><a class="header-anchor" href="#_11-2-1-创建" aria-hidden="true">#</a> 11.2.1 创建</h3><p>使用信号量之前，要先创建，得到一个句柄；使用信号量时，要使用句柄来表明使用哪个信号量。 对于二进制信号量、计数型信号量，它们的创建函数不一样：</p><table><thead><tr><th></th><th><strong>二进制信号量</strong></th><th><strong>计数型信号量</strong></th></tr></thead><tbody><tr><td>动态创建</td><td>xSemaphoreCreateBinary 计数值初始值为0</td><td>xSemaphoreCreateCounting</td></tr><tr><td></td><td>vSemaphoreCreateBinary(过时了) 计数值初始值为1</td><td></td></tr><tr><td>静态创建</td><td>xSemaphoreCreateBinaryStatic</td><td>xSemaphoreCreateCountingStatic</td></tr></tbody></table><p>创建二进制信号量的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 创建一个二进制信号量，返回它的句柄。
 * 此函数内部会分配信号量结构体 
 * 返回值: 返回句柄，非NULL表示成功
 */</span>
    SemaphoreHandle_t <span class="token function">xSemaphoreCreateBinary</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 创建一个二进制信号量，返回它的句柄。
 * 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针
 * 返回值: 返回句柄，非NULL表示成功
 */</span>
    SemaphoreHandle_t <span class="token function">xSemaphoreCreateBinaryStatic</span><span class="token punctuation">(</span> StaticSemaphore_t <span class="token operator">*</span>pxSemaphoreBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建计数型信号量的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 创建一个计数型信号量，返回它的句柄。
 * 此函数内部会分配信号量结构体 
 * uxMaxCount: 最大计数值
 * uxInitialCount: 初始计数值
 * 返回值: 返回句柄，非NULL表示成功
 */</span>
    SemaphoreHandle_t <span class="token function">xSemaphoreCreateCounting</span><span class="token punctuation">(</span>UBaseType_t uxMaxCount<span class="token punctuation">,</span> UBaseType_t uxInitialCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 创建一个计数型信号量，返回它的句柄。
 * 此函数无需动态分配内存，所以需要先有一个StaticSemaphore_t结构体，并传入它的指针
 * uxMaxCount: 最大计数值
 * uxInitialCount: 初始计数值
 * pxSemaphoreBuffer: StaticSemaphore_t结构体指针
 * 返回值: 返回句柄，非NULL表示成功
 */</span>
    SemaphoreHandle_t <span class="token function">xSemaphoreCreateCountingStatic</span><span class="token punctuation">(</span> UBaseType_t uxMaxCount<span class="token punctuation">,</span> 
                                                 UBaseType_t uxInitialCount<span class="token punctuation">,</span> 
                                                 StaticSemaphore_t <span class="token operator">*</span>pxSemaphoreBuffer <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-2-删除" tabindex="-1"><a class="header-anchor" href="#_11-2-2-删除" aria-hidden="true">#</a> 11.2.2 删除</h3><p>对于动态创建的信号量，不再需要它们时，可以删除它们以回收内存。</p><p>vSemaphoreDelete可以用来删除二进制信号量、计数型信号量，函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * xSemaphore: 信号量句柄，你要删除哪个信号量
 */</span>
    <span class="token keyword">void</span> <span class="token function">vSemaphoreDelete</span><span class="token punctuation">(</span> SemaphoreHandle_t xSemaphore <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-3-give-take" tabindex="-1"><a class="header-anchor" href="#_11-2-3-give-take" aria-hidden="true">#</a> 11.2.3 give/take</h3><p>二进制信号量、计数型信号量的give、take操作函数是一样的。这些函数也分为2个版本：给任务使用，给ISR使用。列表如下：</p><table><thead><tr><th></th><th><strong>在任务中使用</strong></th><th><strong>在ISR中使用</strong></th></tr></thead><tbody><tr><td>give</td><td>xSemaphoreGive</td><td>xSemaphoreGiveFromISR</td></tr><tr><td>take</td><td>xSemaphoreTake</td><td>xSemaphoreTakeFromISR</td></tr></tbody></table><p>xSemaphoreGive的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span> SemaphoreHandle_t xSemaphore <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>xSemaphoreGive函数的参数与返回值列表如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>xSemaphore</td><td>信号量句柄，释放哪个信号量</td></tr><tr><td>返回值</td><td>pdTRUE表示成功, 如果二进制信号量的计数值已经是1，再次调用此函数则返回失败； 如果计数型信号量的计数值已经是最大值，再次调用此函数则返回失败</td></tr></tbody></table><p>pxHigherPriorityTaskWoken的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xSemaphoreGiveFromISR</span><span class="token punctuation">(</span>
                        SemaphoreHandle_t xSemaphore<span class="token punctuation">,</span>
                        BaseType_t <span class="token operator">*</span>pxHigherPriorityTaskWoken
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xSemaphoreGiveFromISR函数的参数与返回值列表如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>xSemaphore</td><td>信号量句柄，释放哪个信号量</td></tr><tr><td>pxHigherPriorityTaskWoken</td><td>如果释放信号量导致更高优先级的任务变为了就绪态， 则*pxHigherPriorityTaskWoken = pdTRUE</td></tr><tr><td>返回值</td><td>pdTRUE表示成功, 如果二进制信号量的计数值已经是1，再次调用此函数则返回失败； 如果计数型信号量的计数值已经是最大值，再次调用此函数则返回失败</td></tr></tbody></table><p>xSemaphoreTake的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xSemaphoreTake</span><span class="token punctuation">(</span>
                   SemaphoreHandle_t xSemaphore<span class="token punctuation">,</span>
                   TickType_t xTicksToWait
               <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xSemaphoreTake函数的参数与返回值列表如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>xSemaphore</td><td>信号量句柄，获取哪个信号量</td></tr><tr><td>xTicksToWait</td><td>如果无法马上获得信号量，阻塞一会： 0：不阻塞，马上返回 portMAX_DELAY: 一直阻塞直到成功 其他值: 阻塞的Tick个数，可以使用*pdMS_TO_TICKS()*来指定阻塞时间为若干ms</td></tr><tr><td>返回值</td><td>pdTRUE表示成功</td></tr></tbody></table><p>xSemaphoreTakeFromISR的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xSemaphoreTakeFromISR</span><span class="token punctuation">(</span>
                        SemaphoreHandle_t xSemaphore<span class="token punctuation">,</span>
                        BaseType_t <span class="token operator">*</span>pxHigherPriorityTaskWoken
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xSemaphoreTakeFromISR函数的参数与返回值列表如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>xSemaphore</td><td>信号量句柄，获取哪个信号量</td></tr><tr><td>pxHigherPriorityTaskWoken</td><td>如果获取信号量导致更高优先级的任务变为了就绪态， 则*pxHigherPriorityTaskWoken = pdTRUE</td></tr><tr><td>返回值</td><td>pdTRUE表示成功</td></tr></tbody></table><h2 id="_11-3-示例13-使用计数型信号量" tabindex="-1"><a class="header-anchor" href="#_11-3-示例13-使用计数型信号量" aria-hidden="true">#</a> 11.3 示例13: 使用计数型信号量</h2><p>本节代码为：1101_semaphore_count，主看看applications\\nwatch\\game2.c。</p><p>3俩小车要进城，但是通行证只有2张，进城后就可以交还同行证，其他车辆就可以得到通行证。这个场景使用计数型信号量。</p><p>一开始，创建了一个信号量，它的最大值为3，初始值为2，代码如下（第151行）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">142</span> <span class="token keyword">void</span> <span class="token function">car_game</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">143</span> <span class="token punctuation">{</span>
<span class="token number">144</span>     <span class="token keyword">int</span> x<span class="token punctuation">;</span>
<span class="token number">145</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
<span class="token number">146</span>     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tmpLcdBufGame<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">147</span>     g_framebuffer <span class="token operator">=</span> <span class="token function">LCD_GetFrameBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_xres<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_yres<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_bpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">148</span>     <span class="token function">draw_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">149</span>     <span class="token function">draw_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">150</span>
<span class="token number">151</span>     g_xSemTicks <span class="token operator">=</span> <span class="token function">xSemaphoreCreateCounting</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>汽车任务代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">89</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CarTask</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">90</span> <span class="token punctuation">{</span>
<span class="token number">91</span>      <span class="token keyword">struct</span> <span class="token class-name">car</span> <span class="token operator">*</span>pcar <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token number">92</span>      <span class="token keyword">struct</span> <span class="token class-name">ir_data</span> idata<span class="token punctuation">;</span>
<span class="token number">93</span>
<span class="token number">94</span>      <span class="token comment">/* 创建自己的队列 */</span>
<span class="token number">95</span>      QueueHandle_t xQueueIR <span class="token operator">=</span> <span class="token function">xQueueCreate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ir_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">96</span>
<span class="token number">97</span>      <span class="token comment">/* 注册队列 */</span>
<span class="token number">98</span>      <span class="token function">RegisterIRQueueHandle</span><span class="token punctuation">(</span>xQueueIR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">99</span>
<span class="token number">100</span>     <span class="token comment">/* 显示汽车 */</span>
<span class="token number">101</span>     <span class="token function">ShowCar</span><span class="token punctuation">(</span>pcar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">102</span>
<span class="token number">103</span>     <span class="token comment">/* 获得信号量 */</span>
<span class="token number">104</span>     <span class="token function">xSemaphoreTake</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">,</span> portMAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">105</span>
<span class="token number">106</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">107</span>     <span class="token punctuation">{</span>
<span class="token comment">/* 省略 */</span>
<span class="token number">131</span>                             <span class="token keyword">if</span> <span class="token punctuation">(</span>pcar<span class="token operator">-&gt;</span>x <span class="token operator">==</span> g_xres <span class="token operator">-</span> CAR_LENGTH<span class="token punctuation">)</span>
<span class="token number">132</span>                             <span class="token punctuation">{</span>
<span class="token number">133</span>                                     <span class="token comment">/* 释放信号量 */</span>
<span class="token number">134</span>                                     <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">135</span>                                     <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">136</span>                             <span class="token punctuation">}</span>
<span class="token number">137</span>                     <span class="token punctuation">}</span>
<span class="token number">138</span>             <span class="token punctuation">}</span>
<span class="token number">139</span>     <span class="token punctuation">}</span>
<span class="token number">140</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第104行：获得信号量，如果不成功则阻塞。</p><p>第131~134行：汽车行驶到最右边后，释放信号量。如果有其他汽车任务在等待这个信号量，它就会被唤醒。</p><p>烧录、运行程序后，现象为：car1、car2一起往右行驶，任何一辆到达右边后car3才开始往右行驶。</p><h2 id="_11-4-示例14-二进制信号量" tabindex="-1"><a class="header-anchor" href="#_11-4-示例14-二进制信号量" aria-hidden="true">#</a> 11.4 示例14: 二进制信号量</h2><p>本节代码为：1102_semaphore_binary，主要看applications\\nwatch\\game2.c。</p><p>3俩小车要进城，但是通行证只有1张，进城后就可以交还同行证，其他车辆就可以得到通行证。这个场景使用二进制信号量。</p><p>跟1101_semaphore_count相比，只是在创建信号量时的代码不一样，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">142</span> <span class="token keyword">void</span> <span class="token function">car_game</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">143</span> <span class="token punctuation">{</span>
<span class="token number">144</span>     <span class="token keyword">int</span> x<span class="token punctuation">;</span>
<span class="token number">145</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
<span class="token number">146</span>     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> tmpLcdBufGame<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">147</span>     g_framebuffer <span class="token operator">=</span> <span class="token function">LCD_GetFrameBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_xres<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_yres<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_bpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">148</span>     <span class="token function">draw_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">149</span>     <span class="token function">draw_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">150</span>
<span class="token number">151</span>     <span class="token comment">//g_xSemTicks = xSemaphoreCreateCounting(1, 1);</span>
<span class="token number">152</span>     g_xSemTicks <span class="token operator">=</span> <span class="token function">xSemaphoreCreateBinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">153</span>     <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 对于二进制信号量,它的最大值是1,后面两次give无效 */</span>
<span class="token number">154</span>     <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">155</span>     <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第152行：创建二进制信号量，它的初始值是1。需要使用第153行，设置它的值为1。二进制信号量的值最大就是1，所以第154、155行无效果。</p><p>实现现象：car1、car2、car3依次运行，前面的车行驶到最右边时，下一辆车才开始运行。</p><h2 id="_11-5-示例15-优先级反转" tabindex="-1"><a class="header-anchor" href="#_11-5-示例15-优先级反转" aria-hidden="true">#</a> 11.5 示例15: 优先级反转</h2><p>本节代码为：1103_semaphore_priority_inversion，主要看applications\\nwatch\\game2.c。 使用信号量时，会出现优先级反转的现象，比如：</p><p>① car1_task优先级最低，car2_task优先级为中，car3_task优先级最高 ② car1_task先运行，获得的信号量，它可以运行：car1往右行驶 ③ car2_task接着运行，它不需要获得信号量，它的优先级高于car1_task，所以它可以往右行驶 ④ car3_task最后运行，它也需要获得信号量：但是car1_task占用了信号量，car3_task阻塞。</p><p>在上述场景中，car2_task的优先级高于car1_task，car2_task没放弃运行的话，car1_task无法运行。car1_task无法运行，就无法释放信号量。最终：优先级最高的car3_task反而无法运行。这就是优先级反转：小职员（car1_task）手上拿着钥匙，中层领导（car2_task）毫不相让，使得小职员的工作迟迟无法完成无法交还钥匙，使得大老板（car3_task）很无语：我需要钥匙才能工作，但是你们太不懂事了。</p><p>本程序使用不同的函数创建任务，这3个任务的优先级不同，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">343</span>     <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>Car1Task<span class="token punctuation">,</span> <span class="token string">&quot;car1_task&quot;</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">344</span>     <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>Car2Task<span class="token punctuation">,</span> <span class="token string">&quot;car2_task&quot;</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">345</span>     <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>Car3Task<span class="token punctuation">,</span> <span class="token string">&quot;car3_task&quot;</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_cars<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">346</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>car1_task的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">89</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Car1Task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">90</span> <span class="token punctuation">{</span>
<span class="token number">91</span>      <span class="token keyword">struct</span> <span class="token class-name">car</span> <span class="token operator">*</span>pcar <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token number">92</span>      <span class="token keyword">struct</span> <span class="token class-name">ir_data</span> idata<span class="token punctuation">;</span>
<span class="token number">93</span>
<span class="token number">94</span>      <span class="token comment">/* 创建自己的队列 */</span>
<span class="token number">95</span>      QueueHandle_t xQueueIR <span class="token operator">=</span> <span class="token function">xQueueCreate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ir_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">96</span>
<span class="token number">97</span>      <span class="token comment">/* 注册队列 */</span>
<span class="token number">98</span>      <span class="token function">RegisterIRQueueHandle</span><span class="token punctuation">(</span>xQueueIR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">99</span>
<span class="token number">100</span>     <span class="token comment">/* 显示汽车 */</span>
<span class="token number">101</span>     <span class="token function">ShowCar</span><span class="token punctuation">(</span>pcar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">102</span>
<span class="token number">103</span>     <span class="token comment">/* 获得信号量 */</span>
<span class="token number">104</span>     <span class="token function">xSemaphoreTake</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">,</span> portMAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">105</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第104行获取信号量，成功后就继续执行后续代码往右行驶。</p><p>car1_task的优先级最低，为何是它获得信号量？因为：car2_task、car3_task都故意阻塞了一阵子，让car1_task新运行。</p><p>car2_task代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">142</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Car2Task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">143</span> <span class="token punctuation">{</span>
<span class="token number">144</span>     <span class="token keyword">struct</span> <span class="token class-name">car</span> <span class="token operator">*</span>pcar <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token number">145</span>     <span class="token keyword">struct</span> <span class="token class-name">ir_data</span> idata<span class="token punctuation">;</span>
<span class="token number">146</span>
<span class="token number">147</span>     <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">148</span>
<span class="token number">149</span>     <span class="token comment">/* 创建自己的队列 */</span>
<span class="token number">150</span>     QueueHandle_t xQueueIR <span class="token operator">=</span> <span class="token function">xQueueCreate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ir_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">151</span>
<span class="token number">152</span>     <span class="token comment">/* 注册队列 */</span>
<span class="token number">153</span>     <span class="token function">RegisterIRQueueHandle</span><span class="token punctuation">(</span>xQueueIR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">154</span>
<span class="token number">155</span>     <span class="token comment">/* 显示汽车 */</span>
<span class="token number">156</span>     <span class="token function">ShowCar</span><span class="token punctuation">(</span>pcar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">157</span>
<span class="token number">158</span>     <span class="token comment">/* 获得信号量 */</span>
<span class="token number">159</span>     <span class="token comment">//xSemaphoreTake(g_xSemTicks, portMAX_DELAY);</span>
<span class="token comment">/* 省略 */</span>
<span class="token number">187</span>                             <span class="token keyword">if</span> <span class="token punctuation">(</span>pcar<span class="token operator">-&gt;</span>x <span class="token operator">==</span> g_xres <span class="token operator">-</span> CAR_LENGTH<span class="token punctuation">)</span>
<span class="token number">188</span>                             <span class="token punctuation">{</span>
<span class="token number">189</span>                                     <span class="token comment">/* 释放信号量 */</span>
<span class="token number">190</span>                                     <span class="token comment">//xSemaphoreGive(g_xSemTicks);</span>
<span class="token number">191</span>                                     <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">192</span>                             <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第159行被注释掉了，它无需获得信号量，就可以让car2往右行驶。在车子运行过程中，我们R_BSP_SoftwareDelay来延时，而不使用vTaskDelay，就是让car2_task不阻塞，是的car1_task无法运行。car2行驶到最后边后，任务自杀，car1_task才能再次运行。</p><p>car3_task代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">199</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Car3Task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">200</span> <span class="token punctuation">{</span>
<span class="token number">201</span>     <span class="token keyword">struct</span> <span class="token class-name">car</span> <span class="token operator">*</span>pcar <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token number">202</span>     <span class="token keyword">struct</span> <span class="token class-name">ir_data</span> idata<span class="token punctuation">;</span>
<span class="token number">203</span>
<span class="token number">204</span>
<span class="token number">205</span>     <span class="token comment">/* 创建自己的队列 */</span>
<span class="token number">206</span>     QueueHandle_t xQueueIR <span class="token operator">=</span> <span class="token function">xQueueCreate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ir_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">207</span>
<span class="token number">208</span>     <span class="token comment">/* 注册队列 */</span>
<span class="token number">209</span>     <span class="token function">RegisterIRQueueHandle</span><span class="token punctuation">(</span>xQueueIR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">210</span>
<span class="token number">211</span>     <span class="token comment">/* 显示汽车 */</span>
<span class="token number">212</span>     <span class="token function">ShowCar</span><span class="token punctuation">(</span>pcar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">213</span>
<span class="token number">214</span>     <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">215</span>
<span class="token number">216</span>     <span class="token comment">/* 获得信号量 */</span>
<span class="token number">217</span>     <span class="token function">xSemaphoreTake</span><span class="token punctuation">(</span>g_xSemTicks<span class="token punctuation">,</span> portMAX_DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟Car1Task函数相比，就是多了第214行：它在开头故意阻塞一阵子，一遍car1_task能先获得信号量。</p><p>第217行：获得信号量，不成功，进入阻塞状态。</p><p>实验现象：car1新运行一阵子，car2接着运行，car2运行到终点后car1继续运行，car1运行到终点后car3才开始运行。</p><p>如果修改car2_task的代码，把第191行的“vTaskDelete(NULL);”去掉，那么即使car2运行到了终点，car1和car3也不能运行。</p>`,91),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","chapter11.html.vue"]]);export{r as default};
