import{_ as t,r as e,o as c,c as o,a as n,b as s,d as l,e as a}from"./app-829098b3.js";const i={},u=a(`<h1 id="第23章-adc与dsp" tabindex="-1"><a class="header-anchor" href="#第23章-adc与dsp" aria-hidden="true">#</a> 第23章 ADC与DSP</h1><p>本章目标</p><ul><li>了解ADC基本概念和RA6M5处理器的ADC模块；</li><li>学会使用RASC配置ADC采样引脚的模拟信号；</li><li>学会使用RASC配置CMSIS的DSP库对ADC的采样数据做FFT处理；</li></ul><h2 id="_23-1-adc简介" tabindex="-1"><a class="header-anchor" href="#_23-1-adc简介" aria-hidden="true">#</a> 23.1 ADC简介</h2><p>自然界的信号几乎都是模拟信号，比如光亮、温度、压力、声音，而为了方便存储、处理，计算机里面都是数字的0/1信号，将模拟信号（连续信号）转换为数字信号（离散信号）的器件就叫模数转换器(Analog-to-Digital Converter，ADC)。</p><p>按原理可分为：并行比较型A/D转换器(FLASH ADC)、逐次比较型A/D转换器(SAR ADC)和双积分式A/D转换器(Double Integral ADC)。</p><p>A/D转换过程通常为4步：采样、保持、量化和编码。如下图所示，</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image1.png" alt=""></p><p>一个连续的电压信号ui(t)通过一个由方波CPs控制的开关S之后施加到电容C上，由于电容两端的电压不会突变，可知在S断开时C将维持ui(t)在开关断开瞬间的电压一段时间，直到开关S再次打开。这样，一个模拟的电压信号就转换成了采样展宽信号us(t)，其中CPs的频率就是采样频率fs。最后，由ADC的数字编码电路将采样展宽信号us(t)转换成n位的数字量dn-1:d0并输出。</p><p>采样是对模拟信号周期性地抽取样值，使模拟信号转化为时间上离散的脉冲信号。采样频率（fS）越高，采样越密集，采样值越多，也就越接近模拟信号。为确保采样后的信号能够还原模拟信号，根据香农-奈奎斯特(Shannon &amp; Nyquist)采样定理，采样频率必须大于等于2倍输入模拟信号的最高截止频率（fImax）：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image2.jpg" alt=""></p><p>ADC的主要有三个性能指标：分辨率、转换时间和转换精度。</p><ul><li><p>分辨率：又称为转换精度，指ADC能分辨的最小电压，通常使用二进制有效位表示，反应了ADC对输入模拟量微小变化的分辨能力。当最大输入电压一定时，位数越多，量化单位越小，误差越小，分辨率越高。比如一个12位的ADC，参考电压为3.3V，则其能分辨的最小电压为：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image3.jpg" alt=""></p></li><li><p>转换时间：其倒数为转换速率，指ADC从控制信号到来开始，到输出端得到稳定的数字信号所经历的时间。转换时间通常与ADC类型有关，双积分型ADC的转换时间一般为几十毫秒，属于低速ADC；逐次逼近型ADC的转换时间一般为几十微妙，属于中速ADC；并联比较型ADC的转换时间一般为几十纳秒，属于高速ADC。</p></li><li><p>转换精度：指ADC输出的数字量所表示的模拟值与实际输入的模拟量之间的偏差，通常为1个或半个最小数字量的模拟变化量，表示为1LSB或1/2LSB。</p></li></ul><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><h2 id="_23-2-ra6m5处理器的adc" tabindex="-1"><a class="header-anchor" href="#_23-2-ra6m5处理器的adc" aria-hidden="true">#</a> 23.2 RA6M5处理器的ADC</h2><h3 id="_23-2-1-硬件特性" tabindex="-1"><a class="header-anchor" href="#_23-2-1-硬件特性" aria-hidden="true">#</a> 23.2.1 硬件特性</h3><p>ADC的时钟源是PCLKC，在RA6M5的用户手册中对于PCLKC的时钟描述如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image4.png" alt=""></p><p>PCLKC总线时钟最高能到50MHz，也就是说ADC12的转换时钟最高是50MHz。本书所有的实验都是在CPU支持的最高时钟下运行的，因而对于本章的ADC实验而言，其时钟都是50MHz。以50Mhz的ADC时钟而言，其部分硬件特性见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image5.jpg" alt=""></p><p>瑞萨RA6M5芯片有2个逐次逼近型硬件ADC单元ADC0和ADC1，两个ADC共有多达26路采样通道（AN000~AN010，AN012，AN013，AN100~AN102，AN116~AN128），支持的采样有效位有8-bit，10-bit和12-bit。在阻抗为400Ω、时钟为50MHz情况下，采样转换时间最快为0.4us，即25MHz的采样率。</p><p>ADC输入范围为：VREFL-≤VIN≤VREFH+。RA6M5的参考电压是由VREFL、VREFH、AVCC0、AVSS0这四个外部引脚决定，且每个单元可以设置不同的参考电压，具体可以通过设置不同通道的VREFL、VREFH进行改变。</p><p>在设计原理图的时候一般把AVSS0和VREFL接地，把AVCC0和VREFH接3V3，得到ADC的输入电压范围为：0~3.3V。</p><p>如果采用12bit ADC是，那么12位满量程对应的就是3.3V，12位满量程对应的数字值是：2^12 = 4096。数值0对应的就是0V。如果转换后的数字量数值为n，n对应的模拟电压为v，那么：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image6.jpg" alt=""></p><p>瑞萨RA6M5的ADC有3种工作模式：</p><ol><li>单次扫描模式：在单次扫描下，一次扫描一个或多个指定通道。</li><li>连续扫描模式：在连续扫描下，一个或多个指定的通道被重复扫描，直到软件设置寄存器ADCSR.ADST位为0。</li><li>分组扫描模式：将所选择的模拟输入通道分为A组和b组，然后按组对组内的通道进行一次A/D转换。A、B组可独立选择扫描启动条件，可独立启动A、B组的A/D转换。</li></ol><p>对于单次扫描模式和连续扫描模式，都会从最小的扫描通道开始从低到高进行A/D转换。如果开启了自诊断模式，在每次扫描开始时会执行一次转换，它会在三个参考电压中选择一个来转换。每一种转换模式都有着它的优点和缺点，需要通过实际需求来选择。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image7.png" alt=""></p><h3 id="_23-2-3adc-的单次扫描采样" tabindex="-1"><a class="header-anchor" href="#_23-2-3adc-的单次扫描采样" aria-hidden="true">#</a> 23.2.3ADC 的单次扫描采样</h3><p>在单次扫描下，一次扫描一个或多个指定通道。在单次扫描模式转换期间，可以通过ADST为来判断ADC是否处在工作状态，在ADC转换的期间ADST为将一直保持为1，当所有选定通道的ADST转换完成时，将自动设置为0。</p><ol><li>当ADCSR.ADST位通过软件触发器、同步触发器输入（ELC）和异步触发器输入被置1的时候，ADC转换开始。对在ADANSA0和ADANSA1寄存器中选择的ANn通道进行A/D转换，从编号最小通道开始。</li><li>每当单个信道的A/D转换完成时，A/D转换结果都被存储在关联的A/D数据寄存器（ADDRy）中。</li><li>当所有选定通道的A/D转换完成时，将产生一个ADC12i_ADI（i=0,1）中断请求。</li></ol><h3 id="_23-2-4-adc的连续扫描采样" tabindex="-1"><a class="header-anchor" href="#_23-2-4-adc的连续扫描采样" aria-hidden="true">#</a> 23.2.4 ADC的连续扫描采样</h3><p>在连续扫描下，一个或多个指定的通道被重复扫描，直到软件设置寄存器ADCSR.ADST位为0。</p><ol><li>当ADCSR.ADST位通过软件触发器、同步触发器输入（ELC）和异步触发器输入被置1的时候，ADC转换开始。对在ADANSA0和ADANSA1寄存器中选择的ANn通道进行A/D转换，从编号最小通道开始。</li><li>每当单个信道的A/D转换完成时，A/D转换结果都被存储在关联的A/D数据寄存器（ADDRy）中。</li><li>当所有选定通道的A/D转换完成时，将生成一个ADC12i_ADI（i=0,1）中断请求。 ADCSR.ADST位不会自动清除,只要ADCSR.ADST位保持1时就会一直的重复步骤b/c，直到ADCSR.ADST位被软件置为0时ADC转换才会停止，之后ADC单元进入等待状态。</li></ol><h3 id="_23-2-5-adc的组扫描采样" tabindex="-1"><a class="header-anchor" href="#_23-2-5-adc的组扫描采样" aria-hidden="true">#</a> 23.2.5 ADC的组扫描采样</h3><p>将所选择的模拟输入通道分为A组和B组，然后按组对组内的模拟输入通道进行一次A/D转换。A、B组可独立选择扫描启动条件，可独立启动A、B组的A/D转换。</p><ol><li>当ELC0上的GPT触发ELC_ADC（A组）时，A组的ADC开始转换。</li><li>当组A扫描完成时，将生成一个ADC12i_ADI（i=0,1）中断。</li><li>B组的扫描由ELC_ADC（A组）触发。</li><li>当B组扫描完成时，如果ADCSR.GBADIE位为1时将生成一个ADC12i_GBADI（i=0,1）中断。</li></ol><h3 id="_23-2-6-adc采样触发源" tabindex="-1"><a class="header-anchor" href="#_23-2-6-adc采样触发源" aria-hidden="true">#</a> 23.2.6 ADC采样触发源</h3><p>触发ADC开启转换的触发源有多种，主要分为三类：</p><ul><li>软件触发</li><li>异步触发，也就是外部引脚ADTRGn触发采样；</li><li>同步触发，也就是使用ELC连接其他外设信号触发AD采样；</li></ul><p>如果使用ELC连接其他外设同步触发AD采样的话，那么触发源就多种多样了。可以通过定时器计数溢出触发、通信结束信号触发等等。使用哪一种触发方式取决于实际的项目需求。</p><h3 id="_23-2-7-adc采样转换时间" tabindex="-1"><a class="header-anchor" href="#_23-2-7-adc采样转换时间" aria-hidden="true">#</a> 23.2.7 ADC采样转换时间</h3><p>根据瑞萨RA6M5的用户手册提供的时间转换图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image8.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image9.jpg" alt=""></p><h2 id="_23-3-adc-dmac模块的使用" tabindex="-1"><a class="header-anchor" href="#_23-3-adc-dmac模块的使用" aria-hidden="true">#</a> 23.3 ADC-DMAC模块的使用</h2><h3 id="_23-3-1-配置adc引脚" tabindex="-1"><a class="header-anchor" href="#_23-3-1-配置adc引脚" aria-hidden="true">#</a> 23.3.1 配置ADC引脚</h3><p>在RASC配置界面的“Pins”中的“Peripherals”中找到“Analog:ADC”,根据硬件设计的AD引脚决定选择“ADC0”还是“ADC1”。本书以ADC0的通道5为例，使用的引脚是P005，如下图所示;</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image10.png" alt=""></p><h3 id="_23-3-2-配置adc模块" tabindex="-1"><a class="header-anchor" href="#_23-3-2-配置adc模块" aria-hidden="true">#</a> 23.3.2 配置ADC模块</h3><p>在FSP配置界面的Stacks中，可以添加两类ADC的Stack模块：ADC和ADC-DMAC Integration。ADC-DMAC是在ADC的基础上再增添DMA功能，在本书下一小节会讲到如何配置。</p><ol><li>添加ADC Stack</li></ol><p>添加步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image11.png" alt=""></p><ol start="2"><li>配置ADC Module General</li></ol><p>ADC Module General的参数详情见下表：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image12.jpg" style="zoom:80%;"><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image13.png" alt=""></p><ol start="3"><li>配置ADC Module Input</li></ol><p>配置ADC的采样通道以及窗口电压比较等，参数描述如下表：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image14.jpg" style="zoom:67%;"><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image15.png" alt=""></p><ol start="4"><li>配置ADC Module Interrupts</li></ol><p>配置ADC采样的触发源、中断使能优先级和中断回调函数名等，参数描述如下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image16.jpg" alt=""></p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image17.png" style="zoom:150%;"><ol start="5"><li>配置ADC Module Extra</li></ol><p>使能与否ADC的环形缓冲区。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image18.png" alt=""></p><h3 id="_23-3-3-配置adc的dma模块" tabindex="-1"><a class="header-anchor" href="#_23-3-3-配置adc的dma模块" aria-hidden="true">#</a> 23.3.3 配置ADC的DMA模块</h3><ol><li>添加ADC-DMAC</li></ol><p>添加步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image19.png" alt=""></p><p>会得到这样一个ADC Stack模块：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image20.png" alt=""></p><ol start="2"><li>配置ADC Module</li></ol><p>ADC-DMAC中关于ADC Module的配置中，以下这些参数已被固定、不可更改：</p><ul><li>Module：Single Scan</li><li>ADC Ring Buffer:Enabled</li></ul><p>如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image21.png" alt=""></p><p>3.配置DMAC Transfer</p><p>ADC-DMAC中关于DMAC的配置有许多也是固定配置不可更改的，允许用户修改的参数如下：</p><ul><li>Name：ADC-DMAC的DMAC在代码中的模块名称，默认g_transfer0；</li><li>Channel：使用的DMAC通道，范围0~7，默认0；</li><li>Destination Pointer：保存数据的目的数组命，默认为NULL；</li><li>Activation Source：触发DMAC进行数据传输的信号源，在ADC采样中最好使用ADC单次扫描完成中断触发，即ADCn SCAN END (A/D scan end interrupt)；</li><li>Callback：DMA传输完成中断调用的中断函数名，默认为NULL；</li><li>Context：DMAC中断回调函数的传入内容，默认为NULL；</li><li>Transfer End Interrupt Priority：DMAC传输数据完成中断优先级，默认Disabled；</li></ul><p>如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image22.png" alt=""></p><h3 id="_23-3-4-配置gpt和elc模块" tabindex="-1"><a class="header-anchor" href="#_23-3-4-配置gpt和elc模块" aria-hidden="true">#</a> 23.3.4 配置GPT和ELC模块</h3><p>在多数情况下，使用周期性触发的定时器中断来触发ADC的采样。 对于瑞萨RA6M5的GPT模块配置和ELC模块配置在本书前面的章节已经介绍过，此处不再赘述。</p><h3 id="_23-3-5-adc的配置信息" tabindex="-1"><a class="header-anchor" href="#_23-3-5-adc的配置信息" aria-hidden="true">#</a> 23.3.5 ADC的配置信息</h3><p>ADC的引脚配置信息会在pin_data.c的g_bsp_pin_cfg_data[]数组中生成，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_00_PIN_05<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_ANALOG_ENABLE<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此处将P005复用为IOPORT_CFG_ANALOG_ENABLE，也就是使能了P005的模拟量输入功能。</p><p>ADC设备对象会在hal_data.c中生成，名为g_adc，代码如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">adc_instance_t</span> g_adc5 <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl    <span class="token operator">=</span> <span class="token operator">&amp;</span>g_adc5_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg     <span class="token operator">=</span> <span class="token operator">&amp;</span>g_adc5_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_channel_cfg <span class="token operator">=</span> <span class="token operator">&amp;</span>g_adc5_channel_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api     <span class="token operator">=</span> <span class="token operator">&amp;</span>g_adc_on_adc
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：它被用来保存ADC的信息，比如状态、寄存器、回调函数等待，原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    R_ADC0_Type     <span class="token operator">*</span> p_reg<span class="token punctuation">;</span>                    <span class="token comment">// Base register for this unit</span>
    <span class="token class-name">adc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span>          opened<span class="token punctuation">;</span>         <span class="token comment">// Boolean to verify that the Unit has been initialized</span>
    <span class="token class-name">uint32_t</span>          initialized<span class="token punctuation">;</span>              <span class="token comment">// Initialized status of ADC</span>
    <span class="token class-name">uint32_t</span>          scan_mask<span class="token punctuation">;</span>                <span class="token comment">// Scan mask used for Normal scan</span>
    <span class="token class-name">uint16_t</span>          scan_start_adcsr<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">adc_callback_args_t</span> <span class="token operator">*</span> p_callback_memory<span class="token punctuation">;</span>
    <span class="token comment">/* Pointer to context to be passed into callback function */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_cfg：指向ADC模块的配置信息结构体g_adc_cfg，其原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_adc_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span>         unit<span class="token punctuation">;</span>                             <span class="token comment">///&lt; ADC unit to be used</span>
    <span class="token class-name">adc_mode_t</span>       mode<span class="token punctuation">;</span>                             <span class="token comment">///&lt; ADC operation mode</span>
    <span class="token class-name">adc_resolution_t</span> resolution<span class="token punctuation">;</span>                       <span class="token comment">///&lt; ADC resolution</span>
    <span class="token class-name">adc_alignment_t</span>  alignment<span class="token punctuation">;</span>                        <span class="token comment">///&lt; Specify left or right alignment; ignored if addition used</span>
    <span class="token class-name">adc_trigger_t</span>    trigger<span class="token punctuation">;</span>                          <span class="token comment">///&lt; Default and Group A trigger source</span>
    IRQn_Type        scan_end_irq<span class="token punctuation">;</span>                     <span class="token comment">///&lt; Scan end IRQ number</span>
    IRQn_Type        scan_end_b_irq<span class="token punctuation">;</span>                   <span class="token comment">///&lt; Scan end group B IRQ number</span>
    <span class="token class-name">uint8_t</span>          scan_end_ipl<span class="token punctuation">;</span>                     <span class="token comment">///&lt; Scan end interrupt priority</span>
    <span class="token class-name">uint8_t</span>          scan_end_b_ipl<span class="token punctuation">;</span>                   <span class="token comment">///&lt; Scan end group B interrupt priority</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">///&lt; Callback function; set to NULL for none</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>                            <span class="token comment">///&lt; Placeholder for user data. Passed to the user callback in @ref adc_callback_args_t.</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_extend<span class="token punctuation">;</span>                             <span class="token comment">///&lt; Extension parameter for hardware specific settings</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以软件触发采样为例，g_adc_cfg成员的赋值如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">adc_cfg_t</span> g_adc5_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>unit                <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mode                <span class="token operator">=</span> ADC_MODE_SINGLE_SCAN<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>resolution          <span class="token operator">=</span> ADC_RESOLUTION_12_BIT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>alignment           <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">adc_alignment_t</span><span class="token punctuation">)</span> ADC_ALIGNMENT_RIGHT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>trigger             <span class="token operator">=</span> ADC_TRIGGER_SOFTWARE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback          <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_channel_cfg：指向某个通道的配置值，也是来自RASC的配置，其原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_adc_channel_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>           scan_mask<span class="token punctuation">;</span>    <span class="token comment">///&lt; Channels/bits: bit 0 is ch0; bit 15 is ch15.</span>
    <span class="token class-name">uint32_t</span>           scan_mask_group_b<span class="token punctuation">;</span>  <span class="token comment">///&lt; Valid for group modes.</span>
    <span class="token class-name">uint32_t</span>           add_mask<span class="token punctuation">;</span>           <span class="token comment">///&lt; Valid if add enabled in Open().</span>
    <span class="token class-name">adc_window_cfg_t</span> <span class="token operator">*</span> p_window_cfg<span class="token punctuation">;</span>   <span class="token comment">///&lt; Pointer to Window Compare configuration</span>
    <span class="token class-name">adc_group_a_t</span>      priority_group_a<span class="token punctuation">;</span>   <span class="token comment">///&lt; Valid for group modes.</span>
    <span class="token class-name">uint8_t</span>            sample_hold_mask<span class="token punctuation">;</span>   <span class="token comment">///&lt; Channels/bits 0-2.</span>
    <span class="token class-name">uint8_t</span>            sample_hold_states<span class="token punctuation">;</span> <span class="token comment">///&lt; Number of states to be used for sample and hold. Affects channels 0-2.</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_channel_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以软件触发采样为例，对于通道5，它的配置参数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">adc_channel_cfg_t</span> g_adc5_channel_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>scan_mask           <span class="token operator">=</span> ADC_MASK_CHANNEL_5 <span class="token operator">|</span>  <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scan_mask_group_b   <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>priority_group_a    <span class="token operator">=</span> ADC_GROUP_A_PRIORITY_OFF<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>add_mask            <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>sample_hold_mask    <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>sample_hold_states  <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_api：ADC模块的接口，指向在r_adc.c中实现的g_adc_on_adc结构体。用户可以使用g_adc.p_api中的函数指针来操作ADC。</li></ul><h3 id="_23-3-6-adc的api接口及其使用" tabindex="-1"><a class="header-anchor" href="#_23-3-6-adc的api接口及其使用" aria-hidden="true">#</a> 23.3.6 ADC的API接口及其使用</h3><p>ADC的API接口，在结构体adc_api_t中声明了，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_adc_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanCfg<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_extend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanGroupStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_group_mask_t</span> group_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStatusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_status_t</span> <span class="token operator">*</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">adc_channel_t</span> <span class="token keyword">const</span> reg_id<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_data
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read32<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                         <span class="token class-name">adc_channel_t</span> <span class="token keyword">const</span> reg_id<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calibrate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_extend<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> offsetSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                           <span class="token class-name">adc_channel_t</span> <span class="token keyword">const</span> reg_id<span class="token punctuation">,</span> <span class="token class-name">int32_t</span> <span class="token keyword">const</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">adc_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_adc_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在r_adc.c中实现了一个adc_api_t结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">adc_api_t</span> g_adc_on_adc <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open           <span class="token operator">=</span> R_ADC_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scanCfg        <span class="token operator">=</span> R_ADC_ScanCfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>infoGet        <span class="token operator">=</span> R_ADC_InfoGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scanStart      <span class="token operator">=</span> R_ADC_ScanStart<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scanGroupStart <span class="token operator">=</span> R_ADC_ScanGroupStart<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scanStop       <span class="token operator">=</span> R_ADC_ScanStop<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>scanStatusGet  <span class="token operator">=</span> R_ADC_StatusGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read           <span class="token operator">=</span> R_ADC_Read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read32         <span class="token operator">=</span> R_ADC_Read32<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close          <span class="token operator">=</span> R_ADC_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>calibrate      <span class="token operator">=</span> R_ADC_Calibrate<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>offsetSet      <span class="token operator">=</span> R_ADC_OffsetSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet    <span class="token operator">=</span> R_ADC_CallbackSet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就来了解下这些函数及其用法。</p><ol><li>打开ADC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>p_ctrl：在调用open函数的时候可以直接传入&amp;g_adc_ctrl或使用g_adc.p_ctrl；</li><li>p_cfg：在调用open函数的时候可以直接传入&amp;g_adc_cfg或使用g_adc.p_cfg；</li></ul><p>open函数初始化ADC，比如根据p_cfg来配置ADC的寄存器，设置中断回调函数等。但是这个函数没有完成对采样通道的初始化，采样通道的初始化需要调用scanCfg函数。</p><p>用户可以参考以下代码初始化ADC：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭ADC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用close函数就是改变ADC的p-ctrl中代表ADC状态的某些成员的值，并且会关闭ADC的触发源以及停止采样。</p><ol start="3"><li>ADC的采样通道设置</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanCfg<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_extend<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在调用open函数初始化了ADC后，还需要调用scanCfg配置指定的采样通道。用户在调用此函数时，第二个参数传入g_adc的p_channel_cfg成员，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanCfg</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_channel_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>软件开启ADC采样/组采样</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanGroupStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_group_mask_t</span> group_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有使用组采样模式的话，就是用scanStart函数软件启动ADC采样。</p><p>如果使用了组采样模式，那么就需要调用scanGroupStart来启动ADC的组采样，第2个参数是adc_group_mask_t类型，它表示ADC的采样组别，有如下取值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_adc_group_mask</span>
<span class="token punctuation">{</span>
    ADC_GROUP_MASK_NONE <span class="token operator">=</span> <span class="token number">0x000</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; Group Mask Unknown or None</span>
    ADC_GROUP_MASK_0    <span class="token operator">=</span> <span class="token number">0x001</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; Group Mask 0</span>
    ADC_GROUP_MASK_1    <span class="token operator">=</span> <span class="token number">0x002</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; Group Mask 1</span>
    ……<span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
    ADC_GROUP_MASK_7    <span class="token operator">=</span> <span class="token number">0x080</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; Group Mask 7</span>
    ADC_GROUP_MASK_8    <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; Group Mask 8</span>
    ADC_GROUP_MASK_ALL  <span class="token operator">=</span> <span class="token number">0x1FF</span><span class="token punctuation">,</span>       <span class="token comment">///&lt; All Groups</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_group_mask_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以普通模式为例，用户可以参考以下代码启动ADC的单次扫描采样：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanStart</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>软件中止ADC采样/组采样</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStatusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_status_t</span> <span class="token operator">*</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，软件中止ADC采样时，也分为普通模式和组采样模式。不同的模式有各自的中止函数。</p><ol start="6"><li>读取ADC的采样数据</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">adc_channel_t</span> <span class="token keyword">const</span> reg_id<span class="token punctuation">,</span> 
                   <span class="token class-name">uint16_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read32<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                     <span class="token class-name">adc_channel_t</span> <span class="token keyword">const</span> reg_id<span class="token punctuation">,</span> 
                     <span class="token class-name">uint32_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户通过read函数直接读取到ADC采样到的12bit的有效值。也可以调用read32函数读出采样值并转化为32bit的数据。</p><p>以直接读取12bit有效数据为例，用户可以参考以下代码读取ADC数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ADC_CHANNEL_5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>ADC的状态获取</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> scanStatusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">adc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">adc_status_t</span> <span class="token operator">*</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数能够获取到ADC的运行状态，有如下状态：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** ADC states. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_adc_state</span>
<span class="token punctuation">{</span>
    ADC_STATE_IDLE             <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment">///&lt; ADC is idle</span>
    ADC_STATE_SCAN_IN_PROGRESS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment">///&lt; ADC scan in progress</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_state_t</span><span class="token punctuation">;</span>

<span class="token comment">/** ADC status. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_adc_status</span>
<span class="token punctuation">{</span>
    <span class="token class-name">adc_state_t</span> state<span class="token punctuation">;</span>                 <span class="token comment">///&lt; Current state</span>
<span class="token punctuation">}</span> <span class="token class-name">adc_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用户采用软件触发采样的话，可以利用此函数判断ADC是否采样完成，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>ADC_STATE_SCAN_IN_PROGRESS <span class="token operator">==</span> status<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanStatusGet</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-4-直流电压采样实验" tabindex="-1"><a class="header-anchor" href="#_23-4-直流电压采样实验" aria-hidden="true">#</a> 23.4 直流电压采样实验</h2><h3 id="_23-4-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_23-4-1-设计目的" aria-hidden="true">#</a> 23.4.1 设计目的</h3><p>让用户学会使用瑞萨FSP ADC库函数驱动ADC外设，采样外部模拟电压。</p><h3 id="_23-4-2-硬件设计" tabindex="-1"><a class="header-anchor" href="#_23-4-2-硬件设计" aria-hidden="true">#</a> 23.4.2 硬件设计</h3><p>本书配套的开发板板载没有ADC采样电路，用户使用具备ADC功能的引脚，用它来连接外部模拟信号。本书使用的是P005引脚，它对应ADC0的通道5。</p><h3 id="_23-4-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_23-4-3-驱动程序" aria-hidden="true">#</a> 23.4.3 驱动程序</h3><p>1.ADC设备抽象</p><p>基于面向对象的编程思想，对ADC设备抽象出了一个结构体类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ADCDev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>value<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>ADCDevTypeDef<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要在ADC的驱动代码中构造ADCDev结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>value<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> gAdcDev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ADC0&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> ADCDrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> ADCDrvRead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并向上层调用者提供获取ADCDev的接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span><span class="token function">ADCGetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gAdcDev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化ADC</li></ol><p>初始化ADC时，既要初始化ADC，也要初始化ADC里的某个通道。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanCfg</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_channel_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06行：调用open函数完成对ADC0的通用初始化；</li><li>第09行：调用scanCfg函数完成对ADC0通道5的初始化；</li></ul><ol start="3"><li>ADC采样完成等待函数</li></ol><p>通过获取ADC的状态，来判断ADC当前是否正在进行采样转换，进而封装出来一个状态等待函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">01</span>	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCWaitConvCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token number">02</span>	<span class="token punctuation">{</span>
<span class="token number">03</span>	    <span class="token class-name">adc_status_t</span> status<span class="token punctuation">;</span>
<span class="token number">04</span>	    status<span class="token punctuation">.</span>state <span class="token operator">=</span> ADC_STATE_SCAN_IN_PROGRESS<span class="token punctuation">;</span>
<span class="token number">05</span>	    
<span class="token number">06</span>	    <span class="token keyword">while</span> <span class="token punctuation">(</span>ADC_STATE_SCAN_IN_PROGRESS <span class="token operator">==</span> status<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
<span class="token number">07</span>	    <span class="token punctuation">{</span>
<span class="token number">08</span>	        g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanStatusGet</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">09</span>	    <span class="token punctuation">}</span>
<span class="token number">10</span>	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户使用软件开启ADC采样后，可以调用此函数等待采样转换完成。</p><ol start="4"><li>数据读取函数</li></ol><p>本实验将ADC的开启和数据读取封装到了一个函数中，来开启指定通道的ADC采样以及等待采样完成，并读取、返回数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>value<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> value <span class="token operator">||</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanStart</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">ADCWaitConvCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ADC_CHANNEL_5<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-4-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_23-4-4-测试程序" aria-hidden="true">#</a> 23.4.4 测试程序</h3><p>本次实验采用的测试方法是每隔1s连续采样4次，将采样出来的数字量通过换算得到模拟电压量，将其打印出来观测，测试代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ADCAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    ADCDevTypeDef <span class="token operator">*</span>ptAdcDev <span class="token operator">=</span> <span class="token function">ADCGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptAdcDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Not found ADC device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to find ADC device: %s-%d\\r\\n&quot;</span><span class="token punctuation">,</span> ptAdcDev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> ptAdcDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptAdcDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptAdcDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        ptAdcDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>ptAdcDev<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nSample Result:\\r\\n\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">float</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token operator">/</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%d] --&gt; %f\\r\\n\\t&quot;</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-4-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_23-4-5-测试结果" aria-hidden="true">#</a> 23.4.5 测试结果</h3><p>在hal_entry()中调用测试函数，将编译出来的二进制可执行文件烧录到板子上并运行，将P005接到某个不超过3.3V的直流电压上观察结果，会得到例如下图这样的打印信息：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image23.png" alt=""></p><h2 id="_23-5-dsp库的配置与fft函数介绍" tabindex="-1"><a class="header-anchor" href="#_23-5-dsp库的配置与fft函数介绍" aria-hidden="true">#</a> 23.5 DSP库的配置与FFT函数介绍</h2><h3 id="_23-5-1-cmsis的dsp库" tabindex="-1"><a class="header-anchor" href="#_23-5-1-cmsis的dsp库" aria-hidden="true">#</a> 23.5.1 CMSIS的DSP库</h3><p>对应ARM的Cortex-M内核，它对于数据的处理一套DSP库，集成到了ARM的CMSIS架构中，这些库包含以下处理算法：</p><ul><li>BasicMathFunctions：基本数学函数：提供浮点数的各种基本运算函数，如向量加减乘除等运算。</li><li>CommonTables：数字信号处理常用参数表。</li><li>ComplexMathFunctions：复数计算数学函数。</li><li>ControllerFunctions：控制算法函数。包括正弦余弦，PID电机控制，矢量Clarke变换，矢量Clarke逆变换等。</li><li>FastMathFunctions：常见快速算法的数学函数。</li><li>FilteringFunctions：滤波函数功能，主要为FIR和LMS（最小均方根）等滤波函数。</li><li>MatrixFunctions：矩阵处理函数。包括矩阵加法、矩阵初始化、矩阵反、矩阵乘法、矩阵规模、矩阵减法、矩阵转置等函数。</li><li>StatisticsFunctions：统计功能函数。如求平均值、最大值、最小值、计算均方根RMS、计算方差/标准差等。</li><li>SupportFunctions：支持功能函数，如数据拷贝，Q格式和浮点格式相互转换，Q任意格式相互转换。</li><li>TransformFunctions：变换功能。包括复数FFT（CFFT）/复数FFT逆运算（CIFFT）、实数FFT（RFFT）/实数FFT逆运算（RIFFT）、和DCT（离散余弦变换）和配套的初始化函数。</li></ul>`,179),r={href:"https://www.keil.com/pack/doc/CMSIS/DSP/html/index.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="_23-5-2-cmsis-dsp的fft算法介绍" tabindex="-1"><a class="header-anchor" href="#_23-5-2-cmsis-dsp的fft算法介绍" aria-hidden="true">#</a> 23.5.2 CMSIS-DSP的FFT算法介绍</h3><p>CMSIS DSP库里面包含一个专门用于计算实数序列的FFT库，很多情况下，用户只需要计算实数序列即可。计算同样点数FFT的实数序列要比计算同样点数的虚数序列有速度上的优势。快速的rfft算法是基于混合基cfft算法实现的。</p><p>一个N点的实数序列FFT正变换采用下面的步骤实现：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image24.png" alt=""></p><p>由上面的框图可以看出，实数序列的FFT是先计算N/2个实数的CFFT，然后再重塑数据进行处理从而获得半个FFT频谱即可（利用了FFT变换后频谱的对称性）。</p><p>一个N点的实数序列FFT逆变换采用下面的步骤实现：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image25.png" alt=""></p><p>实数FFT支持浮点，Q31和Q15三种数据类型。以Q15和F32的RFFT DSP库函数为例。</p><ol><li>arm_rfft_q15</li></ol><p>此函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">arm_rfft_q15</span><span class="token punctuation">(</span><span class="token keyword">const</span> arm_rfft_instance_q15 <span class="token operator">*</span> S<span class="token punctuation">,</span> <span class="token class-name">q15_t</span> <span class="token operator">*</span> pSrc<span class="token punctuation">,</span> <span class="token class-name">q15_t</span> <span class="token operator">*</span> pDst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>S：arm_rfft_instance_q15结构体类型支持参数，表明此处FFT的点数和类型（正运算还是逆运算），结构体原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> fftLenReal<span class="token punctuation">;</span>                      <span class="token comment">/**&lt; length of the real FFT. */</span>
    <span class="token class-name">uint8_t</span> ifftFlagR<span class="token punctuation">;</span>                        <span class="token comment">/**&lt; flag that selects forward (ifftFlagR=0) or inverse (ifftFlagR=1) transform. */</span>
    <span class="token class-name">uint8_t</span> bitReverseFlagR<span class="token punctuation">;</span>                  <span class="token comment">/**&lt; flag that enables (bitReverseFlagR=1) or disables (bitReverseFlagR=0) bit reversal of output. */</span>
    <span class="token class-name">uint32_t</span> twidCoefRModifier<span class="token punctuation">;</span>               <span class="token comment">/**&lt; twiddle coefficient modifier that supports different size FFTs with the same twiddle factor table. */</span>
    <span class="token keyword">const</span> <span class="token class-name">q15_t</span> <span class="token operator">*</span>pTwiddleAReal<span class="token punctuation">;</span>                     <span class="token comment">/**&lt; points to the real twiddle factor table. */</span>
    <span class="token keyword">const</span> <span class="token class-name">q15_t</span> <span class="token operator">*</span>pTwiddleBReal<span class="token punctuation">;</span>                     <span class="token comment">/**&lt; points to the imag twiddle factor table. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARM_MATH_MVEI<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>ARM_MATH_AUTOVECTORIZE<span class="token punctuation">)</span></span></span>
    arm_cfft_instance_q15 cfftInst<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">const</span> arm_cfft_instance_q15 <span class="token operator">*</span>pCfft<span class="token punctuation">;</span>       <span class="token comment">/**&lt; points to the complex FFT instance. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span> arm_rfft_instance_q15<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>fftLenReal：FFT点数</li><li>ifftFlagR：FFT正运算或逆运算标志</li><li>bitReverseFlagR：输出结果是正运算或逆运算的结果</li></ul><p>使用arm_rfft_q15函数做FFT运算前需要先使用arm_rfft_instance_q15定义一个变量表明FFT的运算点数和类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm_rfft_instance_q15 S <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>fftLenReal <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再调用arm_rfft_init_q15函数将此变量记录和初始化：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">arm_rfft_init_q15</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后再调用arm_rfft_q15函数做FFT运算：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">arm_rfft_q15</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">q15_t</span><span class="token operator">*</span><span class="token punctuation">)</span>p_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">q15_t</span><span class="token operator">*</span><span class="token punctuation">)</span>q_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>arm_rfft_f32</li></ol><p>此函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">arm_rfft_f32</span><span class="token punctuation">(</span><span class="token keyword">const</span> arm_rfft_instance_f32 <span class="token operator">*</span> S<span class="token punctuation">,</span> <span class="token class-name">float32_t</span> <span class="token operator">*</span> pSrc<span class="token punctuation">,</span> <span class="token class-name">float32_t</span> <span class="token operator">*</span> pDst<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用法和arm_rfft_q15非常类似：</p><p>2.1 使用arm_rfft_instance_f32定义一个变量表明FFT的运算点数和类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>arm_rfft_instance_f32 S <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>fftLenReal <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2 然后再调用arm_rfft_init_f32函数将此变量记录和初始化：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">arm_rfft_init_f32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.3最后再调用arm_rfft_q15函数做FFT运算：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">arm_rfft_f32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">float32_t</span><span class="token operator">*</span><span class="token punctuation">)</span>p_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">float32_t</span><span class="token operator">*</span><span class="token punctuation">)</span>q_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_23-6-连续信号的采样和处理实验" tabindex="-1"><a class="header-anchor" href="#_23-6-连续信号的采样和处理实验" aria-hidden="true">#</a> 23.6 连续信号的采样和处理实验</h2><h3 id="_23-6-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_23-6-1-设计目的" aria-hidden="true">#</a> 23.6.1 设计目的</h3><p>让用户学会使用RASC添加CMSIS DSP模块，并学会使用DMAC方式传输ADC的采样数据到内存中，了解定时器触发ADC采样的配置。</p><h3 id="_23-6-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_23-6-2-模块配置" aria-hidden="true">#</a> 23.6.2 模块配置</h3><ol><li>添加CMSIS DSP</li></ol><p>CMSIS DSP的添加步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image26.png" alt=""></p><ol start="2"><li>添加ELC模块</li></ol><p>参考本书前文《第21章 事件链接控制器ELC》。</p><ol start="3"><li>ADC-DMAC的配置</li></ol><ul><li><p>ADC</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image27.png" alt=""></p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image28.png" alt="image28" style="zoom:80%;"></li><li><p>DMA</p></li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-23/image29.png" alt=""></p><h3 id="_23-6-3-硬件设计" tabindex="-1"><a class="header-anchor" href="#_23-6-3-硬件设计" aria-hidden="true">#</a> 23.6.3 硬件设计</h3><p>本书配套的开发板板载没有ADC采样电路，用户使用具备ADC功能的引脚，用它来连接外部模拟信号。本书使用的是P005引脚，它对应ADC0的通道5。</p><h3 id="_23-6-4-驱动程序" tabindex="-1"><a class="header-anchor" href="#_23-6-4-驱动程序" aria-hidden="true">#</a> 23.6.4 驱动程序</h3><p>本次实验依然需要抽象ADC设备，参考上一节。</p><ol><li>初始化ADC、DMAC、ELC和定时器</li></ol><p>在初始化函数中需要完成ADC、DMAC、ELC和定时器的初始化，并且使能DMA、使能ELC，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 打开ADC设备完成通用初始化 */</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 配置ADC指令的通道完成初始化 */</span>
        err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanCfg</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_adc5<span class="token punctuation">.</span>p_channel_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 打开ELC设备完成初始化 */</span>
        err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_elc<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 使能ELC的连接功能 */</span>
        err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 打开DMA设备完成初始化 */</span>
        err <span class="token operator">=</span> g_transfer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_transfer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_transfer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 使能DMAC的ELC触发源 */</span>
        err <span class="token operator">=</span> g_transfer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_transfer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 打开定时器设备完成初始化 */</span>
        err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 使能ADC的转换功能 */</span>
        err <span class="token operator">=</span> g_adc5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">scanStart</span><span class="token punctuation">(</span>g_adc5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>DMAC传输完成中断回调函数</li></ol><p>在RASC的配置中，DMAC中断的触发源是传输完所有的数据，因而只需要在中断回调函数中将传输完成标志赋值为true即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool adc_sample_cplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">adc5_dma_callback</span><span class="token punctuation">(</span><span class="token class-name">dmac_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    adc_sample_cplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>ADC采样完成等待函数</li></ol><p>DMAC传输完成就代表着ADC采样的完成，因而可以依靠DMAC中断回调函数中的标志位来判断ADC是否全部采样完成：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ADCWaitConvCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>adc_sample_cplt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    adc_sample_cplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>ADC数据读取函数</li></ol><p>此函数里，先重新配置DMAC，再开启定时器，使用定时器来触发ADC转换。然后等待ADC完成后，关闭定时器。ADC的采样结果，通过DMA传输到buffer里。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADCDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADCDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> buffer <span class="token operator">||</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 每次采样前将DMAC的目的地址和传输个数重置 */</span>
        g_transfer0<span class="token punctuation">.</span>p_cfg<span class="token operator">-&gt;</span>p_info<span class="token operator">-&gt;</span>p_dest <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        g_transfer0<span class="token punctuation">.</span>p_cfg<span class="token operator">-&gt;</span>p_info<span class="token operator">-&gt;</span>length <span class="token operator">=</span> num<span class="token punctuation">;</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_transfer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reconfigure</span><span class="token punctuation">(</span>g_transfer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_transfer0<span class="token punctuation">.</span>p_cfg<span class="token operator">-&gt;</span>p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 开启定时器触发ADC采样 */</span>
        err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ADCWaitConvCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 采样结束后关闭定时器 */</span>
        err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-6-5-测试程序" tabindex="-1"><a class="header-anchor" href="#_23-6-5-测试程序" aria-hidden="true">#</a> 23.6.5 测试程序</h3><p>本次实验仅仅是对ADC采样的数据做了一次FFT运算，但是并没有对运算出来的结果做进一步的频谱分析。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arm_math.h&gt;</span></span>

<span class="token class-name">uint16_t</span> p_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint16_t</span> q_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ADCAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    ADCDevTypeDef <span class="token operator">*</span>ptAdcDev <span class="token operator">=</span> <span class="token function">ADCGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptAdcDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Not found ADC device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to find ADC device: %s-%d\\r\\n&quot;</span><span class="token punctuation">,</span> ptAdcDev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> ptAdcDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptAdcDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptAdcDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    arm_rfft_instance_q15 S <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>fftLenReal <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">arm_rfft_init_q15</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ptAdcDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>ptAdcDev<span class="token punctuation">,</span> p_buf<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">arm_rfft_q15</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">q15_t</span><span class="token operator">*</span><span class="token punctuation">)</span>p_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">q15_t</span><span class="token operator">*</span><span class="token punctuation">)</span>q_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-6-6-测试结果" tabindex="-1"><a class="header-anchor" href="#_23-6-6-测试结果" aria-hidden="true">#</a> 23.6.6 测试结果</h3><p>本次实验没有结果输出，读者可以自行将FFT运算结果通过串口输出观察。</p>`,63);function k(m,_){const p=e("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("对于CMSIS的DSP库，其内容非常的丰富，读者可以去Keil MDK的CMSIS DSP文档中心了解详细信息："),n("a",r,[s("https://www.keil.com/pack/doc/CMSIS/DSP/html/index.html"),l(p)])]),d])}const b=t(i,[["render",k],["__file","chapter23.html.vue"]]);export{b as default};
