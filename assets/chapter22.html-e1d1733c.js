import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第22章-dma控制器" tabindex="-1"><a class="header-anchor" href="#第22章-dma控制器" aria-hidden="true">#</a> 第22章 DMA控制器</h1><p>本章目标</p><ul><li>了解DMA基本概念和RA6M5处理器的DMAC模块；</li><li>学会使用RASC配置DMAC在指定内存间搬移数据；</li></ul><h2 id="_22-1-dma简介" tabindex="-1"><a class="header-anchor" href="#_22-1-dma简介" aria-hidden="true">#</a> 22.1 DMA简介</h2><p>DMA(Direct Memory Access)直接内存访问，可以大大减轻CPU工作量。CPU执行的众多指令中，有的用于计算、有的用于控制程序、有的用于转移数据等。其中转移数据的指令，尤其是转移大量数据，会占用大量CPU。如果是把外设A的数据，传给外设B，这种情况其实不需要CPU一直参与，只需在A、B之间创建个通道，让它们自己传输即可。这就是DMA设计的目的，在进行大量数据转移时较少CPU的干预，让DMA专注于数据转移，让CPU专注于计算、控制。</p><p>DMA主要实现将A处的数据直接搬运到B处，这里的A、B可以是内存（内/外部SRAM等），也可以是外设（UART、I2C、SPI、ADC等），因此所有的场景如下三种：</p><ul><li>内存到外设</li><li>外设到内存</li><li>内存到内存</li></ul><p>无论是以上何种方式，都是先设置好DMA的数据源地址、数据目标地址、数据长度。设置好后，启动DMA就可以自动地把数据从源地址依次传输到目标地址。</p><h2 id="_22-2-ra6m5处理器的dmac控制器" tabindex="-1"><a class="header-anchor" href="#_22-2-ra6m5处理器的dmac控制器" aria-hidden="true">#</a> 22.2 RA6M5处理器的DMAC控制器</h2><h3 id="_22-2-1-dmac的特性" tabindex="-1"><a class="header-anchor" href="#_22-2-1-dmac的特性" aria-hidden="true">#</a> 22.2.1 DMAC的特性</h3><p>RA6M5包括一个8通道的直接内存访问控制器（DMAC），可以在不需要CPU干预的情况下传输数据。当产生DMA传输请求时，DMAC将存储在传输源地址的数据传输到传输目标地址。其外设模块特性详见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image1.jpg" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image2.jpg" alt="image2"></p><h3 id="_22-2-2-dmac的系统框图" tabindex="-1"><a class="header-anchor" href="#_22-2-2-dmac的系统框图" aria-hidden="true">#</a> 22.2.2 DMAC的系统框图</h3><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image3.png" alt=""></p><h2 id="_22-3-dmac模块配置" tabindex="-1"><a class="header-anchor" href="#_22-3-dmac模块配置" aria-hidden="true">#</a> 22.3 DMAC模块配置</h2><h3 id="_22-3-1-配置dmac模块" tabindex="-1"><a class="header-anchor" href="#_22-3-1-配置dmac模块" aria-hidden="true">#</a> 22.3.1 配置DMAC模块</h3><ol><li>添加DMAC Stack模块</li></ol><p>在RASC中配置DMAC时，首先需要去Stacks中添加DMAC的Stack模块，步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image4.png" alt=""></p><ol start="2"><li>配置 DMAC Stack属性</li></ol><p>对于DMAC某个通道的Stack属性有许多参数可以配置，在不同的应用场景下需要重点关注的配置项可能有所不同。以软件触发DMAC在内存间传输数据为例，开发者应该关注DMAC在传输过程中每次传输的数据大小是多少位的，内存地址的变化是递增还是递减的，是否需要循环传输，所有的数据都传输完毕后是否需要触发完成中断等等。</p><p>软件触发DMAC在内存间传输数据的配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image5.png" alt=""></p><ul><li>通道：第0通道；</li><li>传输模式;正常模式；</li><li>每次传输的数据大小;2bytes-16bits;</li><li>地址变化：源地址和目的地址在每次传输完一个数据后都递增；</li><li>触发源：无，也就是软件触发；</li><li>中断回调函数：dma0_callback；</li><li>中断：所有的数据都传输完毕后才触发一次完成中断；</li></ul><p>至于其它的参数，例如传输的数据个数，源数据buffer大小等，均可以在程序中根据每次实际的传输情况来实时修改。</p><h3 id="_22-3-2-dmac配置信息解读" tabindex="-1"><a class="header-anchor" href="#_22-3-2-dmac配置信息解读" aria-hidden="true">#</a> 22.3.2 DMAC配置信息解读</h3><p>使用RASC配置了DMAC并生成代码后，会在hal_data.c中生成DMAC的设备对象g_dma0，它是transfer_instance_t类型的结构体。此结构体的成员表明了DMAC设备对象的控制参数、配置信息和操作api等信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">transfer_instance_t</span> g_dma0 <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl        <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dma0_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dma0_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_transfer_on_dmac
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>p_ctrl：transfer_ctrl_t结构体类型指针成员，实际是void类型，指向dmac_instance_ctrl_t结构体类型的全局变量g_dma0_ctrl。dmac_instance_ctrl_t，明了DMAC设备对象的状态和类型：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_dmac_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> open<span class="token punctuation">;</span>                     <span class="token comment">// Driver ID</span>

    <span class="token class-name">transfer_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>

    <span class="token comment">/* Pointer to base register. */</span>
    R_DMAC0_Type <span class="token operator">*</span> p_reg<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">dmac_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>p_cfg：transfer_cfg_t结构体类型常量指针成员，指向同类型的g_dma0_cfg全局常量，g_dma0_cfg的成员取值来自RASC中对于该DMAC设备对象的配置：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">transfer_cfg_t</span> g_dma0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_info              <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dma0_info<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_extend            <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dma0_extend<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.1 g_dma0_info：表明DMAC设备对象的地址变化方式、传输数据大小等信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">transfer_info_t</span> g_dma0_info <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>dest_addr_mode <span class="token operator">=</span> TRANSFER_ADDR_MODE_INCREMENTED<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>repeat_area    <span class="token operator">=</span> TRANSFER_REPEAT_AREA_SOURCE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>irq            <span class="token operator">=</span> TRANSFER_IRQ_END<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>chain_mode     <span class="token operator">=</span> TRANSFER_CHAIN_MODE_DISABLED<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>src_addr_mode  <span class="token operator">=</span> TRANSFER_ADDR_MODE_INCREMENTED<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>size           <span class="token operator">=</span> TRANSFER_SIZE_2_BYTE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>transfer_settings_word_b<span class="token punctuation">.</span>mode           <span class="token operator">=</span> TRANSFER_MODE_NORMAL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_dest                                  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_src                                   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>num_blocks                              <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>length                                  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.2 g_dma0_extend：表明DMAC设备对象的中断、内存偏移大小、源数据内存大小等信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">dmac_extended_cfg_t</span> g_dma0_extend <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>offset              <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>src_buffer_size     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>VECTOR_NUMBER_DMAC0_INT<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>irq                 <span class="token operator">=</span> VECTOR_NUMBER_DMAC0_INT<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>irq                 <span class="token operator">=</span> FSP_INVALID_VECTOR<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">.</span>ipl                 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel             <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback          <span class="token operator">=</span> dma0_callback<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_context           <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>activation_source   <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_api：transfer_api_t结构体类型常量指针，指向在r_dmac.c中实现的g_transfer_on_dmac，里面含有各种操作函数；</li></ul><h3 id="_22-3-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_22-3-3-中断回调函数" aria-hidden="true">#</a> 22.3.3 中断回调函数</h3><p>在RASC中设置中断回调函数的名字后，会在hal_data.h中声明次函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">dma0_callback</span></span>
<span class="token keyword">void</span> <span class="token function">dma0_callback</span><span class="token punctuation">(</span><span class="token class-name">dmac_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要实现此函数，例如在软件触发实验中的drv_dma.c中的实现此函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">dma0_callback</span><span class="token punctuation">(</span><span class="token class-name">dmac_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>p_args<span class="token punctuation">;</span>
    gDMAXferCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在所有的数据都传输完毕后，中断被触发，进而调用这个回调函数。它只是设置一个变量表示DMA传输完毕。</p><h3 id="_22-3-4-dmac的api及其用法" tabindex="-1"><a class="header-anchor" href="#_22-3-4-dmac的api及其用法" aria-hidden="true">#</a> 22.3.4 DMAC的API及其用法</h3><p>DMAC设备的接口函数在transfer_api_t结构体中声明，结构体原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_transfer_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">transfer_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> reconfigure<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                              <span class="token class-name">transfer_info_t</span> <span class="token operator">*</span> p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span>
                        <span class="token class-name">uint16_t</span> <span class="token keyword">const</span> num_transfers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                <span class="token class-name">transfer_start_mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareStop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">transfer_properties_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">transfer_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体在r_dmac.c中实现，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">transfer_api_t</span> g_transfer_on_dmac <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open          <span class="token operator">=</span> R_DMAC_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>reconfigure   <span class="token operator">=</span> R_DMAC_Reconfigure<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>reset         <span class="token operator">=</span> R_DMAC_Reset<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>infoGet       <span class="token operator">=</span> R_DMAC_InfoGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>softwareStart <span class="token operator">=</span> R_DMAC_SoftwareStart<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>softwareStop  <span class="token operator">=</span> R_DMAC_SoftwareStop<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>enable        <span class="token operator">=</span> R_DMAC_Enable<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>disable       <span class="token operator">=</span> R_DMAC_Disable<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close         <span class="token operator">=</span> R_DMAC_Close<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就来了解下这些函数的用法。</p><ol><li>打开DMAC设备对象</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">transfer_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：用来记录一些状态信息；</li><li>p_cfg：配置信息，实际上就是指向RASC生成的g_dma0_cfg结构体；</li></ul><p>调用open函数之后，DMAC设备就被初始化了，用户可以参考以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_dma0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭DMAC设备对象</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>close函数会将DMAC设备对象的open标志位设置为CLOSED，并且关闭中断。</p><ol start="3"><li>复位DMAC传输的地址和数据个数</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                    <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span>
                    <span class="token class-name">uint16_t</span> <span class="token keyword">const</span> num_transfers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用软件触发DMAC开启传输，那么建议在每次开启数据传输前调用此函数，用法如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>src<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>dst<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使能DMAC的数据传输</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能会在其它的API中使能DMAC的数据传输功能，因而此函数并非一定要手动调用，例如reset函数内就会在最后使能DMAC的数据传输。</p><ol start="5"><li>失能DMAC的链接触发</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>恰如其名，此函数和enable的功能是相反的，调用此函数可以关闭DMAC的数据传输功能。</p><ol start="6"><li>软件开启DMAC的数据传输</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareStart<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">transfer_start_mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>mode参数是transfer_start_mode_t枚举类型，可以选择每次软件触发传输时，是只传输一个数据，还是传输多个数据直到所有数据传输完成，此枚举的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_transfer_start_mode</span>
<span class="token punctuation">{</span>
    TRANSFER_START_MODE_SINGLE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    TRANSFER_START_MODE_REPEAT <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token class-name">transfer_start_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以参考以下代码利用软件触发DMAC的数据传输：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">softwareStart</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> TRANSFER_START_MODE_REPEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>软件停止DMAC的数据传输</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareStop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">transfer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只有在使用softwareStart(…, TRANSFER_START_MODE_REPEAT)模式的软件触发DMAC时，才能使用softwareStop函数中断DMAC的传输。</p><h2 id="_22-4-软件触发数据搬移实验" tabindex="-1"><a class="header-anchor" href="#_22-4-软件触发数据搬移实验" aria-hidden="true">#</a> 22.4 软件触发数据搬移实验</h2><h3 id="_22-4-1设计目的" tabindex="-1"><a class="header-anchor" href="#_22-4-1设计目的" aria-hidden="true">#</a> 22.4.1设计目的</h3><p>让用户了解在RASC只如何配置DMAC为软件触发方式，并且了解DMAC的FSP库函数接口，使用这些接口完成数据的传输。</p><h3 id="_2-4-2驱动程序" tabindex="-1"><a class="header-anchor" href="#_2-4-2驱动程序" aria-hidden="true">#</a> 2.4.2驱动程序</h3><p>1.DMAC设备对象的再抽象</p><p>鉴于瑞萨RA6M5的DMAC有8个通道，每个通道都可以单独使用，并且操作方法是类似的，所以可以将DMAC设备进行抽象，将DMAC的设备名称、通道值、内存地址、传输数据个数等信息放入一个结构体中：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DMADev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span>            <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   channel<span class="token punctuation">;</span>
    <span class="token keyword">void</span>            <span class="token operator">*</span>dst<span class="token punctuation">;</span>
    <span class="token keyword">void</span>            <span class="token operator">*</span>src<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Xfer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>DMADevTypeDef<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在驱动程序中实现一个DMADev结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvXfer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">DMADev</span> gDMADev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name    <span class="token operator">=</span> <span class="token string">&quot;DMA0&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>dst     <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>src     <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>length  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init    <span class="token operator">=</span> DMADrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Xfer    <span class="token operator">=</span> DMADrvXfer
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再向上层调用者提供设备获取接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span><span class="token function">DMADevGet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gDMADev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化DMAC</li></ol><p>本次实验使用的是软件触发DMAC，那么只需要打开DMAC设备即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* open dma device */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_dma0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>中断回调函数和传输完成等待函数</li></ol><p>在RASC中设置了DMAC传输完所有的数据后触发完成中断，并且也设置了中断回调函数的名字，那么需要实现这个回调函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gDMAXferCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dma0_callback</span><span class="token punctuation">(</span><span class="token class-name">dmac_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>p_args<span class="token punctuation">;</span>
    gDMAXferCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将此标志为封装一个等待函数，当标志被置为true后才会退出此函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DMADrvWaitXferCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gDMAXferCplt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gDMAXferCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>DMAC数据传输函数</li></ol><p>在开启传输之前，需要重新设置参数（比如源地址、目的地址、长度），然后再softwareStart函数开启传输，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvXfer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* reconfigure dma config from ptdev */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>src<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>dst<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">softwareStart</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> TRANSFER_START_MODE_REPEAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">DMADrvWaitXferCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-4-3-测试程序" tabindex="-1"><a class="header-anchor" href="#_22-4-3-测试程序" aria-hidden="true">#</a> 22.4.3 测试程序</h3><p>在初始化各个外设和DMAC设备对象后，每隔500ms使用DMA传输一次数据，传输完毕之后将源数据和目的数据一一比较，最后打印比较结果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> uwSrcBuffer<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> uwDstBuffer<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DMAAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    DMADevTypeDef <span class="token operator">*</span>ptDmdDev <span class="token operator">=</span> <span class="token function">DMADevGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDmdDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Can not find DMA Device.\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 初始化DMAC */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ptDmdDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDmdDev<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to init DMA Device: %s\\r\\n&quot;</span><span class="token punctuation">,</span> ptDmdDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 将源数据数组赋值 */</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ptDmdDev<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        uwSrcBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">uint16_t</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 指定源数据地址和目的数据地址以及数据个数 */</span>
        ptDmdDev<span class="token operator">-&gt;</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span>uwSrcBuffer<span class="token punctuation">;</span>
        ptDmdDev<span class="token operator">-&gt;</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span>uwDstBuffer<span class="token punctuation">;</span>
        ptDmdDev<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span>
        <span class="token comment">/* 开始使用DMAC传输数据 */</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ptDmdDev<span class="token operator">-&gt;</span><span class="token function">Xfer</span><span class="token punctuation">(</span>ptDmdDev<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to transmit data by %s\\r\\n&quot;</span><span class="token punctuation">,</span> ptDmdDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">uint16_t</span> uwErrCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">/* 数据比较 */</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ptDmdDev<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>uwDstBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> uwSrcBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                uwErrCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 打印结果 */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n%d --&gt; Transmit %s\\r\\n&quot;</span><span class="token punctuation">,</span> count<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>uwErrCount<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">&quot;Success&quot;</span><span class="token operator">:</span><span class="token string">&quot;Failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-4-4-测试结果" tabindex="-1"><a class="header-anchor" href="#_22-4-4-测试结果" aria-hidden="true">#</a> 22.4.4 测试结果</h3><p>在hal_entry()函数中调用测试函数，然后将编译出来的二进制可执行文件烧录到板子上运行，可以观察到下图这样的效果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image6.png" alt=""></p><h2 id="_22-5-定时器触发数据搬移实验" tabindex="-1"><a class="header-anchor" href="#_22-5-定时器触发数据搬移实验" aria-hidden="true">#</a> 22.5 定时器触发数据搬移实验</h2><p>此实验会使用到printf功能和滴答定时器，请读者将前文的关于串口和滴答定时器的配置以及驱动文件移植到本实验中。请参考上一小节添加DMAC的Stack模块和GPT的Stack模块。</p><h3 id="_22-5-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_22-5-1-设计目的" aria-hidden="true">#</a> 22.5.1 设计目的</h3><p>让用户学会在RASC中配置定时器外设，让它触发DMAC的数据传输，并且了解如何在代码中使用API来让定时器触发DMAC的数据传输。</p><h3 id="_22-5-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_22-5-2-模块配置" aria-hidden="true">#</a> 22.5.2 模块配置</h3><ol><li>GPT的模块配置</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image7.png" alt=""></p><p>本次实验只需要配置GPT为普通定时计数即可。</p><ol start="2"><li>MAC的模块配置</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image8.png" alt=""></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* open dma device */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_dma0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* open timer0 */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第15行：打开GPT设备完成对定时器的初始化；</li></ul><ol start="3"><li>中断回调函数和传输完成等待函数</li></ol><p>参考《22.4.2驱动程序》。</p><p>4.数据传输函数</p><p>下述代码中，复位DMAC后并没有立刻启动DAM传输，而是开启定时器——通过定时器触发DMA传输，然后等待传输完成后。当数据传输完成后，就关闭定时器。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DMADrvXfer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DMADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* reconfigure dma config from ptdev */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dma0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_dma0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>src<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>dst<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* start timer to triger DMA xfer data */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
    <span class="token comment">/* wait for dma xfer cplt */</span>
    <span class="token function">DMADrvWaitXferCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* stop timer */</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">LOG</span><span class="token punctuation">(</span>__FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第16行：开启定时器触发DMAC开始传输数据；</li><li>第25行：等待数据传输完成；</li><li>第28行：传输完毕后关闭定时器停止DMAC传输；</li></ul><h3 id="_22-5-3-测试程序" tabindex="-1"><a class="header-anchor" href="#_22-5-3-测试程序" aria-hidden="true">#</a> 22.5.3 测试程序</h3><p>测试程序和上一小节的一模一样，参考《22.4.3测试程序》。</p><h3 id="_22-5-4-测试结果" tabindex="-1"><a class="header-anchor" href="#_22-5-4-测试结果" aria-hidden="true">#</a> 22.5.4 测试结果</h3><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-22/image9.png" alt=""></p>`,127),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter22.html.vue"]]);export{r as default};
