import{_ as n,o as s,c as a,e}from"./app-829098b3.js";const t={},p=e(`<h1 id="第11章-systick" tabindex="-1"><a class="header-anchor" href="#第11章-systick" aria-hidden="true">#</a> 第11章 SysTick</h1><p>本章目标</p><ul><li>了解滴答定时器的概念</li><li>学会配置滴答定时器和扩展驱动应用</li></ul><h2 id="_11-1-认识滴答定时器" tabindex="-1"><a class="header-anchor" href="#_11-1-认识滴答定时器" aria-hidden="true">#</a> 11.1 认识滴答定时器</h2><p>SysTick定时器也被称为滴答定时器。在Cortex架构的处理器里，有一个24bit的向下计数定时器，它就是滴答定时器。它不是处理器之外的、跟GPIO等设备同等地位的设备，而是位于处理器内部的定时器。</p><p>对于Cortex-M33内核而言，它拥有2个滴答定时器：一个用于非安全系的滴答定时器，另一个用于安全系的滴答定时器。如果开发者不使用Cortex-M33的TrustZone的程序安全功能，那么只能使用一个非安全系的滴答定时器。</p><p>滴答定时器有4个寄存器用于控制和获取状态：</p><p>a) 控制和状态寄存器：SYST_CSR</p><p>b) 重载值寄存器：SYST_RVR</p><p>c) 当前计数值寄存器：SYST_CVR</p><p>d) 校验值寄存器：SYST_CALIB</p><p>使用滴答定时器就是对这几个寄存器进行配置让它按照指定的频率进行计数，本章会实现几个驱动函数为后续章节的外设驱动使用。</p><h2 id="_11-2-滴答定时器的配置" tabindex="-1"><a class="header-anchor" href="#_11-2-滴答定时器的配置" aria-hidden="true">#</a> 11.2 滴答定时器的配置</h2><p>在配置滴答定时器前，首先应该要熟悉其工作机制，其工作机制有如下几条：</p><p>① 当使能了滴答定时器的计数后，滴答定时器将会从重载值向下计数到零，然后在下一个时钟周期从重载值寄存器读取重载值，在紧随的下一个时钟周期又开始向下计数。</p><p>② 如果给重载值寄存器RVR写入了一个‘0’，那么本次计数循环（也就是本次向下计数到0）后就会停止计数。</p><p>③ 当计数到0使，控制状态寄存器CSR的计数标志COUNTFLAG位会被置1.，当读取CSR寄存器时会将这一位清零。</p><p>④ 如果给当前计数值寄存器CVR写入一个值时，会更新CVR的值且会将COUNTFLAG清零；</p><p>⑤ 如果程序处于调试状态，当开发者暂停调试时，滴答定时器也会暂停计数；</p><p>可以看到，这几个机制中使用到的寄存器只有3个：CSR（Control and Status Register，控制和状态寄存器）、RVR（Reload Value Register，重载值寄存器）和CVR（Current Value Register，当前值寄存器）。接下来就着重认识下这3个寄存器，并且学会如何配置他们。</p><h3 id="_11-2-1-控制和状态寄存器syst-csr" tabindex="-1"><a class="header-anchor" href="#_11-2-1-控制和状态寄存器syst-csr" aria-hidden="true">#</a> 11.2.1 控制和状态寄存器SYST_CSR</h3><p>控制状态寄存器各个位的描述如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image1.png" alt=""></p><ul><li>Bit0-ENABLE：计数器使能位；0-不使能计数器；1-使能计数器；</li><li>Bit1-TICKINT：滴答定时器中断请求位；0-计数到0不产生中断请求；1-产生中断请求；</li><li>Bit2-CLKSOURCE：滴答定时器的时钟选择位；0-使用外部基准时钟；1-使用处理器时钟；</li><li>Bit16-COUONTFLAG：滴答定时器技术标志位，当计数到0时置1，如果没有读取CSR的话将会一直为1；</li></ul><p>CSR寄存器上电复位默认值是0x00000000，一般情况下，程序是需要滴答定时器产生中断请求来判定滴答定时器计数到0的，所以TICKINT通常被设置为1；而时钟源的选择，惯用的是选择处理器时钟。所以在初始化的时候，一般将CSR的值设置为0x07。</p><h3 id="_11-2-2-重载值寄存器syst-rvr" tabindex="-1"><a class="header-anchor" href="#_11-2-2-重载值寄存器syst-rvr" aria-hidden="true">#</a> 11.2.2 重载值寄存器SYST_RVR</h3><p>重载值寄存器虽然是一个32bit的寄存器，但是鉴于滴答定时器的设计只有24位的计数值，因而此寄存器只有低24bit有效，高8bit保留，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image2.png" alt=""></p><p>所谓重载值，就是指滴答定时器计数到0时，又重新从这个值开始向下计数。例如程序中需要滴答定时器从100开始向下计数，那么这里就将RVR的低24bit设置为‘100-1’，也就是十六进制的0x63,二进制的0110 0011，那么RVR寄存器的值就是下图这样：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image3.png" alt=""></p><h3 id="_11-2-3-当前计数值寄存器syst-cvr" tabindex="-1"><a class="header-anchor" href="#_11-2-3-当前计数值寄存器syst-cvr" aria-hidden="true">#</a> 11.2.3 当前计数值寄存器SYST_CVR</h3><p>当前计数值寄存器CVR也是低24bit有效，用来表示滴答定时器当前的计数值，如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image4.png" alt=""></p><p>无论程序给此寄存器写入什么值，都会将此寄存器清零，并且会将计数标志位COUNTFLAG清零。</p><h3 id="_11-2-4-滴答定时器的初始化配置" tabindex="-1"><a class="header-anchor" href="#_11-2-4-滴答定时器的初始化配置" aria-hidden="true">#</a> 11.2.4 滴答定时器的初始化配置</h3><p>滴答定时器还有一个校准寄存器CALIB，它是只读寄存器，无需操作。从Cortex-M33的调试手册中其对滴答定时器的各个寄存器总结如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image5.png" alt=""></p><p>那么开发者配置滴答定时器时，步骤如下：</p><p>① 选择抵达定时器的时钟源；</p><p>② 使能滴答定时器的中断请求；</p><p>③ 设置重载值；</p><p>④ 清零当前计数值；</p><p>⑤ 使能滴答定时器计数；</p><ol><li>初始化滴答定时器</li></ol><p>在Cortex内核源文件的core_cmXX.h，比如core_cm33.h定义滴答定时器的初始化函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>__STATIC_INLINE <span class="token class-name">uint32_t</span> <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> ticks<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ticks <span class="token operator">-</span> <span class="token number">1UL</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">/* Reload value impossible */</span>
  <span class="token punctuation">}</span>
  SysTick<span class="token operator">-&gt;</span>LOAD  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ticks <span class="token operator">-</span> <span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">/* set reload register */</span>
  <span class="token function">NVIC_SetPriority</span> <span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> __NVIC_PRIO_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* set Priority for Systick Interrupt */</span>
  SysTick<span class="token operator">-&gt;</span>VAL   <span class="token operator">=</span> <span class="token number">0UL</span><span class="token punctuation">;</span>          <span class="token comment">/* Load the SysTick Counter Value */</span>
  SysTick<span class="token operator">-&gt;</span>CTRL  <span class="token operator">=</span> SysTick_CTRL_CLKSOURCE_Msk <span class="token operator">|</span>
                   SysTick_CTRL_TICKINT_Msk   <span class="token operator">|</span>
                   SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span> <span class="token comment">/* Enable SysTick IRQ and SysTick Timer */</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">/* Function successful */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发者只需要在自己的代码中调用此函数，传入一个指定的重载值即可，例如下面这个代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 获取处理器时钟uwSysclk */</span>
    <span class="token class-name">uint32_t</span> uwSysclk<span class="token operator">=</span> <span class="token function">R_BSP_SourceClockHzGet</span><span class="token punctuation">(</span>FSP_PRIV_CLOCK_PLL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 技术周期为uwSysclk/1000 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>uwSysclk<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FSP_ERR_ASSERTION<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* Return function status */</span>
    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上初始化滴答定时器后，它的计数时钟频率就是处理器的系统主频!<img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11\\image6.png" alt=""> ，</p><p>在此频率下向下计数<img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11\\image7.png" alt=""> 个数后触发中断，也就是每秒钟触发1000次中断，换算公式如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11\\image8.png" alt=""></p><p>假如<img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11\\image9.png" alt=""> ，那么传入给SysTick_Config函数的值就是200K，滴答定时器就会以200MHz的频率从200K往0开始递减，递减为0时触发一次中断，中断触发频率就是<img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11\\image10.png" alt=""> 。</p><ol start="2"><li>实现滴答定时器的中断服务函数</li></ol><p>当滴答定时器计数到0时，会触发中断，中断服务函数SysTick_Handler被调用，这个函数需要开发者实现，比如给一个全局变量递增1，参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">volatile</span>  <span class="token class-name">uint32_t</span> dwTick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dwTick <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-3-基于systick的扩展应用" tabindex="-1"><a class="header-anchor" href="#_11-3-基于systick的扩展应用" aria-hidden="true">#</a> 11.3 基于SysTick的扩展应用</h2><p>本实验会用到板载LED外设和printf功能，请读者参考本书《第5章 GPIO输入输出》和《第7章 UART》来配置LED的GPIO和UART模块，并且移植drv_uart.c和drv_config.h到本节实验的工程“1101_systick_delay”中。</p><p>在上一小节已经初始化了滴答定时器、实现了中断服务函数。本节在此基础上实现一个ms级别的延时函数（因为初始化设置的滴答定时器是1KHz的中断触发频率）。参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAL_MAX_DELAY</span>      <span class="token expression"><span class="token number">0xFFFFFFU</span></span></span>
<span class="token keyword">void</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> dwTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> dwStart <span class="token operator">=</span> dwTick<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dwWait <span class="token operator">=</span> dwTime<span class="token punctuation">;</span>

    <span class="token comment">/* Add a freq to guarantee minimum wait */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dwWait <span class="token operator">&lt;</span> HAL_MAX_DELAY<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dwWait <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dwTick <span class="token operator">-</span> dwStart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> dwWait<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第10行：在延时值基础上加1；</li><li>第13行：滴答定时器中断服务函数中的递增变量dwTick减去此延时函数调用时刻的dwStart，即滴答定时器触发“dwTick- dwStart”次后大于等于延时时长后才退出函数；</li></ul><p>为什么dwWait要先加1？这是因为执行HAL_Delay函数时必定是在2次滴答定时器中断之间，距离下一次中断的时间必定小于1ms。比如传入的dwTime等于2时，实际延时的时间是大于1ms、小于2ms。第10行里让dwWait值加1，目的是使得延时能满足下限：“至少延时dwWait毫秒”。</p><p>还可以读取dwTick获取系统运行时间/时刻，例如以下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> dwTick<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_11-4-测试程序" aria-hidden="true">#</a> 11.4 测试程序</h2><p>本书测试滴答定时器的方法是：使用基于滴答定时器的延时函数来闪烁LED，并且打印延时前后的tick值。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SystickAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> ucCount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dwLastTick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dwCurtick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bsp_io_level_t</span> nLevel <span class="token operator">=</span> false<span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>ucCount<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dwLastTick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dwCurtick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_11-5-上机实验" aria-hidden="true">#</a> 11.5 上机实验</h2><p>本实验将滴答定时器的驱动在hal_systick.c中实现，在hal_systick.h中声明；测试函数在app_systick.c中实现，在app.h中声明；最后在hal_entry.c中调用初始化函数和测试函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;app.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_systick.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_uart.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_data.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">SystickAppTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将程序编译出来的二进制可执行文件烧录到处理器中运行可以得到如下图的结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-11/image6.png" alt=""></p><p>开发板上LED间隔1s改变状态。</p>`,72),c=[p];function i(o,l){return s(),a("div",null,c)}const u=n(t,[["render",i],["__file","chapter11.html.vue"]]);export{u as default};
