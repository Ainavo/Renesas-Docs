import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第15章-common-i2c总线模块" tabindex="-1"><a class="header-anchor" href="#第15章-common-i2c总线模块" aria-hidden="true">#</a> 第15章 Common I2C总线模块</h1><p>本章目标</p><ul><li>使用RASC快速配置Common I2C模块</li><li>学会使用i2c的API驱动触摸芯片，获取触点数据</li></ul><h2 id="_15-1-common-i2c模块的使用" tabindex="-1"><a class="header-anchor" href="#_15-1-common-i2c模块的使用" aria-hidden="true">#</a> 15.1 Common I2C模块的使用</h2><p>RA芯片的I2C分为Simple I2C和Common I2C。Simple I2C就是本书《第8章 SCI SPI》所讲的SCI模块的I2C模式，是使用串行总线来模拟I2C协议，而本章所讲的Common I2C是芯片内部实际存在的一个硬件I2C控制器模块。</p><p>得益于FSP的封装，Simple I2C和Common I2C在应用上并没有很大的差别。</p><h3 id="_15-1-1-i2c模块的配置" tabindex="-1"><a class="header-anchor" href="#_15-1-1-i2c模块的配置" aria-hidden="true">#</a> 15.1.1 I2C模块的配置</h3><p>要配置I2C模块，先在RASC的“Pin Configuration”里的“Peripherals”找到“Connectivity:IIC”，然后根据硬件设计选择I2C通道。比如本书使用的是P409/P410作为I2C的SDA和SCL，这两个IO属于I2C2的A组引脚，因而选择“IIC2”，然后在展开的引脚配置中的“Pin Group Selection”选择“_A_only”并且使能操作模式，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image1.png" alt=""></p><p>接着再去“Stacks”里添加I2C的模块。点击“New Stack”，选择“Connectivity”，再选择里面的“I2C Master(r_iic_master)”。本章目标是作为主机去读取触摸屏的数据，所以选择Master，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image2.png" alt=""></p><p>当添加了I2C的Master模块后，就要去配置它的参数来。本章实验在RASC中配置I2C的参数具体如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image3.png" alt=""></p><ul><li>Name：I2C模块的名称，需要满足C语言字符串标准；</li><li>Channel：I2C模块的通道；</li><li>Rate：I2C通信速率，Standard支持的最大速率400kbps，快速模式最大能达到1Mbps；</li><li>Rise/Fall Time：SCL信号上升沿和下降沿的耗时；</li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image4.png" alt=""></p><ul><li>Duty Cycle：SCL时钟线的占空比，范围是4%~96%，默认是50%；</li><li>Slave Address：从机设备地址，根据从机芯片设置；</li><li>Address Mode：地址模式，支持7-Bit和10-Bit；</li><li>Timeout Mode：数据检测超时模式，支持long mode和short mode。long mode的超时计数器是16bit的，short mode的超时计数器是14bit的；当超时计数溢出都没有检测到数据则通信中止；</li><li>Timeout during SCL Low：在SCL低电平时是否使能超时检测，默认是Enabled；</li><li>Callback：中断回调函数名称，建议和通道匹配，例如i2c1_callback；</li><li>Interrupt Priority Level：I2C中断优先级；</li></ul><h3 id="_15-1-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_15-1-2-配置信息解读" aria-hidden="true">#</a> 15.1.2 配置信息解读</h3><p>配置信息分为两部分：引脚的配置信息、I2C模块的配置信息。</p><p>使用RASC配置好参数并生成工程后，会在工程的pin_data.c中生成模块的引脚信息，在hal_data.c中生成模块的配置信息。</p><ol><li>I2C模块的引脚信息</li></ol><p>I2C涉及的引脚，它们的配置信息在工程的pin_data.c中生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_09<span class="token punctuation">,</span>
      <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_DRIVE_MID 
                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_IIC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_10<span class="token punctuation">,</span>
      <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_DRIVE_MID 
                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_IIC<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个常量数组将P5409和P410配置为I2C外设复用功能。</p><ol start="2"><li>I2C模块的配置信息</li></ol><p>I2C的配置信息会在hal_data.c中的i2c_master_cfg_t结构体类型常量g_i2c_master2_cfg中定义，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">i2c_master_cfg_t</span> g_i2c_master2_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>channel             <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rate                <span class="token operator">=</span> I2C_MASTER_RATE_STANDARD<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slave               <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>addr_mode           <span class="token operator">=</span> I2C_MASTER_ADDR_MODE_7BIT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token punctuation">.</span>p_callback          <span class="token operator">=</span> i2c2_callback<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_context           <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token punctuation">.</span>ipl                 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_extend            <span class="token operator">=</span> <span class="token operator">&amp;</span>g_i2c_master2_extend<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：通道设置为2；</li><li>第04行：通信速率设置为标准速率；</li><li>第05行：从机地址是0x14；</li><li>第06行：地址模式为7bit模式；</li><li>第08行：设置中断函数名为i2c2_callback；</li></ul><p>使用I2C的open函数时，就会使用这个常量来初始化I2C模块。</p><h3 id="_15-1-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_15-1-3-中断回调函数" aria-hidden="true">#</a> 15.1.3 中断回调函数</h3><p>在g_i2c_master2_cfg用到了名为“i2c1_callback”的函数，此函数仅在hal_data.h中进行了如下声明，但是没有实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">i2c1_callback</span></span>
<span class="token keyword">void</span> <span class="token function">i2c1_callback</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要用户实现这个函数，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">i2c1_callback</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个中断回调函数的参数是i2c_master_callback_args_t结构体指针，此结构体的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_i2c_master_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span>       <span class="token operator">*</span> p_context<span class="token punctuation">;</span>      <span class="token comment">///&lt; Pointer to user-provided context</span>
    <span class="token class-name">i2c_master_event_t</span> event<span class="token punctuation">;</span>          <span class="token comment">///&lt; Event code</span>
<span class="token punctuation">}</span> <span class="token class-name">i2c_master_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中事件成员是一个枚举类型，囊括的事件类型有：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_i2c_master_event</span>
<span class="token punctuation">{</span>
    I2C_MASTER_EVENT_ABORTED     <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">///&lt; A transfer was aborted</span>
    I2C_MASTER_EVENT_RX_COMPLETE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">///&lt; A receive operation was completed successfully</span>
    I2C_MASTER_EVENT_TX_COMPLETE <span class="token operator">=</span> <span class="token number">3</span>   <span class="token comment">///&lt; A transmit operation was completed successfully</span>
<span class="token punctuation">}</span> <span class="token class-name">i2c_master_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从此可以知道，触发I2C中断的原因有：发送完成、接收完成、传输中止。它们触发中断后，会调用回调函数以执行用户的代码。</p><h3 id="_15-1-4-api接口及其应用" tabindex="-1"><a class="header-anchor" href="#_15-1-4-api接口及其应用" aria-hidden="true">#</a> 15.1.4 API接口及其应用</h3><p>在I2C模块的FSP库函数头文件r_i2c_master_api.h中，定义了I2C主机设备的操作函数结构体i2c_master_api_t，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Interface definition for I2C access as master */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_i2c_master_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">i2c_master_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                       bool <span class="token keyword">const</span> restart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                        bool <span class="token keyword">const</span> restart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> abort<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> slaveAddressSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                  <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> slave<span class="token punctuation">,</span>
                                  <span class="token class-name">i2c_master_addr_mode_t</span> <span class="token keyword">const</span> addr_mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">i2c_master_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">i2c_master_status_t</span> <span class="token operator">*</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">i2c_master_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I2C主机设备支持的操作有：open/read/write/close等，FSP在r_iic_master.c中实现了这个结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* IIC Implementation of I2C device master interface */</span>
<span class="token class-name">i2c_master_api_t</span> <span class="token keyword">const</span> g_i2c_master_on_iic <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open            <span class="token operator">=</span> R_IIC_MASTER_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read            <span class="token operator">=</span> R_IIC_MASTER_Read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write           <span class="token operator">=</span> R_IIC_MASTER_Write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abort           <span class="token operator">=</span> R_IIC_MASTER_Abort<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>slaveAddressSet <span class="token operator">=</span> R_IIC_MASTER_SlaveAddressSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close           <span class="token operator">=</span> R_IIC_MASTER_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>statusGet       <span class="token operator">=</span> R_IIC_MASTER_StatusGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet     <span class="token operator">=</span> R_IIC_MASTER_CallbackSet
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本章以对I2C主机设备的打开关闭和读写为例进行分析。</p><ol><li>打开I2C主机设备</li></ol><p>打开I2C主机设备的函数指针原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Opens the I2C Master driver and initializes the hardware.
 * @param[in] p_ctrl    Pointer to control block. Must be declared by user. Elements are set here.
 * @param[in] p_cfg     Pointer to configuration structure.
 */</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">i2c_master_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：指向I2C主机控制块，比如g_i2c_master2_ctrl；</li><li>p_cfg：指向I2C主机参数配置结构体常量，比如g_i2c_master2_cfg；</li></ul><p>p_ctrl的类型是iic_master_instance_ctrl_t结构体，在I2C通信的时候会改变此结构体中的设备状态、地址值、读写状态和应答状态等。</p><p>p_cfg的类型是i2c_master_cfg_t，此结构体被用来表示I2C主机的配置，例如I2C的通道、中断号、收发函数和中断回调函数等。</p><p>用户可以参照如下代码来打开I2C主机设备，它的内部会进行初始化：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_i2c_master2<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭I2C主机设备</li></ol><p>关闭I2C设备的函数指针原型如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fsp_err_t (* close)(i2c_master_ctrl_t * const p_ctrl);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的参数p_ctrl指向I2C主机控制块，此函数会将控制块中的I2C状态改变为关闭状态。</p><ol start="3"><li>I2C接收数据函数</li></ol><p>I2C接收数据的函数指针原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span> 
                   <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                   bool <span class="token keyword">const</span> restart<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：指向I2C主机设备控制块；</li><li>p_dest：目的数据（用来接收数据）的地址；</li><li>bytes：要接收的数据个数，单位是字节；</li><li>restart：主机接收完一帧数据后的操作，true-接收完一帧数据后主机不发送停止信号而是发送Start信号继续传输，false-接收完一帧数据后主机发送停止信号。</li></ul><p>开发者可以参考如下代码来读取数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>I2C发送数据函数</li></ol><p>I2C主机设备向从机设备发送数据的函数指针原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                        bool <span class="token keyword">const</span> restart<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：执行I2C主机设备控制块，主机发送数据的时候会根据控制块的地址等信息发起开始信号、应答信号等；</li><li>p_dest：目的数据（用来接收数据）的地址；</li><li>bytes：要发送的数据个数，单位是字节；</li><li>restart：发送完此帧数据后的操作：true表示不会发出Stop信号而是马上发出Start信号——这样可以一直霸占I2C总线，false表示发出Stop信号（大家重新竞争I2C总线）；</li></ul><p>开发者可以参考如下代码来进行I2C的数据发送：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> tmpbuf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-2-common-i2c驱动触摸屏实验" tabindex="-1"><a class="header-anchor" href="#_15-2-common-i2c驱动触摸屏实验" aria-hidden="true">#</a> 15.2 Common I2C驱动触摸屏实验</h2><h3 id="_15-2-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_15-2-1-硬件连接" aria-hidden="true">#</a> 15.2.1 硬件连接</h3><p>本章使用的是外接触摸屏，使用FPC排线与主板相连，FPC的I2C原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image5.png" alt=""></p><p>使用的引脚是P409和P410。</p><h3 id="_15-2-2-gt911驱动解析" tabindex="-1"><a class="header-anchor" href="#_15-2-2-gt911驱动解析" aria-hidden="true">#</a> 15.2.2 GT911驱动解析</h3><p>GT911是一款拥有5点电容触摸点位、拥有26个驱动通道和14个感应通道的触控芯片，可以同时识别5个触摸点位的实时准确位置、移动轨迹和触摸面积，并且根据主控需要，读取相应点为的触摸信息。</p><p>GT911的通信是标准的I2C通信协议，主机在和GT911进行I2C通信的时候需要满足I2C总线的标准协议。GT911的I2C从机设备地址定义如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image6.png" alt=""></p><p>它支持两种地址，使用哪个地址取决于GT911发生复位后INT引脚的电平。如果复位时，INT引脚是高电平，则地址是0x14/0x28/0x29；否则就是0x5D,0xBA/0xBB。</p><p>本章实验设计选择的是地址0x14。</p><p>通过发送指令和读写数据来驱动GT911，不同的指令支持的数据个数不同：一个指令对应一个寄存器的数据，也可能一个指令对应N个寄存器的数据。以读取点位数据指令0x8157为例，用户发送0x8157指令后可以连续读取7个字节的数据（触控点位ID和触控位置信息）：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image7.png" alt=""></p><h3 id="_15-2-3-gt911驱动程序" tabindex="-1"><a class="header-anchor" href="#_15-2-3-gt911驱动程序" aria-hidden="true">#</a> 15.2.3 GT911驱动程序</h3><p>本章实验仅仅是简单地获取触点的位置信息。对于触摸设备，因对它的基本要求无非就是获取触摸点位信息，因而本章将抽象为“触摸设备”，在drv_touch.h中用一个结构体来描述这一类触摸设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TouchDev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TouchDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TouchDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>pX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>pY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>TouchDev<span class="token punctuation">,</span> <span class="token operator">*</span>PTouchDev<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这一类触摸设备，应用层对它的操作只涉及：初始化、读取触摸位置。因而TouchDev结构体里只有Init、Read两个函数指针。</p><p>而对于具体的触摸驱动芯片，需要实现自己的TouchDev结构体。本章在drv_gt911.c中进行了实现TouchDev结构体，接下来对它的函数进行一一说明。</p><ol><li>中断回调函数</li></ol><p>在I2C通信过程中，需要上一次的传输完成后才能开始下一次传输，因而需要通过I2C的中断触发事件来判断上一次传输是否已经完成，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gI2C2TxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gI2C2RxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">i2c2_callback</span><span class="token punctuation">(</span><span class="token class-name">i2c_master_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> I2C_MASTER_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gI2C2TxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> I2C_MASTER_EVENT_RX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gI2C2RxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gI2C2TxCplt <span class="token operator">=</span> gI2C2RxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第07~11行：如果触发中断的事件类型是发送完成事件，则将发送完成标志位置true；</li><li>第12~16行：如果触发中断的事件类型是接收完成事件，则将接收完成标志位置true；</li></ul><ol start="2"><li>收发超时等待函数</li></ol><p>本章实现了2个等待函数，里面加入了超时机制，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">I2C2WaitTxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> wTimeOut <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gI2C2TxCplt <span class="token operator">&amp;&amp;</span> wTimeOut<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wTimeOut<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gI2C2TxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">I2C2WaitRxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> wTimeOut <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gI2C2RxCplt <span class="token operator">&amp;&amp;</span> wTimeOut<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wTimeOut<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gI2C2RxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>写GT911寄存器函数</li></ol><p>写GT911的寄存器时，要发出寄存器地址、寄存器数据。数据个数可能各有不同，函数里动态分配内存，用来保存寄存器地址、寄存器数据，然后一次性发送出去。参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GT911DrvWriteReg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> reg<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> regl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>reg <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> regh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>reg<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span> write_package <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>write_package<span class="token punctuation">,</span> <span class="token operator">&amp;</span>regh<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>write_package <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>regl<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>write_package <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> write_package<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">I2C2WaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>write_package<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第05~08行：根据传入的数据长度，动态分配数据包，并将指令和数据进行打包组合，以便调用I2C的write函数一次性发送出去；</li><li>第09行：调用write函数发送数据包，发送完之后不再接着发送数据，因而最后一个参数restart=0；</li></ul><ol start="4"><li>读GT911寄存器函数</li></ol><p>读寄存器时，要先发出寄存器地址，再读入数据。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GT911DrvReadReg</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> reg<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> tmpbuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    tmpbuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>reg <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmpbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>reg <span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> tmpbuf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">I2C2WaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">I2C2WaitRxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>各类ID读取函数</li></ol><p>GT911有多种ID供用户获取，以获取GT911的生产ID为例，它需要主机发送寄存器指令0x8140给GT911，然后读取4个字节的ID数据，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">GT911DrvReadProductID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">GT911DrvReadReg</span><span class="token punctuation">(</span>GT911_PRODUCT_ID_REG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>id <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它的ID也可以参考这样的写法实现，本章的工程1501_i2c_touch为读者封装了这几个ID读取函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">GT911DrvReadProductID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">GT911DrvReadVendorID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">GT911DrvReadVersion</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">GT911DrvGetGSTID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>清除点位寄存器</li></ol><p>在每次读取了触摸点位寄存器的数据后，需要将寄存器的数据清除掉，以便下一次触摸时更新寄存器的数据。如果不清除坐标寄存器的数据的话，每次读取都会得到一个固定值0x7F。</p><p>清除坐标寄存器的地址是0x814E，用户只需要往这个寄存器写入一个零即可，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GT911DrvClearBuf</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">GT911DrvWriteReg</span><span class="token punctuation">(</span>GT911_CLEARBUF_REG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>抽象GT911触摸屏设备对象</li></ol><p>对于GT911触摸设备，本章根据其参数特性进行了封装，来表示GT911的触摸区域和触摸点位，参考以下在drv_gt911.h中的代码设计：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    TP_ROT_NONE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    TP_ROT_90<span class="token punctuation">,</span>
    TP_ROT_180<span class="token punctuation">,</span>
    TP_ROT_270
<span class="token punctuation">}</span> TouchRotation_t<span class="token punctuation">;</span>

<span class="token comment">/**用于存放每一个触控点的id，坐标，大小**/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TouchPointInfo</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> id<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> x<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> y<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> size<span class="token punctuation">;</span>
<span class="token punctuation">}</span>TouchPointInfo_t<span class="token punctuation">;</span>

<span class="token comment">/**类结构体**/</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TouchDrv</span><span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>  ucAddr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wHeight<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wWidth<span class="token punctuation">;</span>
    TouchRotation_t tRotation<span class="token punctuation">;</span>
    TouchPointInfo_t tPointsInfo<span class="token punctuation">[</span>TOUCH_POINT_TOTAL<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用于存储五个触控点的坐标</span>
<span class="token punctuation">}</span>TouchDrv_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在后续的设计中，通过定义结构体TouchDrv_t变量来表示一个GT911设备：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>static struct TouchDrv gTP;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>读取GT911触摸点位函数</li></ol><p>在分析GT911的数据读写时，曾以读取某一个点位的数据为例，了解了一个点位拥有7个数据信息。而GT911共有5个点位信息可以获取，对应的寄存器地址在drv_gt911.h中以宏定义的形式体现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GT_TP1_REG</span>      <span class="token expression"><span class="token number">0X814F</span>      </span><span class="token comment">//第一个触摸点数据地址</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GT_TP2_REG</span>      <span class="token expression"><span class="token number">0X8157</span>      </span><span class="token comment">//第二个触摸点数据地址</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GT_TP3_REG</span>      <span class="token expression"><span class="token number">0X815F</span>      </span><span class="token comment">//第三个触摸点数据地址</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GT_TP4_REG</span>      <span class="token expression"><span class="token number">0X8167</span>      </span><span class="token comment">//第四个触摸点数据地址</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GT_TP5_REG</span>      <span class="token expression"><span class="token number">0X816F</span>      </span><span class="token comment">//第五个触摸点数据地址</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么情况下才需要去读取点位信息呢？有触摸事件发生的时候。而用户该如何获知GT911是否有被触摸呢？它用一个寄存器来表示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image8.png" alt=""></p><ul><li>Bit-7:buffer_status，1-有触摸数据等待主机读取；0-没有数据；</li><li>Bit-6:large detect,1-表示有大片区域被触摸了；</li><li>Bit-4:HaveKey,1-正在被触摸；0-没有被触摸或者松开触摸了；</li><li>Bit-[3:0]:触摸的点数；</li></ul><p>用户可以根据这6个寄存器指令来获取每次触摸的点位信息了，参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">GT911DrvIsTouched</span><span class="token punctuation">(</span>TouchDrv_t <span class="token operator">*</span> tp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> touched_state<span class="token punctuation">,</span> touch_num<span class="token punctuation">,</span> buffer_status<span class="token punctuation">;</span>
    touched_state <span class="token operator">=</span> <span class="token function">GT911DrvGetGSTID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    touch_num <span class="token operator">=</span> touched_state <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>            <span class="token comment">//触点数量</span>
    buffer_status <span class="token operator">=</span> <span class="token punctuation">(</span>touched_state <span class="token operator">&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 帧状态</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>buffer_status <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>touch_num <span class="token operator">&lt;=</span> TOUCH_POINT_TOTAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>touch_num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">uint16_t</span> pointers_regs<span class="token punctuation">[</span>TOUCH_POINT_TOTAL<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>GT_TP1_REG<span class="token punctuation">,</span> GT_TP2_REG<span class="token punctuation">,</span> GT_TP3_REG<span class="token punctuation">,</span> GT_TP4_REG<span class="token punctuation">,</span> GT_TP5_REG<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取每个触控点的坐标值并保存</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> touch_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">uint8_t</span> point_info_per_size <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
            <span class="token class-name">uint8_t</span> <span class="token operator">*</span> point_info_p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>point_info_per_size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">GT911DrvReadReg</span><span class="token punctuation">(</span>pointers_regs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> point_info_p<span class="token punctuation">,</span> point_info_per_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

            tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> point_info_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>point_info_p<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">free</span><span class="token punctuation">(</span>point_info_p<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//旋转方向</span>
            <span class="token class-name">uint16_t</span> temp<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>tRotation<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">case</span> TP_ROT_NONE<span class="token operator">:</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>wWidth <span class="token operator">-</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>wHeight <span class="token operator">-</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> TP_ROT_270<span class="token operator">:</span>
                    temp <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>wWidth <span class="token operator">-</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> TP_ROT_180<span class="token operator">:</span>
<span class="token comment">//                    tp-&gt;tPointsInfo[i].x = tp-&gt;tPointsInfo[i].x;</span>
<span class="token comment">//                    tp-&gt;tPointsInfo[i].y = tp-&gt;tPointsInfo[i].y;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> TP_ROT_90<span class="token operator">:</span>
                    temp <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
                    tp<span class="token operator">-&gt;</span>tPointsInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>wHeight <span class="token operator">-</span> temp<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">GT911DrvClearBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//必须给GT911_POINT_INFO缓冲区置0,不然读取的数据一直为128！！！！</span>
    <span class="token function">GT911DrvClearBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，为了和之前抽象出来的触摸设备（TouchDev）相匹配，还要在此基础上封装一个Read函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">GT911DrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TouchDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>pX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>pY<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GT911DrvIsTouched</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gTP<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>pX <span class="token operator">=</span> gTP<span class="token punctuation">.</span>tPointsInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token operator">*</span>pY <span class="token operator">=</span> gTP<span class="token punctuation">.</span>tPointsInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>GT911初始化函数</li></ol><p>本章实验并未对GT911进行更精细的设置，因而并不没有修改它的寄存器。</p><p>本章的初始化函数仅仅初始化I2C设备、读取GT911的ID和触摸范围，参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GT911DrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TouchDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    gTP<span class="token punctuation">.</span>ucAddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>g_i2c_master2<span class="token punctuation">.</span>p_cfg<span class="token operator">-&gt;</span>slave<span class="token punctuation">;</span>
    gTP<span class="token punctuation">.</span>tRotation <span class="token operator">=</span> TP_ROT_NONE<span class="token punctuation">;</span>
    <span class="token comment">/* 初始化I2C驱动 */</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_i2c_master2<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_i2c_master2<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_i2c_master2<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 读ID */</span>
    <span class="token class-name">uint32_t</span> nVendorID <span class="token operator">=</span> <span class="token function">GT911DrvReadVendorID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;gt911 vendor id: 0x%.4x\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nVendorID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> nProductID <span class="token operator">=</span> <span class="token function">GT911DrvReadProductID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;gt911 product id: 0x%.4x\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nProductID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> nVersion <span class="token operator">=</span> <span class="token function">GT911DrvReadVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;version = 0x%x\\r\\n&quot;</span><span class="token punctuation">,</span> nVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GT911DrvReadReg</span><span class="token punctuation">(</span><span class="token number">0x8048</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gTP<span class="token punctuation">.</span>wWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GT911DrvReadReg</span><span class="token punctuation">(</span><span class="token number">0x804A</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gTP<span class="token punctuation">.</span>wHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10"><li>触摸设备的注册和获取</li></ol><p>以面向对象的思想，构造了一个TouchDev结构体gTouchDev，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TouchDev</span> gTouchDev <span class="token operator">=</span> <span class="token punctuation">{</span>
                                    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;GT911&quot;</span><span class="token punctuation">,</span>
                                    <span class="token punctuation">.</span>Init <span class="token operator">=</span> GT911DrvInit<span class="token punctuation">,</span>
                                    <span class="token punctuation">.</span>Read <span class="token operator">=</span> GT911DrvRead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再以一个函数将此设备返回给上层应用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">TouchDev</span><span class="token operator">*</span> <span class="token function">TouchDevGet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gTouchDev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-2-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_15-2-4-测试程序" aria-hidden="true">#</a> 15.2.4 测试程序</h3><p>app_test.c是测试程序，它会打印触摸点的信息，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">TouchAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TouchDev <span class="token operator">*</span>ptDev <span class="token operator">=</span> <span class="token function">TouchDevGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Not Found Touch Device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ptDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ptDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>ptDev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Touch-Position: (%d,%d)\\r\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-2-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_15-2-5-上机实验" aria-hidden="true">#</a> 15.2.5 上机实验</h3><p>在hal_entry.c中的hal_entry()函数中，初始化滴答定时器、初始化调试串口，然后调用TouchAppTest函数进行测试。</p><p>当触摸屏幕的时候，串口助手就会打印例如下图这样的点位坐标信息：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-15/image9.png" alt=""></p>`,140),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter15.html.vue"]]);export{r as default};
