import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第34章-sr04超声波测距实验" tabindex="-1"><a class="header-anchor" href="#第34章-sr04超声波测距实验" aria-hidden="true">#</a> 第34章 SR04超声波测距实验</h1><h2 id="_34-1-sr04超声波模块简介" tabindex="-1"><a class="header-anchor" href="#_34-1-sr04超声波模块简介" aria-hidden="true">#</a> 34.1 SR04超声波模块简介</h2><h3 id="_34-1-1-产品概述" tabindex="-1"><a class="header-anchor" href="#_34-1-1-产品概述" aria-hidden="true">#</a> 34.1.1 产品概述</h3><p>超声波测距模块是利用超声波来测距。模块先发送超声波，然后接收反射回来的超声波，由反射经历的时间和声音的传播速度340m/s，计算得出距离。</p><p>SR04是一款常见的超声波传感器，模块自动发送8个40KHz的方波，自动检测是否有信号返回，用户只需提供一个触发信号，随后检测回响信号的时间长短即可。</p><p>SR04采用5V电压，静态电流小于2mA，感应角度最大约15度，探测距离约2cm-450cm。</p><h3 id="_34-1-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_34-1-2-硬件连接" aria-hidden="true">#</a> 34.1.2 硬件连接</h3><p>主机通过两条数据线与SR04连接：主机通过Trig引脚发脉冲给SR04，主机检测Echo引脚的高电平时长。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image1.png" alt=""></p><p>SR04模块上面有四个引脚，分别为：VCC、Trig、Echo、GND。</p><p>Trig是脉冲触发引脚，即控制该脚让SR04模块开始发送超声波。</p><p>Echo是回响接收引脚，即SR04模块一旦接收到超声波的返回信号则输出回响信号，回响信号的脉冲宽度与所测距离成正比。</p><h3 id="_34-1-3-测距时序" tabindex="-1"><a class="header-anchor" href="#_34-1-3-测距时序" aria-hidden="true">#</a> 34.1.3 测距时序</h3><p>SR04超声波测距模块时序图所下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image2.png" alt=""></p><p>要测距，需如下操作：</p><p>① 触发：</p><p>向Trig（脉冲触发引脚）发出一个大约10us的高电平。</p><p>② 发出超声波，接收反射信号：</p><p>模块就自动发出8个40Khz的超声波，超声波遇到障碍物后反射回来，模块接收返回来的超声波。</p><p>③ 回响：</p><p>模块接收到反射回来的超声波后，Echo引脚输出一个与检测距离成比例的高电平。</p><p>我们只要在该引脚为高时，开启定时器计数，在该引脚变为低时，结束定时器计数。根据定时器的计数和定时器频率就可以算出经历时间，根据时间即可推导出距离。</p><p>计算公式为：测试距离=(高电平时间*声速(340M/S))/2;</p><h2 id="_34-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_34-2-模块配置" aria-hidden="true">#</a> 34.2 模块配置</h2><h3 id="_34-2-1-gpio配置" tabindex="-1"><a class="header-anchor" href="#_34-2-1-gpio配置" aria-hidden="true">#</a> 34.2.1 GPIO配置</h3><p>本次实验使用的超声波模块会使用到2个IO：Trig和Echo。P003连接到Trig，将其配置为输出模式：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image3.png" alt=""></p><p>P503引脚连接到Echo，使用它的GPT触发功能，触发GPT的计数开启或者停止。</p><h3 id="_34-2-2-定时器配置" tabindex="-1"><a class="header-anchor" href="#_34-2-2-定时器配置" aria-hidden="true">#</a> 34.2.2 定时器配置</h3><p>本次实验获取回响时间采用的方法是，使用P503触发GPT开始计数和结束计数。</p><p>已知Echo默认情况下是低电平的，当Trig发出信号后，Echo会产生高脉冲。</p><p>所以，使用P503的上升沿触发GPT的计数开启，下降沿触发GPT的计数停止，在Trig引脚发出开始脉冲后，就轮询GPT的状态和计数变化。</p><p>如果GPT处于停止状态，且计数不为0，那就代表着Echo触发了一次GPT计数，将计数值读取出来，就可以算出时间、举例。</p><p>RA6M5的P503引脚具有的外设复用功能如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image4.png" alt=""></p><p>本书利用其GPY_POEG2:GTETRGC功能触发GPT，本次实验使用的是GPT0。对于GPT的配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image5.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image6.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image7.png" alt=""></p><p>这里配置的计数周期值是32位GPT最大计数，这是为了尽可能让测量时间在GPT的一次计数周期内完成，不产生溢出以免增加计算的复杂度。</p><h3 id="_34-2-3-gpt-poeg配置" tabindex="-1"><a class="header-anchor" href="#_34-2-3-gpt-poeg配置" aria-hidden="true">#</a> 34.2.3 GPT_POEG配置</h3><p>因为使用到了外部引脚触发GPT的POEG功能，因而还需要添加POEG Stack模块：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image8.png" alt=""></p><p>另外P503是PORG2，所以添加的POEG模块通道要修改为2，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image9.png" alt=""></p><h2 id="_34-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_34-3-驱动程序" aria-hidden="true">#</a> 34.3 驱动程序</h2><h3 id="_34-3-1-io驱动" tabindex="-1"><a class="header-anchor" href="#_34-3-1-io驱动" aria-hidden="true">#</a> 34.3.1 IO驱动</h3><p>和DS18B20的IO驱动一模一样，参考《32.4.1 IO驱动》。</p><h3 id="_34-3-2-定时器驱动" tabindex="-1"><a class="header-anchor" href="#_34-3-2-定时器驱动" aria-hidden="true">#</a> 34.3.2 定时器驱动</h3><ol><li>初始化定时器</li></ol><p>在初始化的时候除了要打开GPT以外，还需要打开POEG设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ptdev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 打开GPT设备完成初始化 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_poeg0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_poeg0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_poeg0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>轮询GPT状态以及读取计数值</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buf<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">timer_status_t</span> status <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>state <span class="token operator">=</span> TIMER_STATE_STOPPED<span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">statusGet</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>TIMER_STATE_STOPPED <span class="token operator">==</span> status<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span> status<span class="token punctuation">.</span>counter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>TIMER_STATE_STOPPED <span class="token operator">==</span> status<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span> status<span class="token punctuation">.</span>counter <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>pbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
                <span class="token operator">*</span>pbuf <span class="token operator">=</span> status<span class="token punctuation">.</span>counter<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">/* ns */</span>
                err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第12行：获取定时器状态；</li><li>第14行：判断状态是否停止和计数值是否为零，如果是这种情况那么就代表没有回响信号；</li><li>第18行：如果定时器是停滞状态，且GPT计数值不为0，就表示成功测量了一次回响信号，下面就取出计数值存入buffer。</li></ul><h2 id="_34-4-sr04模块" tabindex="-1"><a class="header-anchor" href="#_34-4-sr04模块" aria-hidden="true">#</a> 34.4 SR04模块</h2><h3 id="_34-4-1-sr04设备对象" tabindex="-1"><a class="header-anchor" href="#_34-4-1-sr04设备对象" aria-hidden="true">#</a> 34.4.1 SR04设备对象</h3><p>要操作SR04，只需要对它进行初始化、然后读取数值。抽象出如下结构体（dev_ultra.h）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UltraDev</span><span class="token punctuation">{</span>
    <span class="token keyword">float</span> distance<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> humidity<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> UltraDevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在drv_ ultra.c中实现了一个UltraDev结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> gDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> UltraDevInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> UltraDevRead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后需要向上层应用提供获取SR04设备的接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> <span class="token operator">*</span><span class="token function">UltraGetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gDevice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34-4-2-初始化设备" tabindex="-1"><a class="header-anchor" href="#_34-4-2-初始化设备" aria-hidden="true">#</a> 34.4.2 初始化设备</h3><p>SR04的初始化函数就是初始化IO以及定时器：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">UltraDevInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    gTrigDevice <span class="token operator">=</span> <span class="token function">IODeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;Ultra Trig&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gTrigDevice<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to Find Ultra Trig IO!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> gTrigDevice<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>gTrigDevice<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to init GPIO!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gTrigDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gTrigDevice<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    gEchoTimerDevice <span class="token operator">=</span> <span class="token function">TimerDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;Ultra Echo Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gEchoTimerDevice<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to Find Ultra Echo Timer!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> gEchoTimerDevice<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>gEchoTimerDevice<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to init Ultra Echo Time!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34-4-3-测量距离" tabindex="-1"><a class="header-anchor" href="#_34-4-3-测量距离" aria-hidden="true">#</a> 34.4.3 测量距离</h3><p>当使用Trig发出开始脉冲后，只需要等待读取定时器的状态和计算出来的时间值即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">UltraDevRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UltraDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    gTrigDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gTrigDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gTrigDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gTrigDevice<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>gEchoTimerDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gEchoTimerDevice<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptdev<span class="token operator">-&gt;</span>distance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>time<span class="token operator">*</span><span class="token number">34.0</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">1000000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第09行：因为计算出来的时间是ns单位，因而通过声速和时间的公式计算出探测距离。</li></ul><h2 id="_34-5-测试程序" tabindex="-1"><a class="header-anchor" href="#_34-5-测试程序" aria-hidden="true">#</a> 34.5 测试程序</h2><p>本次实验每隔10ms探测一次距离：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DeviceTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">IODevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    UltraDevice <span class="token operator">*</span>pDevice <span class="token operator">=</span> <span class="token function">UltraGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pDevice<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. There is no SR04 Ultra device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pDevice<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">==</span> pDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;测试距离：%.4fcm\\r\\n&quot;</span><span class="token punctuation">,</span> pDevice<span class="token operator">-&gt;</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_34-6-测试结果" tabindex="-1"><a class="header-anchor" href="#_34-6-测试结果" aria-hidden="true">#</a> 34.6 测试结果</h2><p>将程序烧写到开发板上运行可以得到如下图所示的探测结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-34/image10.png" alt=""></p>`,77),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter34.html.vue"]]);export{r as default};
