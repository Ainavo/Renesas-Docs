import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const e={},p=t(`<h1 id="第8章-任务管理" tabindex="-1"><a class="header-anchor" href="#第8章-任务管理" aria-hidden="true">#</a> 第8章 任务管理</h1><p>在本章中，会涉及如下内容：</p><ul><li>FreeRTOS如何给每个任务分配CPU时间</li><li>如何选择某个任务来运行</li><li>任务优先级如何起作用</li><li>任务有哪些状态</li><li>如何实现任务</li><li>如何使用任务参数</li><li>怎么修改任务优先级</li><li>怎么删除任务</li><li>怎么实现周期性的任务</li><li>如何使用空闲任务</li></ul><h2 id="_8-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_8-1-基本概念" aria-hidden="true">#</a> 8.1 基本概念</h2><p>对于整个单片机程序，我们称之为application，应用程序。</p><p>使用FreeRTOS时，我们可以在application中创建多个任务(task)，有些文档把任务也称为线程(thread)。</p><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image1.png" alt=""></p><p>以日常生活为例，比如这个母亲要同时做两件事：</p><ul><li>喂饭：这是一个任务</li><li>回信息：这是另一个任务</li></ul><p>这可以引入很多概念：</p><ul><li>任务状态(State)： <ul><li>当前正在喂饭，它是running状态；另一个&quot;回信息&quot;的任务就是&quot;not running&quot;状态</li><li>&quot;not running&quot;状态还可以细分：</li><li>ready：就绪，随时可以运行</li><li>blocked：阻塞，卡住了，母亲在等待同事回信息</li><li>suspended：挂起，同事废话太多，不管他了</li></ul></li><li>优先级(Priority) <ul><li>我工作生活兼顾：喂饭、回信息优先级一样，轮流做</li><li>我忙里偷闲：还有空闲任务，休息一下</li><li>厨房着火了，什么都别说了，先灭火：优先级更高</li></ul></li><li>栈(Stack) <ul><li>喂小孩时，我要记得上一口喂了米饭，这口要喂青菜了</li><li>回信息时，我要记得刚才聊的是啥</li><li>做不同的任务，这些细节不一样</li><li>对于人来说，当然是记在脑子里</li><li>对于程序，是记在栈里</li><li>每个任务有自己的栈</li></ul></li><li>事件驱动 <ul><li>孩子吃饭太慢：先休息一会，等他咽下去了、等他提醒我了，再喂下一口</li></ul></li><li>协助式调度(Co-operative Scheduling) <ul><li>你在给同事回信息 <ul><li>同事说：好了，你先去给小孩喂一口饭吧，你才能离开</li><li>同事不放你走，即使孩子哭了你也不能走</li></ul></li><li>你好不容易可以给孩子喂饭了 <ul><li>孩子说：好了，妈妈你去处理一下工作吧，你才能离开</li><li>孩子不放你走，即使同事连发信息你也不能走</li></ul></li></ul></li></ul><p>这涉及很多概念，后续章节详细分析。</p><h2 id="_8-2-任务创建与删除" tabindex="-1"><a class="header-anchor" href="#_8-2-任务创建与删除" aria-hidden="true">#</a> 8.2 任务创建与删除</h2><h3 id="_8-2-1-什么是任务" tabindex="-1"><a class="header-anchor" href="#_8-2-1-什么是任务" aria-hidden="true">#</a> 8.2.1 什么是任务</h3><p>在FreeRTOS中，任务就是一个函数，原型如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>void ATaskFunction( void *pvParameters );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要注意的是：</p><ul><li>这个函数不能返回</li><li>同一个函数，可以用来创建多个任务；换句话说，多个任务可以运行同一个函数</li><li>函数内部，尽量使用局部变量： <ul><li>每个任务都有自己的栈</li><li>每个任务运行这个函数时</li><li>任务A的局部变量放在任务A的栈里、任务B的局部变量放在任务B的栈里</li><li>不同任务的局部变量，有自己的副本</li><li>函数使用全局变量、静态变量的话 <ul><li>只有一个副本：多个任务使用的是同一个副本</li><li>要防止冲突(后续会讲)</li></ul></li></ul></li></ul><p>下面是一个示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ATaskFunction</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 对于不同的任务，局部变量放在任务的栈里，有各自的副本 */</span>
	<span class="token class-name">int32_t</span> lVariableExample <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	
    <span class="token comment">/* 任务函数通常实现为一个无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 任务的代码 */</span>
	<span class="token punctuation">}</span>

    <span class="token comment">/* 如果程序从循环中退出，一定要使用vTaskDelete删除自己
     * NULL表示删除的是自己
     */</span>
	<span class="token function">vTaskDelete</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 程序不会执行到这里, 如果执行到这里就出错了 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-2-创建任务" tabindex="-1"><a class="header-anchor" href="#_8-2-2-创建任务" aria-hidden="true">#</a> 8.2.2 创建任务</h3><p>创建任务时可以使用2个函数：动态分配内存、静态分配内存。</p><p>使用动态分配内存的函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xTaskCreate</span><span class="token punctuation">(</span> 
TaskFunction_t pxTaskCode<span class="token punctuation">,</span> <span class="token comment">// 函数指针, 任务函数</span>
              <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> pcName<span class="token punctuation">,</span> <span class="token comment">// 任务的名字</span>
              <span class="token keyword">const</span> configSTACK_DEPTH_TYPE usStackDepth<span class="token punctuation">,</span> <span class="token comment">// 栈大小,单位为word,10表示40字节</span>
              <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token keyword">const</span> pvParameters<span class="token punctuation">,</span> <span class="token comment">// 调用任务函数时传入的参数</span>
              UBaseType_t uxPriority<span class="token punctuation">,</span>    <span class="token comment">// 优先级</span>
              TaskHandle_t <span class="token operator">*</span> <span class="token keyword">const</span> pxCreatedTask <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务句柄, 以后使用它来操作这个任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pvTaskCode</td><td>函数指针，可以简单地认为任务就是一个C函数。 它稍微特殊一点：永远不退出，或者退出时要调用&quot;vTaskDelete(NULL)&quot;</td></tr><tr><td>pcName</td><td>任务的名字，FreeRTOS内部不使用它，仅仅起调试作用。 长度为：configMAX_TASK_NAME_LEN</td></tr><tr><td>usStackDepth</td><td>每个任务都有自己的栈，这里指定栈大小。 单位是word，比如传入100，表示栈大小为100 word，也就是400字节。 最大值为uint16_t的最大值。 怎么确定栈的大小，并不容易，很多时候是估计。 精确的办法是看反汇编码。</td></tr><tr><td>pvParameters</td><td>调用pvTaskCode函数指针时用到：pvTaskCode(pvParameters)</td></tr><tr><td>uxPriority</td><td>优先级范围：0~(configMAX_PRIORITIES – 1) 数值越小优先级越低， 如果传入过大的值，xTaskCreate会把它调整为(configMAX_PRIORITIES – 1)</td></tr><tr><td>pxCreatedTask</td><td>用来保存xTaskCreate的输出结果：task handle。 以后如果想操作这个任务，比如修改它的优先级，就需要这个handle。 如果不想使用该handle，可以传入NULL。</td></tr><tr><td>返回值</td><td>成功：pdPASS； 失败：errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY(失败原因只有内存不足) 注意：文档里都说失败时返回值是pdFAIL，这不对。 pdFAIL是0，errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY是-1。</td></tr></tbody></table><p>使用静态分配内存的函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>TaskHandle_t <span class="token function">xTaskCreateStatic</span> <span class="token punctuation">(</span> 
    TaskFunction_t pxTaskCode<span class="token punctuation">,</span>   <span class="token comment">// 函数指针, 任务函数</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> pcName<span class="token punctuation">,</span>   <span class="token comment">// 任务的名字</span>
    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> ulStackDepth<span class="token punctuation">,</span> <span class="token comment">// 栈大小,单位为word,10表示40字节</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token keyword">const</span> pvParameters<span class="token punctuation">,</span>   <span class="token comment">// 调用任务函数时传入的参数</span>
    UBaseType_t uxPriority<span class="token punctuation">,</span>      <span class="token comment">// 优先级</span>
    StackType_t <span class="token operator">*</span> <span class="token keyword">const</span> puxStackBuffer<span class="token punctuation">,</span> <span class="token comment">// 静态分配的栈，就是一个buffer</span>
    StaticTask_t <span class="token operator">*</span> <span class="token keyword">const</span> pxTaskBuffer <span class="token comment">// 静态分配的任务结构体的指针，用它来操作这个任务</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于使用动态分配内存创建任务的函数，最后2个参数不一样：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pvTaskCode</td><td>函数指针，可以简单地认为任务就是一个C函数。 它稍微特殊一点：永远不退出，或者退出时要调用&quot;vTaskDelete(NULL)&quot;</td></tr><tr><td>pcName</td><td>任务的名字，FreeRTOS内部不使用它，仅仅起调试作用。 长度为：configMAX_TASK_NAME_LEN</td></tr><tr><td>usStackDepth</td><td>每个任务都有自己的栈，这里指定栈大小。 单位是word，比如传入100，表示栈大小为100 word，也就是400字节。 最大值为uint16_t的最大值。 怎么确定栈的大小，并不容易，很多时候是估计。 精确的办法是看反汇编码。</td></tr><tr><td>pvParameters</td><td>调用pvTaskCode函数指针时用到：pvTaskCode(pvParameters)</td></tr><tr><td>uxPriority</td><td>优先级范围：0~(configMAX_PRIORITIES – 1) 数值越小优先级越低， 如果传入过大的值，xTaskCreate会把它调整为(configMAX_PRIORITIES – 1)</td></tr><tr><td>puxStackBuffer</td><td>静态分配的栈内存，比如可以传入一个数组， 它的大小是usStackDepth*4。</td></tr><tr><td>pxTaskBuffer</td><td>静态分配的StaticTask_t结构体的指针</td></tr><tr><td>返回值</td><td>成功：返回任务句柄； 失败：NULL</td></tr></tbody></table><h3 id="_8-2-3-任务的删除" tabindex="-1"><a class="header-anchor" href="#_8-2-3-任务的删除" aria-hidden="true">#</a> 8.2.3 任务的删除</h3><p>删除任务时使用的函数如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>void vTaskDelete( TaskHandle_t xTaskToDelete );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pvTaskCode</td><td>任务句柄，使用xTaskCreate创建任务时可以得到一个句柄。 也可传入NULL，这表示删除自己。</td></tr></tbody></table><p>怎么删除任务？举个不好的例子：</p><ul><li>自杀：<strong>vTaskDelete(NULL)</strong></li><li>被杀：别的任务执行 <strong>vTaskDelete(pvTaskCode)</strong> ，pvTaskCode是自己的句柄</li><li>杀人：执行 <strong>vTaskDelete(pvTaskCode)</strong> ，pvTaskCode是别的任务的句柄</li></ul><h2 id="_8-3-示例1-创建任务" tabindex="-1"><a class="header-anchor" href="#_8-3-示例1-创建任务" aria-hidden="true">#</a> 8.3 示例1: 创建任务</h2><h3 id="_8-3-1-使用rasc创建任务" tabindex="-1"><a class="header-anchor" href="#_8-3-1-使用rasc创建任务" aria-hidden="true">#</a> 8.3.1 使用RASC创建任务</h3><p>代码为：0801_create_task</p><p>使用动态、静态分配内存的方式，分别创建多个任务：监测遥控器并在LCD上显示、LED闪烁、使用无源蜂鸣器播放音乐。</p><p>使用RASC可以在图形界面创建任务，但是本课程不想依赖于RASC工具，所以我们自己编写代码来创建任务。ra_gen\\main.c是由RASC自动生成的，里面没有添加用户代码的地方。</p><p>我们先在图形界面创建一个“user_tasks”，如下图所示：</p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image2.png" style="zoom:60%;"><p>上图中，②处用来设置任务的优先级，把user_tasks任务的优先级设置为2，以后在user_tasks里创建其他任务时把优先级设置为1，这样user_tasks就可以不被打扰地创建完所有任务后，其他任务才能运行。</p><p>③处指定user_tasks任务的栈是动态分配的，这样当user_tasks执行完毕后，它的栈可以被回收。</p><p>然后仿照《5.2.2 添加堆分配算法模块》添加堆算法。</p><p>生成代码后，main.c的代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int main(void)
 {
      ......
      /* Init RTOS tasks. */
      user_tasks_create();

      /* Start the scheduler. */
      vTaskStartScheduler();
      return 0;
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第5行的“user_tasks_create”函数里，会创建一个名为“user_tasks”的任务，它的入口函数是“user_tasks_func”（在user_tasks.c里），它会去调用“user_tasks_entry”（在user_tasks_entry里）。</p><p>我们在user_tasks_entry函数里添加自己的代码：</p><h3 id="_1-3-2-手工创建任务" tabindex="-1"><a class="header-anchor" href="#_1-3-2-手工创建任务" aria-hidden="true">#</a> 1.3.2 手工创建任务</h3><p>在user_tasks_entry函数里，分别使用静态分配内存、动态分配内存的方法，创建3个任务：LED任务（让LED闪烁）、音乐任务（通过无源蜂鸣器播放音乐）、IRDA任务（显示红外遥控器的键值）。</p><p>代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token comment">/* user_tasks entry function */</span>
 <span class="token keyword">static</span> StackType_t g_pucStackOfLightTask<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> StaticTask_t g_TCBofLightTask<span class="token punctuation">;</span>
 <span class="token keyword">static</span> TaskHandle_t xLightTaskHandle<span class="token punctuation">;</span>

 <span class="token keyword">void</span> <span class="token function">user_tasks_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> pvParameters<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
      BaseType_t ret<span class="token punctuation">;</span>
      TaskHandle_t xSoundTaskHandle<span class="token punctuation">;</span>
      <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">led_thread_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">irda_thread_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">FSP_PARAMETER_NOT_USED</span><span class="token punctuation">(</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">/* TODO: add your own code here */</span>
      <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">/* 创建任务: 声 */</span>
      <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>PlayMusic<span class="token punctuation">,</span> <span class="token string">&quot;SoundTask&quot;</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">/* 创建任务: 光 */</span>
      xLightTaskHandle <span class="token operator">=</span> <span class="token function">xTaskCreateStatic</span><span class="token punctuation">(</span>led_thread_entry<span class="token punctuation">,</span> <span class="token string">&quot;LightTask&quot;</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> g_pucStackOfLightTask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_TCBofLightTask<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">/* 创建任务: IRDA+LCD */</span>
      ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>irda_thread_entry<span class="token punctuation">,</span> <span class="token string">&quot;IrdaTask&quot;</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第20、23、26行分别创建了3个任务。其中第23行使用静态分配内存的方式创建任务，需要提供栈、TCB结构体：第2、3行使用全局变量定义了TCB结构体、数组（用作栈）。</p><p>“user_tasks”任务执行完后，不能直接返回，使用第28行的代码结束任务。</p><h3 id="_8-3-3-上机实验" tabindex="-1"><a class="header-anchor" href="#_8-3-3-上机实验" aria-hidden="true">#</a> 8.3.3 上机实验</h3><p>按下图接线：</p><p>100ask</p><p>烧录程序后，可以看到LED闪烁、LCD屏幕有输出并且会显示遥控器的键值，同时无源蜂鸣器会播放音乐。</p><p>缺点：音乐播放得有点卡顿。</p><h2 id="_8-4-示例2-使用参数创建任务" tabindex="-1"><a class="header-anchor" href="#_8-4-示例2-使用参数创建任务" aria-hidden="true">#</a> 8.4 示例2: 使用参数创建任务</h2><p>代码为：0802_create_task_use_params，关键源文件“applications\\lcd_app.c”。</p><p>创建多个任务时，可以使用同一个函数，怎么体现它们的差别？</p><p>● 栈不同：每个任务有有自己的栈，即使使用同一个函数，但是栈里面存储的调用过程、局部变量是不一样的。 ● 创建任务时可以传入不同的参数</p><p>我们创建3个任务，使用同一个函数，但是在LCD上打印不一样的信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> <span class="token punctuation">{</span>
     <span class="token class-name">uint8_t</span> x<span class="token punctuation">;</span>
     <span class="token class-name">uint8_t</span> y<span class="token punctuation">;</span>
     <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> g_Task1Info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Task1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> g_Task2Info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;Task2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> g_Task3Info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;Task3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">int</span> g_LCDCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

 <span class="token keyword">void</span> <span class="token function">lcd_thread_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
     <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> <span class="token operator">*</span>pInfo <span class="token operator">=</span> params<span class="token punctuation">;</span>
     <span class="token class-name">uint32_t</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> len<span class="token punctuation">;</span>

     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 在LCD上显示文字 */</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>g_LCDCanUse<span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
             g_LCDCanUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
             len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span>pInfo<span class="token operator">-&gt;</span>x<span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            len <span class="token operator">+=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             g_LCDCanUse <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第14行info来自参数params；params又来自哪里？创建任务时传入的。</p><p>创建任务的代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> void create_lcd_threads(void)
 {
     BaseType_t ret;

     LCD_Init();
     LCD_Clear();

     ret = xTaskCreate(lcd_thread_entry, &quot;lcdthread1&quot;, 128, &amp;g_Task1Info, 1, NULL);
     ret = xTaskCreate(lcd_thread_entry, &quot;lcdthread1&quot;, 128, &amp;g_Task2Info, 1, NULL);
     ret = xTaskCreate(lcd_thread_entry, &quot;lcdthread1&quot;, 128, &amp;g_Task3Info, 1, NULL);
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-5-示例3-删除任务" tabindex="-1"><a class="header-anchor" href="#_8-5-示例3-删除任务" aria-hidden="true">#</a> 8.5 示例3: 删除任务</h2><p>代码为：0803_delete_task，关键源文件“applications\\irda_app.c”。</p><p>功能为：先创建一个IRDA任务，它读取红外遥控器的键值，当发现播放键被按下时，创建音乐任务；当发现电源键被按下时，删除音乐任务。</p><p>关键代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 读取红外遥控器 */</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">==</span> pIRDA<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pIRDA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> IR_KEY_PLAY<span class="token punctuation">)</span> <span class="token comment">/* play */</span>
             <span class="token punctuation">{</span>
                 <span class="token comment">/* 创建播放音乐的任务 */</span>
               <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">if</span> <span class="token punctuation">(</span>xSoundTaskHandle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
               <span class="token punctuation">{</span>
                     <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Create Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>PlayMusic<span class="token punctuation">,</span> <span class="token string">&quot;SoundTask&quot;</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>

             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> IR_KEY_POWER<span class="token punctuation">)</span> <span class="token comment">/* power */</span>
             <span class="token punctuation">{</span>
                 <span class="token comment">/* 删除播放音乐的任务 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>xSoundTaskHandle <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                 <span class="token punctuation">{</span>
                     <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Delete Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">vTaskDelete</span><span class="token punctuation">(</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">PassiveBuzzer_Control</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 停止蜂鸣器 */</span>
                     xSoundTaskHandle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第4行读取遥控键值，第15、27行分别创建、删除音乐任务。</p><p>程序缺点：每次重新播放音乐时，都是从头播放，没有暂停功能。</p><h2 id="_8-6-任务优先级和tick" tabindex="-1"><a class="header-anchor" href="#_8-6-任务优先级和tick" aria-hidden="true">#</a> 8.6 任务优先级和Tick</h2><h3 id="_8-6-1-任务优先级" tabindex="-1"><a class="header-anchor" href="#_8-6-1-任务优先级" aria-hidden="true">#</a> 8.6.1 任务优先级</h3><p>怎么让播放的音乐更动听？提高优先级。优先级的取值范围是：0~(configMAX_PRIORITIES – 1)，数值越大优先级越高。</p><p>在学习调度方法之前，你只要初略地知道：</p><p>● FreeRTOS会确保最高优先级的、可运行的任务，马上就能执行 ● 对于相同优先级的就绪任务，轮流执行</p><p>这无需记忆，就像我们举的例子：</p><p>● 厨房着火了，当然优先灭火 ● 喂饭、回复信息同样重要，轮流做</p><h3 id="_8-6-2-tick" tabindex="-1"><a class="header-anchor" href="#_8-6-2-tick" aria-hidden="true">#</a> 8.6.2 Tick</h3><p>对于同优先级的任务，它们“轮流”执行。怎么轮流？你执行一会，我执行一会。</p><p>&quot;一会&quot;怎么定义？人有心跳，心跳间隔基本恒定。FreeRTOS中也有心跳，它使用定时器产生固定间隔的中断。这叫Tick、滴答，比如每1ms发生一次时钟中断。</p><p>如下图：</p><ul><li>假设t1、t2、t3发生时钟中断</li><li>两次中断之间的时间被称为时间片(time slice、tick period)</li><li>时间片的长度由configTICK_RATE_HZ 决定，假设configTICK_RATE_HZ为1000，那么时间片长度就是1ms</li></ul><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image3.png" alt=""></p><p>相同优先级的任务怎么切换呢？请看下图：</p><ul><li>任务2从t1执行到t2</li><li>在t2发生tick中断，进入tick中断处理函数： <ul><li>选择下一个要运行的任务</li><li>执行完中断处理函数后，切换到新的任务：任务1</li></ul></li><li>任务1从t2执行到t3</li><li>从图中可以看出，任务运行的时间并不是严格从t1,t2,t3那里开始</li></ul><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image4.png" alt=""></p><p>有了Tick的概念后，我们就可以使用Tick来衡量时间了，比如：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>vTaskDelay(2);  // 等待2个Tick，假设configTICK_RATE_HZ=100, Tick周期时10ms, 等待20ms
// 还可以使用pdMS_TO_TICKS宏把ms转换为tick
vTaskDelay(pdMS_TO_TICKS(100));	 // 等待100ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，基于Tick实现的延时并不精确，比如 <strong>vTaskDelay(2)</strong> 的本意是延迟2个Tick周期，有可能经过1个Tick多一点就返回了。</p><p>如下图：</p><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image5.png" alt=""></p><p>使用vTaskDelay函数时，建议以ms为单位，使用pdMS_TO_TICKS把时间转换为Tick。</p><p>这样的代码就与configTICK_RATE_HZ无关，即使配置项configTICK_RATE_HZ改变了，我们也不用去修改代码。</p><h3 id="_8-6-3-修改优先级" tabindex="-1"><a class="header-anchor" href="#_8-6-3-修改优先级" aria-hidden="true">#</a> 8.6.3 修改优先级</h3><p>使用uxTaskPriorityGet来获得任务的优先级：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用参数xTask来指定任务，设置为NULL表示获取自己的优先级。</p><p>使用vTaskPrioritySet 来设置任务的优先级：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>void vTaskPrioritySet( TaskHandle_t xTask,
            UBaseType_t uxNewPriority );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用参数xTask来指定任务，设置为NULL表示设置自己的优先级； 参数uxNewPriority表示新的优先级，取值范围是0~(configMAX_PRIORITIES – 1)。</p><h2 id="_8-7-示例4-优先级与阻塞" tabindex="-1"><a class="header-anchor" href="#_8-7-示例4-优先级与阻塞" aria-hidden="true">#</a> 8.7 示例4: 优先级与阻塞</h2><p>代码为：0804_task_priority</p><p>本程序会：提高音乐播放任务的优先级，使用vTaskDelay进行延时。</p><p>0804_task_priority跟0803_delete_task的代码几乎相同，仅有如下差别：</p><p>① applications\\irda_app.c中，创建音乐任务时，使用优先级2</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>ret = xTaskCreate(PlayMusic, &quot;SoundTask&quot;, 128, NULL, 2, &amp;xSoundTaskHandle);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② applications\\music_app.c中，MUSIC_Analysis函数里使用vTaskDelay进行延时：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>//R_BSP_SoftwareDelay(MusicSpeed/Music_Lone_Brave[i][2], BSP_DELAY_UNITS_MILLISECONDS);
vTaskDelay(pdMS_TO_TICKS(MusicSpeed/Music_Lone_Brave[i][2]));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当音乐任务要运行时，因为它的优先级最高，它能马上就运行，音乐播放效果不再卡顿。在MUSIC_Analysis函数里设置PWM频率后，它使用vTaskDelay进行延时：这会导致音乐任务阻塞、放弃CPU资源，其他低优先级的任务才能运行。如果不使用vTaskDelay，而是继续使用原来的R_BSP_SoftwareDelay进行延时，那么其他低优先级的任务比如LED任务、IRDA任务无法运行，LED就不会闪烁、使用红外遥控器也无法控制音乐任务。</p><h2 id="_8-8-任务状态" tabindex="-1"><a class="header-anchor" href="#_8-8-任务状态" aria-hidden="true">#</a> 8.8 任务状态</h2><p>以前我们很简单地把任务的状态分为2中：运行(Runing)、非运行(Not Running)。</p><p>对于非运行的状态，还可以继续细分，比如前面的0804_task_priority中：</p><p>● 音乐任务执行vTaskDelay后：处于非运行状态，要过500毫秒才能再次运行 ● 音乐任务运行期间，LED任务、IRDA任务也处于非运行状态，但是它们 <strong>随时可以运行</strong> ● &quot;非运行&quot;状态有三种，可以细分为：</p><ul><li>阻塞状态(Blocked)</li><li>暂停状态(Suspended)</li><li>就绪状态(Ready)</li></ul><h3 id="_8-8-1-阻塞状态-blocked" tabindex="-1"><a class="header-anchor" href="#_8-8-1-阻塞状态-blocked" aria-hidden="true">#</a> 8.8.1 阻塞状态(Blocked)</h3><p>在日常生活的例子中，母亲在电脑前跟同事沟通时，如果同事一直没回复，那么母亲的工作就被卡住了、被堵住了、处于阻塞状态(Blocked)。重点在于：母亲在 <strong>等待</strong>。</p><p>在0804_task_priority实验中，如果把音乐任务中的vTaskDelay调用注释掉，那么LED任务、IRDA任务根本没有执行的机会，LED任务、IRDA任务&quot;饿死&quot;了(starve)。</p><p>在实际产品中，我们不会让一个任务一直运行，而是使用&quot;事件驱动&quot;的方法让它运行：</p><ul><li>任务要等待某个事件，事件发生后它才能运行</li><li>在等待事件过程中，它不消耗CPU资源</li><li>在等待事件的过程中，这个任务就处于阻塞状态(Blocked)</li></ul><p>在阻塞状态的任务，它可以等待两种类型的事件：</p><ul><li>时间相关的事件 <ul><li>可以等待一段时间：我等2分钟</li><li>也可以一直等待，直到某个绝对时间：我等到下午3点</li></ul></li><li>同步事件：这事件由别的任务，或者是中断程序产生 <ul><li>例子1：任务A等待任务B给它发送数据</li><li>例子2：任务A等待用户按下按键</li><li>同步事件的来源有很多(这些概念在后面会细讲)： <ul><li>队列(queue)</li><li>二进制信号量(binary semaphores)</li><li>计数信号量(counting semaphores)</li><li>互斥量(mutexes)</li><li>递归互斥量、递归锁(recursive mutexes)</li><li>事件组(event groups)</li><li>任务通知(task notifications)</li></ul></li></ul></li></ul><p>在等待一个同步事件时，可以加上超时时间。比如等待队里数据，超时时间设为10ms：</p><ul><li>10ms之内有数据到来：成功返回</li><li>10ms到了，还是没有数据：超时返回</li></ul><h3 id="_8-8-2-暂停状态-suspended" tabindex="-1"><a class="header-anchor" href="#_8-8-2-暂停状态-suspended" aria-hidden="true">#</a> 8.8.2 暂停状态(Suspended)</h3><p>在日常生活的例子中，母亲正在电脑前跟同事沟通，母亲可以暂停：</p><ul><li>好烦啊，我暂停一会</li><li>领导说：你暂停一下</li></ul><p>FreeRTOS中的任务也可以进入暂停状态，唯一的方法是通过vTaskSuspend函数。函数原型如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>void vTaskSuspend( TaskHandle_t xTaskToSuspend );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数xTaskToSuspend表示要暂停的任务，如果为NULL，表示暂停自己。</p><p>要退出暂停状态，只能由 <strong>别人</strong> 来操作：</p><ul><li>别的任务调用：vTaskResume</li><li>中断程序调用：xTaskResumeFromISR</li></ul><p>实际开发中，暂停状态用得不多。</p><h3 id="_8-8-3-就绪状态-ready" tabindex="-1"><a class="header-anchor" href="#_8-8-3-就绪状态-ready" aria-hidden="true">#</a> 8.8.3 就绪状态(Ready)</h3><p>这个任务完全准备好了，随时可以运行：只是还轮不到它。这时，它就处于就绪态(Ready)。</p><h3 id="_8-8-4-完整的状态转换图" tabindex="-1"><a class="header-anchor" href="#_8-8-4-完整的状态转换图" aria-hidden="true">#</a> 8.8.4 完整的状态转换图</h3><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image6.png" alt=""></p><h2 id="_8-9-示例5-任务暂停" tabindex="-1"><a class="header-anchor" href="#_8-9-示例5-任务暂停" aria-hidden="true">#</a> 8.9 示例5: 任务暂停</h2><p>代码为：0805_task_suspend</p><p>本程序会：使用vTaskSuspend暂停音乐播放任务，使用vTaskResume恢复它，实现音乐的暂停播放、继续播放功能。</p><p>0805_task_suspend的关键代码在\\applications\\irda_app.c中，关键代码如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 读取红外遥控器 */</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">==</span> pIRDA<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pIRDA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> IR_KEY_PLAY<span class="token punctuation">)</span> <span class="token comment">/* play */</span>
             <span class="token punctuation">{</span>
                 <span class="token comment">/* 创建播放音乐的任务 */</span>
                 <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>xSoundTaskHandle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                 <span class="token punctuation">{</span>
                     <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Create Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>PlayMusic<span class="token punctuation">,</span> <span class="token string">&quot;SoundTask&quot;</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     bRunning <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
                 <span class="token keyword">else</span>
                 <span class="token punctuation">{</span>
                   <span class="token comment">/* 要么suspend要么resume */</span>
                   <span class="token keyword">if</span> <span class="token punctuation">(</span>bRunning<span class="token punctuation">)</span>
                   <span class="token punctuation">{</span>
                       <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Suspend Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">vTaskSuspend</span><span class="token punctuation">(</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">PassiveBuzzer_Control</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 停止蜂鸣器 */</span>
                       bRunning <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                   <span class="token keyword">else</span>
                   <span class="token punctuation">{</span>
                       <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Resume Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token function">vTaskResume</span><span class="token punctuation">(</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       bRunning <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                   <span class="token punctuation">}</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>

             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> IR_KEY_POWER<span class="token punctuation">)</span> <span class="token comment">/* power */</span>
             <span class="token punctuation">{</span>
                 <span class="token comment">/* 删除播放音乐的任务 */</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>xSoundTaskHandle <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                 <span class="token punctuation">{</span>
                     <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Delete Task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">vTaskDelete</span><span class="token punctuation">(</span>xSoundTaskHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token function">PassiveBuzzer_Control</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 停止蜂鸣器 */</span>
                     xSoundTaskHandle <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                     bRunning <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第1次按下红外遥控器的播放按钮时，执行第15行的代码来创建音乐任务。</p><p>后续按下红外遥控器的播放按钮时，要么使用第26行的代码来暂停音乐任务，要么使用第35行的代码来恢复音乐任务。</p><p>按下红外遥控器的电源按钮时，执行第49行的代码来删除音乐任务。</p><h2 id="_8-10-delay函数" tabindex="-1"><a class="header-anchor" href="#_8-10-delay函数" aria-hidden="true">#</a> 8.10 Delay函数</h2><p>有两个Delay函数：</p><ul><li>vTaskDelay：至少等待指定个数的Tick后，任务才能变为就绪状态</li><li>vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。</li></ul><p>这2个函数原型如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>void vTaskDelay( const TickType_t xTicksToDelay ); /* xTicksToDelay: 等待多少给Tick */

/* pxPreviousWakeTime: 上一次被唤醒的时间
 * xTimeIncrement: 要阻塞到(pxPreviousWakeTime + xTimeIncrement)
 * 单位都是Tick Count
 */
BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                            const TickType_t xTimeIncrement );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面画图说明：</p><p>● 使用vTaskDelay(n)时，进入、退出vTaskDelay的时间间隔至少是n个Tick中断</p><p>● 使用xTaskDelayUntil(&amp;Pre, n)时，退出xTaskDelayUntil的时刻是“Pre+n”，其中的Pre是上次调用xTaskDelayUntil时设置的。即xTaskDelayUntil使得前后2次退出xTaskDelayUntil的时间差是n个tick：</p><p>■ 退出xTaskDelayUntil时任务就进入的就绪状态，一般都能得到执行机会</p><p>■ 所以可以使用xTaskDelayUntil来让任务周期性地运行</p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image7.png" style="zoom:65%;"><h2 id="_8-11-示例6-delay函数实验" tabindex="-1"><a class="header-anchor" href="#_8-11-示例6-delay函数实验" aria-hidden="true">#</a> 8.11 示例6: Delay函数实验</h2><p>本节代码为：0806_taskdelay，它是在0802_create_task_use_params的基础上修改得来。</p><p>本程序会比较vTaskDelay和vTaskDelayUntil实际阻塞的时间，并在LCD上打印出来。</p><p>代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">lcd_thread_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
     <span class="token keyword">struct</span> <span class="token class-name">TaskPrintInfo</span> <span class="token operator">*</span>pInfo <span class="token operator">=</span> params<span class="token punctuation">;</span>
     <span class="token class-name">uint32_t</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">int</span> len<span class="token punctuation">;</span>
     <span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> t0<span class="token punctuation">,</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>
     BaseType_t preTime<span class="token punctuation">;</span>

     preTime <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 在LCD上显示文字 */</span>
         len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span>pInfo<span class="token operator">-&gt;</span>x<span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
         len <span class="token operator">+=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         len <span class="token operator">+=</span> <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
         t0 <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         t1 <span class="token operator">=</span> t2<span class="token punctuation">;</span>
         t2 <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
         t0 <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">vTaskDelayUntil</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>preTime<span class="token punctuation">,</span> <span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         t1 <span class="token operator">=</span> t2<span class="token punctuation">;</span>
         t2 <span class="token operator">=</span> <span class="token function">system_get_us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

         len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;Delay time(ms): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         len <span class="token operator">+=</span> <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t2<span class="token operator">-</span>t0<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;Exit time Between 2 Delay(ms): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         len <span class="token operator">+=</span> <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">LCD_ClearLine</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> pInfo<span class="token operator">-&gt;</span>y<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第18行，让当次while循环执行的时间增加一个扰动。</p><p>做实验时，可以修改第19行，把“#if 0”改为“#if 1”，那么第20~23的t0、t1、t2被设置后，“t2-t0”就是第21行vTaskDelay函数执行的时间，“t2-t1”就是前后两次while循环的间隔（第21行vTaskDelay退出时的时间差）。LCD上的结果如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>Task1: 1
Delay time(ms): 1000  /* 无变化 */
Exit time Between 2 Delay(ms): 1790  /* 有变化 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用vTaskDelay时，它阻塞指定时间；每次while循环执行多长时间，与它无关。</p><p>还可以修改保持第19行为“#if 0”，那么第25~28的t0、t1、t2被设置后，“t2-t0”就是第26行vTaskDelayUtil函数执行的时间，“t2-t1”就是前后两次while循环的间隔（第21行vTaskDelayUtil退出时的时间差）。LCD上的结果如下：</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>Task1: 123
Delay time(ms): 201  /* 有变化 */
Exit time Between 2 Delay(ms): 1000  /* 无变化 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用vTaskDelayUtil时，它阻塞的时间是变化的；这次while循环执行时间长了，那么vTaskDelayUtil阻塞的时间就少一点，它保证前后两次while循环的间隔一致。</p><h2 id="_8-12-空闲任务及其钩子函数" tabindex="-1"><a class="header-anchor" href="#_8-12-空闲任务及其钩子函数" aria-hidden="true">#</a> 8.12 空闲任务及其钩子函数</h2><h3 id="_8-12-1-介绍" tabindex="-1"><a class="header-anchor" href="#_8-12-1-介绍" aria-hidden="true">#</a> 8.12.1 介绍</h3><p>空闲任务(Idle任务)的作用之一：释放被删除的任务的内存。</p><p>除了上述目的之外，为什么必须要有空闲任务？一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运行的任务：所以，我们要提供空闲任务。在使用 <strong>vTaskStartScheduler()</strong> 函数来创建、启动调度器时，这个函数内部会创建空闲任务：</p><ul><li>空闲任务优先级为0：它不能阻碍用户任务运行</li><li>空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞</li></ul><p>空闲任务的优先级为0，这意味着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务&quot;抢占&quot;(pre-empt)了空闲任务，这是由调度器实现的。</p><p>要注意的是：如果使用 <strong>vTaskDelete()</strong> 来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存。</p><p>我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环每执行一次，就会调用一次钩子函数。钩子函数的作用有这些：</p><ul><li>执行一些低优先级的、后台的、需要连续执行的函数</li><li>测量系统的空闲时间：空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。</li><li>让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式了。</li><li>空闲任务的钩子函数的限制：</li><li>不能导致空闲任务进入阻塞状态、暂停状态</li><li>如果你会使用*vTaskDelete()*来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植卡在钩子函数里的话，它就无法释放内存。</li></ul><h3 id="_8-12-2-使用钩子函数的前提" tabindex="-1"><a class="header-anchor" href="#_8-12-2-使用钩子函数的前提" aria-hidden="true">#</a> 8.12.2 使用钩子函数的前提</h3><p>在 <strong>FreeRTOS\\Source\\tasks.c</strong> 中，可以看到如下代码，所以前提就是：</p><ul><li>把这个宏定义为1：configUSE_IDLE_HOOK</li><li>实现 <strong>vApplicationIdleHook</strong> 函数</li></ul><p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image8.png" alt=""></p><h2 id="_8-13-示例7-空闲任务实验" tabindex="-1"><a class="header-anchor" href="#_8-13-示例7-空闲任务实验" aria-hidden="true">#</a> 8.13 示例7: 空闲任务实验</h2><p>本节代码为：0807_idle_task，它是在0805_task_suspend的基础上修改得来。</p><p>本程序里，IRDA任务接收到红外遥控器的Play按键后，会创建LED任务；而LED任务执行一会就自杀。IRDA任务的优先级是1，高于空闲任务的优先级0，如果IRDA程序一直不阻塞，那么空闲任务无法执行，无法回收自杀的LED任务的内存，最后会导致：无法创建LED任务。</p><p>关键代码在“applications\\irda_app.c”中，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 读取红外遥控器 */</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">==</span> pIRDA<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pIRDA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
              <span class="token punctuation">{</span>
                      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> IR_KEY_PLAY<span class="token punctuation">)</span> <span class="token comment">/* play */</span>
                      <span class="token punctuation">{</span>
                              len <span class="token operator">=</span> <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">&quot;count = &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token function">LCD_PrintSignedVal</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                             <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                              <span class="token comment">/* 创建LED任务 */</span>
                              <span class="token keyword">void</span> <span class="token function">led_thread_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
                              ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>led_thread_entry<span class="token punctuation">,</span> <span class="token string">&quot;LEDTask&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> pdPASS<span class="token punctuation">)</span>
                                      <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;Create Task ok &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token keyword">else</span>
                                      <span class="token function">LCD_PrintString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;Create Task err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                              <span class="token function">LCD_Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
              <span class="token comment">// vTaskDelay(1);</span>
      <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收到遥控器的Play按键后，第14行会创建LED任务。可以多次按下Play键，创建多个LED任务。</p><p>如果第22行的代码被注释掉，当前的IRDA任务与LED任务轮流运行，空闲任务没有机会运行。多次创建LED任务后，最后因为堆耗尽而无法创建更多LED任务。</p><p>如果第22行的代码启用了，在IRDA阻塞期间空闲任务就有机会运行，进而回收自杀的LED任务的内存。这样，以后就可以再次使用Play按键来创建LED任务了。</p><h2 id="_8-14-调度算法" tabindex="-1"><a class="header-anchor" href="#_8-14-调度算法" aria-hidden="true">#</a> 8.14 调度算法</h2><h3 id="_8-14-1-重要概念" tabindex="-1"><a class="header-anchor" href="#_8-14-1-重要概念" aria-hidden="true">#</a> 8.14.1 重要概念</h3><p>这些知识在前面都提到过了，这里总结一下。</p><p>正在运行的任务，被称为&quot;正在使用处理器&quot;，它处于运行状态。在单处理器系统中，任何时间里只能有一个任务处于运行状态。</p><p>非运行状态的任务，它处于这3中状态之一：阻塞(Blocked)、暂停(Suspended)、就绪(Ready)。就绪态的任务，可以被调度器挑选出来切换为运行状态，调度器永远都是挑选最高优先级的就绪态任务并让它进入运行状态。</p><p>阻塞状态的任务，它在等待&quot;事件&quot;，当事件发生时任务就会进入就绪状态。事件分为两类：时间相关的事件、同步事件。所谓时间相关的事件，就是设置超时时间：在指定时间内阻塞，时间到了就进入就绪状态。使用时间相关的事件，可以实现周期性的功能、可以实现超时功能。同步事件就是：某个任务在等待某些信息，别的任务或者中断服务程序会给它发送信息。怎么&quot;发送信息&quot;？方法很多，有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)等。这些方法用来发送同步信息，比如表示某个外设得到了数据。</p><h3 id="_8-14-2-配置调度算法" tabindex="-1"><a class="header-anchor" href="#_8-14-2-配置调度算法" aria-hidden="true">#</a> 8.14.2 配置调度算法</h3><p>所谓调度算法，就是怎么确定哪个就绪态的任务可以切换为运行状态。</p><p>通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING。</p><p>还有第三个配置项：configUSE_TICKLESS_IDLE，它是一个高级选项，用于关闭Tick中断来实现省电。现在我们假设configUSE_TICKLESS_IDLE被设为0，先不使用这个功能。</p><p>调度算法的行为主要体现在两方面：高优先级的任务先运行、同优先级的就绪态任务如何被选中。调度算法要确保同优先级的就绪态任务，能&quot;轮流&quot;运行，策略是&quot;轮转调度&quot;(Round Robin Scheduling)。轮转调度并不保证任务的运行时间是公平分配的，我们还可以细化时间的分配方法。</p><p>从3个角度统一理解多种调度算法：</p><p>● 可否抢占？高优先级的任务能否优先执行(配置项: configUSE_PREEMPTION) ■ 可以：被称作&quot;可抢占调度&quot;(Pre-emptive)，高优先级的就绪任务马上执行，下面再细化。 ■ 不可以：不能抢就只能协商了，被称作&quot;合作调度模式&quot;(Co-operative Scheduling)。当前任务执行时，更高优先级的任务就绪了也不能马上运行，只能等待当前任务主动让出CPU资源。其他同优先级的任务也只能等待：更高优先级的任务都不能抢占，平级的更应该老实点 ● 可抢占的前提下，同优先级的任务是否轮流执行(配置项：configUSE_TIME_SLICING) ■ 轮流执行：被称为&quot;时间片轮转&quot;(Time Slicing)，同优先级的任务轮流执行，你执行一个时间片、我再执行一个时间片 ■ 不轮流执行：英文为&quot;without Time Slicing&quot;，当前任务会一直执行，直到主动放弃、或者被高优先级任务抢占 ● 在&quot;可抢占&quot;+&quot;时间片轮转&quot;的前提下，进一步细化：空闲任务是否礼让用户任务(配置项：configIDLE_SHOULD_YIELD)： ■ 空闲任务低人一等，每执行一次循环，就看看是否主动让位给用户任务 ■ 空闲任务跟用户任务一样，大家轮流执行，没有谁更特殊</p><p>列表如下：</p><table><thead><tr><th><strong>配置项</strong></th><th><strong>A</strong></th><th><strong>B</strong></th><th><strong>C</strong></th><th><strong>D</strong></th><th><strong>E</strong></th></tr></thead><tbody><tr><td>configUSE_PREEMPTION</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>configUSE_TIME_SLICING</td><td>1</td><td>1</td><td>0</td><td>0</td><td>x</td></tr><tr><td>configIDLE_SHOULD_YIELD</td><td>1</td><td>0</td><td>1</td><td>0</td><td>x</td></tr><tr><td>说明</td><td>常用</td><td>很少用</td><td>很少用</td><td>很少用</td><td>几乎不用</td></tr></tbody></table><p>注：</p><p>① A：可抢占+时间片轮转+空闲任务让步 ② B：可抢占+时间片轮转+空闲任务不让步 ③ C：可抢占+非时间片轮转+空闲任务让步 ④ D：可抢占+非时间片轮转+空闲任务不让步 ⑤ E：合作调度</p><p>我们可以在RASC里配置调度算法，上述三个宏在如下界面里有对应的项：</p><img src="https://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/FreeRTOS/chapter-8/image9.png" style="zoom:75%;"><h3 id="_8-14-3-内部机制" tabindex="-1"><a class="header-anchor" href="#_8-14-3-内部机制" aria-hidden="true">#</a> 8.14.3 内部机制</h3>`,216),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","chapter8.html.vue"]]);export{r as default};
