import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第8章-sci-spi" tabindex="-1"><a class="header-anchor" href="#第8章-sci-spi" aria-hidden="true">#</a> 第8章 SCI SPI</h1><p>本章目标</p><ul><li>使用RASC快速配置SCI的SPI模式</li><li>学会使用SCI-SPI的API进行数据收发</li></ul><h2 id="_8-1-sci-spi模块的使用" tabindex="-1"><a class="header-anchor" href="#_8-1-sci-spi模块的使用" aria-hidden="true">#</a> 8.1 sci spi模块的使用</h2><h3 id="_8-1-1-配置sci-spi模块" tabindex="-1"><a class="header-anchor" href="#_8-1-1-配置sci-spi模块" aria-hidden="true">#</a> 8.1.1 配置sci spi模块</h3><p>本章配置的SPI是RA芯片里SCI模块中的一种模式，因而其配置方法和上一章的SCI中的UART模式配置十分的类似。</p><p>本节实验没有和其它外设相连，因而可以选择任意SCI通道：把它设置为“Simple SPI”模式，并使用其默认引脚即可。在RASC中创建了工程后，在“Pins”里面的“Peripherals”中展开“Connectivity:SCI”，选择其中一个SCI通道，例如SCI5，在“Pin Configuration”配置界面里的“Operation Mode”中将操作模式选为“Simple SPI”，如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image1.png" alt=""></p><p>随后根据硬件设计来选择时钟和数据收发的引脚。</p><p>接着在“Stacks”中添加SCI SPI的堆栈模块，点击进入“Stacks”配置界面后，点击“New Stack”，展开里面的“Connectivity”，选择“SPI(r_sci_spi)”，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image2.png" alt=""></p><p>这里一定要注意，RA的SPI分为“Simple SPI”和“SPI”,“Simple SPI”是SCI的模式之一，而“SPI”是一个实际存在的SPI硬件控制器。本章的实验是基于SCI的SPI，因而选择的是“SPI(r_sci_spi)”。</p><p>完成这些操作后，会在“Stacks”配置界面的“HAL/Common Stacks”中新增一个“g_spi0 SPI(r_sci_spi)”模块，接下来就要根据实际情况配置这个模块的属性。比如在前面选择的是SCI的SPI5，而此处新增的模块默认名称是“g_spi0”且默认的通道是0，为了和实际通道匹配，就要去这个模块的属性中更改名称及其通道，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image3.png" alt=""></p><p>当这里选定好“Channel”后，下方的“Pins”里面的内容就会自动更新为前面操作的引脚。</p><p>对于属性中的“Callback”，它中断回调函数，函数的命名有两种方法：</p><ol><li>不同的外设使用不同的回调函数；</li><li>同一类的外设使用相同的回调函数，根据参数内容做不同的处理；</li></ol><p>对于初学者，建议使用第一种方法；而对于有经验的工程师，为了减小程序代码开销，建议使用第二种方法。本书使用第一种方法，将此SCI SPI的中断回调函数名称和它的通道相匹配，改为“sci_spi5_callback”，如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image4.png"><p>而对于SCI SPI的其它参数，需要根据实际通信的外设来设置，看一下在RASC中这些参数的信息：</p><ul><li><p>Operating Mode：SPI的操作模式，SPI有两种模式分别是主机模式和从机模式，对应于此处的“Master”和“Slave”；</p></li><li><p>Clock Phase：时钟相位设置，决定SPI的数据是在时钟的上升沿还是下降沿采样，在上升沿还是下降沿保持，根据SPI通信的外设要求决定；</p></li><li><p>Clock Polarity：时钟优先状态，即在SPI通信空闲时，时钟保持高电平还是低电平；</p></li><li><p>Bit Order：数据传输方向，有两种选择分别是高位在前和低位在前，同样根据SPI通信的外设要求决定；</p></li><li><p>Bitrate：通信速率，这个速率要根据主机支持的SCI SPI最大通信速率和从机支持的SPI最大通信速率来共同决定，取两者的较小值；</p></li></ul><p>将模块属性中的参数设置好之后点击“Generate Project Content”生成代码，可以在RASC的“Summary”界面的“Location”处快速打开工程所在目录来打开工程，如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image5.png" alt=""></p><h3 id="_8-1-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_8-1-2-配置信息解读" aria-hidden="true">#</a> 8.1.2 配置信息解读</h3><p>使用RASC配置SCI SPI后，生成了引脚配置信息和SCI SPI本身的配置信息。以本章的第一个实验“0801_sci_spi_loopback”回环收发实验为例。</p><ol><li>引脚配置信息</li></ol><p>该信息会在0801_sci_spi_loopback\\ra_gen\\pin_data.c文件里生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_01_PIN_08<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN <span class="token operator">+</span>
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_DEBUG<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_00<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
              <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_DEBUG<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_05_PIN_01<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SCI1_3_5_7_9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_05_PIN_02<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SCI1_3_5_7_9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_05_PIN_03<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SCI1_3_5_7_9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第10~21行就是配置SCI的SPI5的引脚P501/P502/P503，将他们配置为SCI通道1、3、5、7、9的外设引脚。</li></ul><ol start="2"><li>SCI SPI配置信息</li></ol><p>该信息会在0801_sci_spi_loopback\\ra_gen\\hal_data.c文件里生成。在RASC里指定了SPI使用哪个SCI通道、指定了它的通道、时钟特性、数据传输方向和中断回调函数注册等信息，这些配置信息都被放入一个spi_cfg_t结构体，部分代码摘录如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">spi_cfg_t</span> g_spi5_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>channel         <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>operating_mode  <span class="token operator">=</span> SPI_MODE_MASTER<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>clk_phase       <span class="token operator">=</span> SPI_CLK_PHASE_EDGE_ODD<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>clk_polarity    <span class="token operator">=</span> SPI_CLK_POLARITY_LOW<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mode_fault      <span class="token operator">=</span> SPI_MODE_FAULT_ERROR_DISABLE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bit_order       <span class="token operator">=</span> SPI_BIT_ORDER_MSB_FIRST<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>p_callback      <span class="token operator">=</span> sci_spi5_callback<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第3行：指定使用的sci通道；</li><li>第4~8行：设置SPI的通信参数；</li><li>第10行：注册SPI的中断回调函数；</li></ul><h3 id="_8-1-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_8-1-3-中断回调函数" aria-hidden="true">#</a> 8.1.3 中断回调函数</h3><p>中断回调函数的原型已经在hal_data.h中进行了声明，需要用户在自己的程序中实现，其原型代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Called by the driver when a transfer has completed or an error has occurred (Must be implemented by the user). */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">sci_spi5_callback</span></span>
<span class="token keyword">void</span> <span class="token function">sci_spi5_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的参数类型是一个spi_callback_args_t结构体指针，这个结构体的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Common callback parameter definition */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>     channel<span class="token punctuation">;</span>              <span class="token comment">///&lt; Device channel number</span>
    <span class="token class-name">spi_event_t</span>  event<span class="token punctuation">;</span>                <span class="token comment">///&lt; Event code</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>            <span class="token comment">///&lt; Context provided to user during callback</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体会表明触发此中断的是哪一个sci通道，是什么事件触发的，而触发的内容在sci中是没有使用到的。</p><p>触发中断的事件由枚举类型spi_event_t指明，这个枚举的内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** SPI events */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_spi_event</span>
<span class="token punctuation">{</span>
    SPI_EVENT_TRANSFER_COMPLETE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; The data transfer was completed</span>
    SPI_EVENT_TRANSFER_ABORTED<span class="token punctuation">,</span>        <span class="token comment">///&lt; The data transfer was aborted</span>
    SPI_EVENT_ERR_MODE_FAULT<span class="token punctuation">,</span>          <span class="token comment">///&lt; Mode fault error</span>
    SPI_EVENT_ERR_READ_OVERFLOW<span class="token punctuation">,</span>       <span class="token comment">///&lt; Read overflow error</span>
    SPI_EVENT_ERR_PARITY<span class="token punctuation">,</span>              <span class="token comment">///&lt; Parity error</span>
    SPI_EVENT_ERR_OVERRUN<span class="token punctuation">,</span>             <span class="token comment">///&lt; Overrun error</span>
    SPI_EVENT_ERR_FRAMING<span class="token punctuation">,</span>             <span class="token comment">///&lt; Framing error</span>
    SPI_EVENT_ERR_MODE_UNDERRUN        <span class="token comment">///&lt; Underrun error</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包括了SPI发送完成中断事件、发送暂停事件和其它错误事件。用户就可以根据传参进来的事件进行对应的处理。例如在spi5的中断回调函数中，可以如下设置“发送完成标志”：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sci_spi5_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>SPI_EVENT_TRANSFER_COMPLETE <span class="token operator">==</span> arg<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
        sci_spi5_tx_cplt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第3行：判断事件是否为SPI发送完成事件；</p></li><li><p>第4行：如果是发送完成触发的中断，则将发送完成标志位置1；</p></li></ul><h3 id="_8-1-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_8-1-4-api接口及其用法" aria-hidden="true">#</a> 8.1.4 API接口及其用法</h3><p>在0801_sci_spi_loopback\\ra\\fsp\\inc\\api\\r_spi_api.h中定义了spi模块的接口，它定义了一个结构体类型spi_api_t，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Shared Interface definition for SPI */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                       <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                        <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> writeRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                            <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                            <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span> 
                            <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span>
                               <span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体的C文件中，需要实现一个sci_api_t结构体变量，比如在r_sci_spi.c里实现了如下结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">spi_api_t</span> g_spi_on_sci <span class="token operator">=</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span>open     <span class="token operator">=</span> R_SCI_SPI_Open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read     <span class="token operator">=</span> R_SCI_SPI_Read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write    <span class="token operator">=</span> R_SCI_SPI_Write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>writeRead  <span class="token operator">=</span> R_SCI_SPI_WriteRead<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>close    <span class="token operator">=</span> R_SCI_SPI_Close<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>callbackSet <span class="token operator">=</span> R_SCI_SPI_CallbackSet
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用SCI SPI收发数据时，可以调用结构体g_spi_on_sci里的各个函数指针，也可以直接调用r_sci_spi.c里实现的各个函数（比如</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>R_SCI_SPI_Open、R_SCI_SPI_Read）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>打开SCI SPI设备</li></ol><p>此函数用于配置SCI的SPI，并且标记转态为“已经打开”。函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来看一下这个函数的参数：</p><p>a) p_ctrl：此参数是一个spi_ctrl_t结构体指针类型，该结构体本质上void类型，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token class-name">spi_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它可以指向任意类型的参数，在r_sci_spi.h里，这个参数实际的类型是sci_spi_instance_ctrl_t结构体，定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_sci_spi_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>          open<span class="token punctuation">;</span>
    <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>
    R_SCI0_Type     <span class="token operator">*</span> p_reg<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span>         <span class="token operator">*</span> p_src<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span>         <span class="token operator">*</span> p_dest<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span>          tx_count<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span>          rx_count<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span>          count<span class="token punctuation">;</span>

    <span class="token comment">/* Pointer to callback and optional working memory */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> p_callback_memory<span class="token punctuation">;</span>

    <span class="token comment">/* Pointer to context to be passed into callback function */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">sci_spi_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第3行：open表示SPI设备的状态，是关闭还是打开状态</li><li>第4行：SPI的配置信息，指定在SPI传输过程中类如发送中断、接受中断等的中断号、中断优先级和时钟特性等；</li><li>第5行：R_SCI0_Type结构体对应SCI的各个寄存器；</li><li>第6、7行：指向发送数据的首地址和接收数据保存到内存中的首地址；</li><li>都8、9行：当发送完一个字节或接收到一个字节的数据后，发送计数将会在中断中减1，而接收计数将会加1，直到发送计数为0或接收计数达到指定接收长度值，就会调用中断回调函数；</li><li>第13行：指向中断回调函数；</li><li>第14行：保存中断回调函数信息；</li><li>第17行：传递给中断回调函数的其他信息；</li></ul><p>b) p_cfg：此参数是spi_cfg_t结构体类型，该结构体就是上述第4行的内容，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> channel<span class="token punctuation">;</span>                                   <span class="token comment">///&lt; Channel number to be used</span>

    IRQn_Type                   rxi_irq<span class="token punctuation">;</span>         <span class="token comment">///&lt; Receive Buffer Full IRQ number</span>
    IRQn_Type                   txi_irq<span class="token punctuation">;</span>       <span class="token comment">///&lt; Transmit Buffer Empty IRQ number</span>
    IRQn_Type                   tei_irq<span class="token punctuation">;</span>          <span class="token comment">///&lt; Transfer Complete IRQ number</span>
    IRQn_Type                   eri_irq<span class="token punctuation">;</span>               <span class="token comment">///&lt; Error IRQ number</span>
    <span class="token class-name">uint8_t</span>                     rxi_ipl<span class="token punctuation">;</span>             <span class="token comment">///&lt; Receive Interrupt priority</span>
    <span class="token class-name">uint8_t</span>                     txi_ipl<span class="token punctuation">;</span>            <span class="token comment">///&lt; Transmit Interrupt priority</span>
    <span class="token class-name">uint8_t</span>                     tei_ipl<span class="token punctuation">;</span>   <span class="token comment">///&lt; Transfer Complete Interrupt priority</span>
    <span class="token class-name">uint8_t</span>                     eri_ipl<span class="token punctuation">;</span>       <span class="token comment">///&lt; Error Interrupt priority</span>
    <span class="token class-name">spi_mode_t</span>           operating_mode<span class="token punctuation">;</span>   <span class="token comment">///&lt; Select master or slave operating mode</span>
    <span class="token class-name">spi_clk_phase_t</span>      clk_phase<span class="token punctuation">;</span>      <span class="token comment">///&lt; Data sampling on odd or even clock edge</span>
    <span class="token class-name">spi_clk_polarity_t</span>          clk_polarity<span class="token punctuation">;</span>          <span class="token comment">///&lt; Clock level when idle</span>
    <span class="token class-name">spi_mode_fault_t</span>     mode_fault<span class="token punctuation">;</span><span class="token comment">///&lt; Mode fault error (master/slave conflict) flag</span>
    <span class="token class-name">spi_bit_order_t</span>         bit_order<span class="token punctuation">;</span>         <span class="token comment">///&lt; Select to transmit MSB/LSB first</span>
    <span class="token class-name">transfer_instance_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_transfer_tx<span class="token punctuation">;</span>         <span class="token comment">///&lt; To use SPI DTC/DMA write transfer, link a DTC/DMA instance here.  Set to NULL if unused.</span>
    <span class="token class-name">transfer_instance_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_transfer_rx<span class="token punctuation">;</span>         <span class="token comment">///&lt; To use SPI DTC/DMA read transfer, link a DTC/DMA instance here.  Set to NULL if unused.</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">///&lt; Pointer to user callback function</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>      <span class="token comment">///&lt; User defined context passed to callback function</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_extend<span class="token punctuation">;</span>   <span class="token comment">///&lt; Extended SPI hardware dependent configuration</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些参数在使用RASC配置后，自动生成对应的配置信息代码。</p><p>开发者可以在自己的代码中调用open函数来实现对sci spi设备的初始化，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">drv_sci_spi_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_spi5<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭SCI SPI设备</li></ol><p>SCI SPI设备的close函数，会将SPI设备的状态标志open设置为0，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数的参数就是一个spi_crl_t结构体类型的参数。开发者可以参考以下代码来关闭指定的spi设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">drv_sci_spi_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to close device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to close device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用SCI SPI发送指定长度的数据</li></ol><p>SCI SPI的发送函数write适用于半双工或单工通信场景，其原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                    <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                    <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下它的参数：</p><ul><li>p_ctrl：spi_crl_t结构体类型参数，传入使用RASC生成的spi设备的全局结构体变量；</li><li>p_src：源数据（要发送的数据）地址；</li><li>length：要发送的数据个数；</li><li>bit_width：数据宽度，在SCI中一律设置为8Bit即，此位传入SPI_BIT_WIDTH_8_BITS；</li></ul><p>开发者可以参考如下代码来发送指定长度的数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">drv_sci_spi_write</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>pbuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    sci_spi5_tx_cplt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>pbuf<span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>size<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sci_spi5_tx_cplt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第3行和第5行是发送标志：发送前清零，如果发送完成会在中断回调函数中被置1。</p><ol start="4"><li>使用SCI SPI接收指定长度的数据</li></ol><p>SCI SPI的接收函数read适用于半双工或单工通信场景，其原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                   <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                   <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和发送及其相似，只不过p_dest是接收数据的缓冲区首地址，其数据宽度依然是8Bit。</p><p>开发者可以参考如下代码来接收指定长度的数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>pbuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>size<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>使用SCI SPI同时收发指定长度的数据</li></ol><p>在全双工模式下建议使用SCI SPI的同时收发函数writeRead，其原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> writeRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span> 
                        <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用此函数可以同时发送和接收相同长度的数据，数据宽度是8bit。开发者可以参考以下代码来实现同时收发：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">drv_sci_spi_writeRead</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>wbuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rbuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    sci_spi5_tx_cplt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">writeRead</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                           <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>wbuf<span class="token punctuation">,</span> 
                           <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rbuf<span class="token punctuation">,</span> 
                           <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>size<span class="token punctuation">,</span> 
                           SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sci_spi5_tx_cplt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-2-sci-spi回环收发实验" tabindex="-1"><a class="header-anchor" href="#_8-2-sci-spi回环收发实验" aria-hidden="true">#</a> 8.2 sci spi回环收发实验</h2><p>本节实验会用到UART的printf功能，请参考前文《7.3 stdio实验》配置实现printf功能。</p><h3 id="_8-2-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_8-2-1-硬件连接" aria-hidden="true">#</a> 8.2.1 硬件连接</h3><p>所谓回环收发就是自发自收，数据从MCU的MOSI直接发送给自身的MISO，因而在硬件上只需要将MOSI和MISO短接即可。例如本节实验0801_sci_spi_loopback使用到的SCI5，其发送引脚是P501，接收引脚是P502，做本实验将这两个脚短接即可，不用管SCK和CS引脚。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image6.png"><h3 id="_8-2-2-应用程序" tabindex="-1"><a class="header-anchor" href="#_8-2-2-应用程序" aria-hidden="true">#</a> 8.2.2 应用程序</h3><p>本实验工程将spi的驱动代码模块化，分为初始化函数、收发函数、中断回调函数和测试函数，spi的驱动函数都在drv_sci_spi.c中实现，在drv_sci_spi.h中声明，测试函数在app_spi.c中实现，在app.h中声明，以便后续移植使用。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image7.png" alt=""></p><ol><li>设备初始化</li></ol><p>函数：void SPIDrvInit(void)，实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SPIDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 打开设备 */</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_spi5<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 发送调试信息 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open device: spi5\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>中断回调函数</li></ol><p>中断回调函数已经在前文讲过许多次，这里直接展示其实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gSPITxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sci_spi5_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 判断是否是发送完成触发的中断 */</span>
    <span class="token comment">/* 如果是的话就将发送完成标志位置1 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>SPI_EVENT_TRANSFER_COMPLETE <span class="token operator">==</span> arg<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
        gSPITxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送完成标志是一个静态的全局变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gSPITxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会在中断回调函数中被修改，使用了关键字volatile修饰。</p><ol start="3"><li>收发完成等待函数</li></ol><p>每次收发通信的时候，需要根据收发状态标志来判断是否通信完成，因而将这一个判断动作封装成一个超时等待函数：void SPIDrvWaitTxCplt(void)，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SPIDrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> wTimeout <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gSPITxCplt <span class="token operator">&amp;&amp;</span> wTimeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        wTimeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gSPITxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>收发数据驱动函数</li></ol><p>对于此函数的调用者而言，实际上只需要关心存有发送数据的缓冲区、用于接收数据的缓冲区、要收发的数据个数，并不关心数据传输的宽度，因而将收发函数封装为以下这样的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SPIDrvWriteReadBuf</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>wbuf<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>rbuf<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> wSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 调用writeRead函数收发数据 */</span>
    g_spi5<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">writeRead</span><span class="token punctuation">(</span>g_spi5<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>wbuf<span class="token punctuation">,</span>
                            <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rbuf<span class="token punctuation">,</span>
                            <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>wSize<span class="token punctuation">,</span>
                            SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 等待size长度的数据发送和接收完成 */</span>
    <span class="token function">SPIDrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>测试代码</li></ol><p>测试代码比较简单，就是每次收发相同长度的数据然后进行注意比较，出错则将错误数据打印出来，代码实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SPIAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SPIDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 测试计数，测试count次后退出测试 */</span>
    <span class="token class-name">uint32_t</span> dwCount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">/* 收发数据保存的数组，长度为256字节 */</span>
    <span class="token class-name">uint8_t</span> wBuf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> rBuf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dwCount<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 每次发送数据前给发送数组赋值随机数，增加测试可靠性 */</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            wBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* 同时收发256字节数据 */</span>
        <span class="token function">SPIDrvWriteReadBuf</span><span class="token punctuation">(</span>wBuf<span class="token punctuation">,</span> rBuf<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">uint16_t</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">/* 逐一比较收发数组中的数据是否一致，如果出现不一致就将其打印出来观察并且计数错误个数 */</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>wBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> rBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                err<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error:\\r\\n\\twBuf:0x%.2x\\trBuf:0x%.2x\\r\\n&quot;</span><span class="token punctuation">,</span> wBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to write and read data by sci spi:\\t%d!\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>dwCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
dwCount<span class="token operator">--</span>
        <span class="token comment">/* 每隔1秒测试一次 */</span>
        <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-3-上机实验" tabindex="-1"><a class="header-anchor" href="#_8-2-3-上机实验" aria-hidden="true">#</a> 8.2.3 上机实验</h3><p>在hal_entry.c中调用void drv_sci_spi_init(void)初始化函数，将编译成功后生成的可执行二进制文件烧写到芯片中，可以观察到如下现象：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image8.png" alt=""></p><h2 id="_8-3-sci-spi驱动显示屏实验" tabindex="-1"><a class="header-anchor" href="#_8-3-sci-spi驱动显示屏实验" aria-hidden="true">#</a> 8.3 sci spi驱动显示屏实验</h2><p>本节实验会用到UART的printf功能，请参考前文《7.3 stdio实验》配置实现printf功能，并将0801_sci_spi_loopback/drivers中的drv_uart.c和drv_uart.h移植到本节实验的工程中。</p><h3 id="_8-3-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_8-3-1-硬件连接" aria-hidden="true">#</a> 8.3.1 硬件连接</h3><p>本节实验是使用RA的SCI SPI模式驱动一块SPI接口的显示屏，这块显示屏的驱动芯片是ST7796s，实验板和显示屏的连接原理图如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image9.png" style="zoom:150%;"><p>本节实验只涉及SPI通信，因而只需要关心原理图中13~19号引脚，各引脚的意思如下表：</p><table><thead><tr><th>显示屏接口号</th><th>接口含义</th><th>MCU引脚号</th><th>MCU引脚模式</th></tr></thead><tbody><tr><td>13-MISO</td><td>SPI从机的输出引脚，主机的输入引脚</td><td>P100</td><td>SCI0 SPI的RXD0</td></tr><tr><td>14-CS</td><td>SPI片选脚，低电平有效</td><td>P103</td><td>GPIO Out</td></tr><tr><td>15-RS</td><td>ST7796s的数据/命令切换引脚，高电平表示接收数据，低电平表示接收命令</td><td>P104</td><td>GPIO Out</td></tr><tr><td>16-SCK</td><td>SPI的时钟输出引脚</td><td>P102</td><td>SCI0 SPI的SCK0</td></tr><tr><td>17-MOSI</td><td>SPI主机的输出引脚，从机的输入引脚</td><td>P101</td><td>SCI0 SPI的TXD0</td></tr><tr><td>18-RESET</td><td>ST7796s的硬件复位引脚</td><td>P105</td><td>GPIO Out</td></tr><tr><td>19-PWM</td><td>显示屏的背光控制引脚，高电平点亮</td><td>P608</td><td>GPIO Out/GPT5的GTIOC5A</td></tr></tbody></table><p>对于背光控制引脚，既可以直接使用IO输出高电平全功率点亮屏幕，也可以使用GPT功能输出PWM调节，由于还没有讲到GPT外设，本节将P608配置为GPIO的输出模式。</p><h3 id="_8-3-2-配置sci-spi和ports" tabindex="-1"><a class="header-anchor" href="#_8-3-2-配置sci-spi和ports" aria-hidden="true">#</a> 8.3.2 配置SCI SPI和Ports</h3><p>配置SCI的SPI和GPIO在前面的章节已经讲过，本节就不再赘述。与本章第一个实验不同的是，本节使用的引脚是SCI0的SPI引脚，因而在选择SCI通道的时候要选择为SCI0，且配置其Stack的时候要将控制块名称和通道都和通道0相匹配，中断回调函数那里也取名为sci_spi0_callback。</p><h3 id="_8-3-3-显示屏驱动解析" tabindex="-1"><a class="header-anchor" href="#_8-3-3-显示屏驱动解析" aria-hidden="true">#</a> 8.3.3 显示屏驱动解析</h3><p>要驱动一块显示屏，必须要先了解这块显示屏内部的驱动芯片，弄清楚这块芯片支持什么接口，用什么协议通信，支持那种颜色格式，有哪些配置命令等等。这些都需要去仔细阅读显示屏驱动芯片的手册。</p><p>一块显示屏的驱动是比较复杂的，要想将其显示性能尽可能的发挥是需要花很长时间去钻研手册的，这不是本书的重点，本书将演示如何点亮ST7796s驱动的屏幕，并把屏幕设置为指定颜色。</p><ol><li>屏幕分辨率</li></ol><p>ST7796s能够驱动分辨率最大为320<em>480的屏幕，每个像素使用16tbit表示其颜色。全屏显示需要显存320</em>480*2字节，约300K字节。</p><ol start="2"><li>支持的接口协议</li></ol><p>ST7796s支持的接口协议有许多种，例如：</p><ul><li>8bit/9bit/16bit/18bit的8080并行接口；</li><li>16/18 RGB接口；</li><li>3线制/4线制串行接口；</li><li>MIPI接口；</li></ul><p>本书使用的是4线制串行接口，也就是SPI接口，包括CS、SCK、MOSI和MISO。</p><ol start="3"><li>命令/数据切换控制</li></ol><p>在串行接口驱动下，通信数据从数据模式到命令模式的相互切换依靠的是ST7796s的DCX引脚，也就是前文原理图中的RS引脚，手册中对此引脚的描述如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image10.png" alt=""></p><p>此引脚输入的电平为‘1’时，ST7796s认为收到的数据为显示数据；为‘0’时认为收到的数据是命令。也就是书SPI主机，即单片机这边通过RS引脚输出高低电平来切换数据的模式。</p><ol start="4"><li>休眠与唤醒</li></ol><p>当ST7796s发生硬件复位或软件复位时，复位结束后芯片是处于休眠模式的，即手册中说的Sleep in模式，在此模式下芯片的内部晶振不会工作，DC转换也会停止，因而显示也会失效。</p><p>要想正常的显示就需要将其唤醒，休眠和唤醒都是通过命令来控制的：</p><ul><li>0x10:Sleep in</li><li>0x11:Sleep out</li></ul><p>这两个命令在休眠模式下都是可以通过SPI传输给ST7796s，因而在低功耗场景下，可以用这两个命令实现屏幕的休眠和唤醒。</p><ol start="5"><li>显示模式设置</li></ol><p>ST7796s支持的显示模式有局部显示和普通显示。局部显示，顾名思义，就是在320 RGB*480分辨率下不显示完整，仅在某个区域显示。在局部显示模式下，需要通过命令来设置显示区域。普通显示就是整屏显示。</p><p>这两个模式的设置命令如下：</p><ul><li>0x12：局部显示；</li><li>0x13：普通显示；</li></ul><ol start="6"><li>显示方向设置</li></ol><p>图像在屏幕上的显示方向由两个要素控制：像素显示方向和颜色显示方向。像素显示方向由4个方位组合，即上下左右，可以分为：</p><ul><li>左-&gt;右，上-&gt;下；</li><li>左-&gt;右，下-&gt;上；</li><li>右-&gt;左，上-&gt;下；</li><li>右-&gt;左，下-&gt;上；</li></ul><p>而颜色方向则只有两种：RGB或BGR。</p><p>一般人们习惯的阅读方式是左-&gt;右，上-&gt;下，而颜色方向常用的是RGB。控制显示方向的命令是0x36，其描述如下：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image11.png"><p>MY/X/V是像素数据在现存中行列地址读写的方向，细节如下图：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image12.png"><p>具体的示例在手册中有详细描写，本节仅摘取部分，如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image13.png"><p>要让数据对应的像素点如何显示取决于具体的应用场景。</p><ol start="7"><li>颜色格式设置</li></ol><p>设置颜色格式使用的命令是0x3A，其描述如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image14.png" alt=""></p><p>通常情况下将RGB接口的颜色格式和控制接口的颜色格式都设置为16bit，即写为0x55。</p><ol start="8"><li>显示的开启和关闭</li></ol><p>开启和关闭显示使用到的命令分别是0x29和0x28：</p><ul><li>0x28：Display Off，关闭显示；</li><li>0x29：Display On，开启显示；</li></ul><ol start="9"><li>显示地址设置</li></ol><p>显示地址分为行地址和列地址，设置行列地址有不同的命令，分别是：</p><ul><li>0x2A：Column Address Set，列地址设置；</li><li>0x2B：Row Address Set，行地址设置；</li></ul><p>观察下手册中对这两个命令的描述：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image15.png" alt=""></p><p>可以看到，他们均需要设置各自的起始地址和结束地址，且均是先发送始地址的高8位，再发送始地址的低8位，接着发送结束地址的高8位，最后发送结束地址的低8位。</p><p>清楚了这个规则后，在之后的设置显示区域的时候就知道该怎么写代码了。</p><ol start="10"><li>将数据写入显存</li></ol><p>将数据写入显存使用的命令是0x2C，看下它的描述：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image16.png" alt=""></p><p>不难理解，当发送了0x2C给芯片后，接着可以发N个字节的像素数据到显存。</p><h3 id="_8-3-4-显示屏驱动程序" tabindex="-1"><a class="header-anchor" href="#_8-3-4-显示屏驱动程序" aria-hidden="true">#</a> 8.3.4 显示屏驱动程序</h3><p>通过前文已经可以理清楚驱动ST7796s的基本流程：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-8/image17.png" alt=""></p><p>本次实验将显示器的驱动代码在drv_sci_spi_disp.c中实现，显示器设备结构体在drv_config.h中声明。</p><ol><li>中断回调函数和写等待函数</li></ol><p>中断回调函数将发送完成标志写1，而写等待函数则是等待发送完成标志被设置为1之后再将其清零，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gFlagWaitTX <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sci_spi0_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 判断是否是发送完成触发的中断 */</span>
<span class="token comment">/* 如果是的话就将发送完成标志位置1 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>SPI_EVENT_TRANSFER_COMPLETE <span class="token operator">==</span> arg<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
        gFlagWaitTX <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWaitTX</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> wTimeout <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gFlagWaitTX <span class="token operator">&amp;&amp;</span> wTimeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        wTimeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gFlagWaitTX <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义引脚状态</li></ol><p>根据ST7796s的引脚描述和原理图连接关系，来定义各引脚的状态枚举类型，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    notLight<span class="token punctuation">,</span>
    isLight
<span class="token punctuation">}</span>Black<span class="token punctuation">;</span>   <span class="token comment">/* 背光引脚控制状态 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    isReset<span class="token punctuation">,</span>
    notReset
<span class="token punctuation">}</span>Reset<span class="token punctuation">;</span>   <span class="token comment">/* 复位引脚控制状态 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    isSelect<span class="token punctuation">,</span>
    notSelect
<span class="token punctuation">}</span>CS<span class="token punctuation">;</span>      <span class="token comment">/* 片选信号控制状态 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    isCommand<span class="token punctuation">,</span>
    isData
<span class="token punctuation">}</span>DC<span class="token punctuation">;</span>     <span class="token comment">/* 数据/命令切换控制状态 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>控制引脚操作函数</li></ol><p>驱动ST7796s需要控制4个引脚，用来选中设备、切换指令数据、硬件复位、控制背光等，他们的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteCS</span><span class="token punctuation">(</span>CS eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                             BSP_IO_PORT_01_PIN_03<span class="token punctuation">,</span>
                             <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>DCX eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                             BSP_IO_PORT_01_PIN_04<span class="token punctuation">,</span>
                             <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteReset</span><span class="token punctuation">(</span>Reset eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                             BSP_IO_PORT_01_PIN_05<span class="token punctuation">,</span>
                             <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteBlack</span><span class="token punctuation">(</span>Black eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                             BSP_IO_PORT_06_PIN_08<span class="token punctuation">,</span>
                             <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这些控制函数仅会在ST7796s的内部驱动函数中用到，因而都是静态函数，在后续的使用中可以这样使用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">LCDDrvWriteReset</span><span class="token punctuation">(</span>isReset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">LCDDrvWriteCS</span><span class="token punctuation">(</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>硬件复位</li></ol><p>通过RESET引脚硬件复位驱动芯片，低电平复位，复位结束后要将其拉回高电平，以免使芯片一直处于复位状态，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvHWReset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCDDrvWriteReset</span><span class="token punctuation">(</span>isReset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReset</span><span class="token punctuation">(</span>notReset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> BSP_DELAY_UNITS_MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>写寄存器命令函数</li></ol><p>写命令需要将引脚DCX拉低，然后发送一个字节的命令数据，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> reg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_spi0_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>reg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWaitTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>写数据函数</li></ol><p>写数据则需要将DCX拉高，然后开始发送数据，此处封装的是给寄存器发送数据的函数，每次只发送一个字节，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> dat<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_spi0_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWaitTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>写多字节数据函数</li></ol><p>在显示器驱动中，通常是把很多数据连续地发送给显示器，本工程将其封装成了如下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteBuf</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x3C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">uint32_t</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">)</span>
            length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>size<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            length <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> pbuf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS<span class="token operator">==</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">LCDDrvWaitTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">=</span> size <span class="token operator">-</span> length<span class="token punctuation">;</span>
        pbuf <span class="token operator">=</span> pbuf <span class="token operator">+</span> length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LCDDrvWriteBuf</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x3C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_spi0_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWaitTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先发送一个0x3C指令，告诉显示器即将来很多个数据，然后再开始发送数据。</p><p>0x3C连续写模式仅在ST7796s的’MX=1’下才可使用。</p><ol start="8"><li>注册显示器控制函数</li></ol><p>同样使用面向对象编程思想，将显示器的操作封装到一个结构体中，用函数指针成员来指向具体的操作函数，此结构体在drv_disp.h中定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>FBBase<span class="token punctuation">;</span> <span class="token comment">/* CPU能直接读写的显存 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXres<span class="token punctuation">;</span>    <span class="token comment">/* X方向分辨率 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYres<span class="token punctuation">;</span>    <span class="token comment">/* Y方向分辨率 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wBpp<span class="token punctuation">;</span>     <span class="token comment">/* 每个像素使用多少个像素 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>   dwSize<span class="token punctuation">;</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 硬件初始化 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>DisplayON<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 开启显示 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>DisplayOFF<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 关闭显示 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>SetDisplayWindow<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">,</span> \\
                                     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXs<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYs<span class="token punctuation">,</span> \\
                                     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXe<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>Flush<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 把FBBase的数据刷到LCD的显存里 */</span>
    <span class="token comment">/* 设置FBBase中的数据, 把(iX,iY)的像素设置为颜色dwColor
     * dwColor的格式:0x00RRGGBB
     */</span>
    <span class="token keyword">int</span>          <span class="token punctuation">(</span><span class="token operator">*</span>SetPixel<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> \\
                             <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wY<span class="token punctuation">,</span> \\
                             <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DisplayDevice<span class="token punctuation">,</span> <span class="token operator">*</span>PDisplayDevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发者需要在驱动程序中实现此结构体：设置里面的参数（比如分辨率）、函数指针。本工程实现的结构体如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> DisplayDevice gLcdDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;LCD&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>FBBase <span class="token operator">=</span> gLcdFbuf<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>wXres <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>wYres <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>wBpp <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token number">320</span><span class="token operator">*</span><span class="token number">480</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>Init <span class="token operator">=</span> LCDDrvInit<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>DisplayON <span class="token operator">=</span> LCDDrvSetDisplayOn<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>DisplayOFF <span class="token operator">=</span> LCDDrvSetDisplayOff<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>SetDisplayWindow <span class="token operator">=</span> LCDDrvSetDisplayWindow<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>Flush <span class="token operator">=</span> LCDDrvFlush<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>SetPixel <span class="token operator">=</span> LCDDrvSetPixel
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个成员FBBase指向的数组，需要根据显示器的特性来确定，比如本实验的ST7796s，它的一个像素由16bit数据组成，全屏有320<em>480个像素，因而就需要320</em>480*16/8个字节的数组来表示显存在处理器内存中的映射，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> gLcdFbuf<span class="token punctuation">[</span><span class="token number">320</span><span class="token operator">*</span><span class="token number">480</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>本实验已经实现的操作函数将会在后文进行介绍。</p><ol start="9"><li>获取显示设备函数</li></ol><p>出于良好的编程习惯，将显示设备结构体定义为了一个静态的全局变量，上层代码需要一个接口来获取这个结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span><span class="token function">LCDGetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gLcdDevice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数返回一个DisplayDevice指针，上层应用通过它来操作显示设备。</p><ol start="10"><li>显示器的开启和关闭函数</li></ol><p>这两个操作函数比较简单，就是向ST7796s发送0x28/0x29指令即可，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">LCDDrvSetDisplayOn</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">LCDDrvSetDisplayOff</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li>设置显示区域函数</li></ol><p>通过前文已知，设置显示区域就是设置显示行、列的起始地址、结束地址，先发地址高8位再发地址低8位的规则，封装得到了如下代码的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">LCDDrvSetDisplayWindow</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">,</span> \\
                           <span class="token keyword">unsigned</span> <span class="token keyword">short</span> hwXs<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> hwYs<span class="token punctuation">,</span> \\
                           <span class="token keyword">unsigned</span> <span class="token keyword">short</span> hwXe<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> hwYe<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置列地址 */</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x2A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hwXs<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 起始地址先高后低</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x00FF</span><span class="token operator">&amp;</span>hwXs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hwXe<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 结束地址先高后低</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x00FF</span><span class="token operator">&amp;</span>hwXe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置行地址 */</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x2B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hwYs<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x00FF</span><span class="token operator">&amp;</span>hwYs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>hwYe<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x00FF</span><span class="token operator">&amp;</span>hwYe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12"><li>全屏刷新函数</li></ol><p>此函数用于将设备结构体里FBBase的所有数据，一次性发送给屏幕，用来刷新整个屏幕，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">LCDDrvFlush</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteBuf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>ptDev<span class="token operator">-&gt;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="13"><li>设置像素点函数</li></ol><p>在有些应用场景下会对某个或者某几个像素点进行单独操作，来显示指定图像，因而需要实现一个单独像素点设置的接口以供使用，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">LCDDrvSetPixel</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> \\
                   <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wY<span class="token punctuation">,</span> \\
                   <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wColor<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wX <span class="token operator">&gt;=</span> ptDev<span class="token operator">-&gt;</span>wXres <span class="token operator">||</span> wY <span class="token operator">&gt;=</span> ptDev<span class="token operator">-&gt;</span>wYres<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span>ptDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">;</span>

    buf<span class="token punctuation">[</span>wY <span class="token operator">*</span> ptDev<span class="token operator">-&gt;</span>wXres <span class="token operator">+</span> wX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span>wColor<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像素点位置的偏移根据屏幕的分辨率和显示模式决定，本章的计算公式不一定适合所有的屏幕，读者移植使用的时候需要注意。</p><ol start="14"><li>屏幕初始化函数</li></ol><p>本次实验初始化屏幕设置的参数比较简单：打开SPI-&gt;硬件复位-&gt;唤醒设备-&gt;设置颜色格式-&gt;开启显示-&gt;点亮背光。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">LCDDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">/* 打开SPI设备完成初始化 */</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_spi0_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_spi0_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open device:\\tspi0\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open device:\\tspi0\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 初始化屏幕设备 */</span>
    <span class="token function">LCDDrvHWReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//LCD 复位</span>
    <span class="token function">LCDDrvWriteCS</span><span class="token punctuation">(</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteBlack</span><span class="token punctuation">(</span>isLight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点亮背光</span>
    
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x3A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteDat</span><span class="token punctuation">(</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LCDDrvWriteReg</span><span class="token punctuation">(</span><span class="token number">0x29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-5-显示屏测试程序" tabindex="-1"><a class="header-anchor" href="#_8-3-5-显示屏测试程序" aria-hidden="true">#</a> 8.3.5 显示屏测试程序</h3><p>本次实验的测试程序有两个功能：清屏和画圆。测试程序在app_disp.c文件中实现，在app.h中声明。测试程序代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FLOYRGB565</span><span class="token expression"><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r<span class="token operator">&gt;&gt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>g<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span>b<span class="token operator">&gt;&gt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">DispAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DisplayDevice <span class="token operator">*</span>ptDispDev <span class="token operator">=</span> <span class="token function">LCDGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDispDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get LCD device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 初始化显示设备 */</span>
    ptDispDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置屏幕显示区域 */</span>
    ptDispDev<span class="token operator">-&gt;</span><span class="token function">SetDisplayWindow</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ptDispDev<span class="token operator">-&gt;</span>wXres <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ptDispDev<span class="token operator">-&gt;</span>wYres <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 清除屏幕 */</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptDispDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> ptDispDev<span class="token operator">-&gt;</span>dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptDispDev<span class="token operator">-&gt;</span><span class="token function">Flush</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 画一个实心圆 */</span>
    <span class="token class-name">uint16_t</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wXres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wXres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wYres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> y<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wYres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wXres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wXres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wYres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token punctuation">(</span>ptDispDev<span class="token operator">-&gt;</span>wYres<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> r<span class="token operator">*</span>r<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ptDispDev<span class="token operator">-&gt;</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token function">FLOYRGB565</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ptDispDev<span class="token operator">-&gt;</span><span class="token function">Flush</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第01行：使用宏函数将RGB颜色转换为16bit的颜色值；</li><li>第15~16行：清屏；</li><li>第19~30行：在屏幕中心画一个半径为100像素点的实心圆；</li></ul><p>随后在hal_entry.c中的hal_entry()函数调用各设备初始化函数以及这个圆圆函数，即可在屏幕上显示一个填充的黑色圆，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_uart.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;app.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_data.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DispAppTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-6-上机实验" tabindex="-1"><a class="header-anchor" href="#_1-3-6-上机实验" aria-hidden="true">#</a> 1.3.6 上机实验</h3><p>将编译生成的可执行二进制文件烧入到芯片中后，通过串口可以得到如下打印信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Success to open device<span class="token operator">:</span> uart7
Success to open device<span class="token operator">:</span> spi0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>观察屏幕可以看到一个填充圆。</p>`,246),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter8.html.vue"]]);export{r as default};
