import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const t={},e=p(`<h1 id="第20章-dac输出模拟信号" tabindex="-1"><a class="header-anchor" href="#第20章-dac输出模拟信号" aria-hidden="true">#</a> 第20章 DAC输出模拟信号</h1><p>本章目标</p><ul><li>了解DAC基本概念和RA6M5处理器的DAC外设；</li><li>学会使用RASC配置DAC输出指定电压和正弦波形；</li></ul><h2 id="_1-1-ra6m5的dac" tabindex="-1"><a class="header-anchor" href="#_1-1-ra6m5的dac" aria-hidden="true">#</a> 1.1 RA6M5的DAC</h2><h3 id="_1-1-1-dac简介" tabindex="-1"><a class="header-anchor" href="#_1-1-1-dac简介" aria-hidden="true">#</a> 1.1.1 DAC简介</h3><p>计算机里处理的都是数字0/1信号，而自然界几乎都是模拟信号，比如音频信号、无线传输信号等，这就要求计算机具有模拟信号的输出能力，将数字信号（离散信号）转换为模拟信号（连续信号）的器件就叫数模转换器(Digital-to-Analog Converter，DAC)。</p><p>按原理可分为：Nyquist型和过采样型。Nyquist型转换器按其结构又可大致分为电阻分压型、R_2R型、电荷分配型和电流驱动型。</p><p>下图所示为DAC转换过程，输入的数字编码Din（dn1 : d0），按其权值大小转换成相应的模拟量并相加，相加的结果Aout与数字量Din成正比，即实现了D/A转换。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image1.png" style="zoom:33%;"><p>DAC的主要有三个性能指标：分辨率、建立时间和转换精度。</p><ul><li>分辨率：指DAC能输出的最小变化量，通常使用二进制有效位表示，反应了DAC输出模拟量的最小变化值。当输出量程一定时，位数越多，量化单位越小，误差越小，分辨率越高。比如一个12位的DAC，参考电压为3.3V，则其能输出的最小电压为：</li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image2.jpg" alt=""></p><ul><li>建立时间：指DAC从输入信号变化开始，到输出模拟信号达到满刻度值（±1/2LSB）所需时间。根据建立时间得长短，可以将DAC分为超高速（＜1μS）、高速（10~1μS）、中速（100~10μS）、低速（≥100μS）。</li><li>转换精度：指DAC输出的模拟电压实际值与理论值之间的偏差，通常为1个或半个最小数字量的变化量，表示为1LSB或1/2LSB。</li></ul><h3 id="_20-1-2-ra6m5的dac框图" tabindex="-1"><a class="header-anchor" href="#_20-1-2-ra6m5的dac框图" aria-hidden="true">#</a> 20.1.2 RA6M5的DAC框图</h3><p>RA6M5处理器的DAC硬件框图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image3.png" alt=""></p><p>框图中的“12-bit D/A”是核心部件，整个DAC外设都是围绕着DA0通道和DA1通道展开的，左上作为参考电源以及模拟转换输出，右边有着相应的控制寄存器、总线接口、同步转换。</p><h3 id="_20-1-3-参考电压" tabindex="-1"><a class="header-anchor" href="#_20-1-3-参考电压" aria-hidden="true">#</a> 20.1.3 参考电压</h3><p>AVCC0引脚作为ADC12和DAC12的电源输入引脚，AVSS0引脚作为ADC12和DAC12的接地输入引脚。VREFH引脚作为DAC12的模拟参考高电压电源引脚。VREFL引脚作为DAC12的模拟参考低电压引脚。</p><p>分别把它们接入到电源的正负两级，可以得到DAC的输出电压范围为：0~3.3V。如果想让输出的电压范围变宽，可以在外部加一个电压调节电路，把0~3.3V的DAC输出抬升到特定的范围即可。 在电路设计的时候不增加磁珠和电容接入到DAC12电源电路，会使得输出的电压不稳甚至输出的不是想要的电压，这个时候可以在电路上增加磁珠和电容来减少干扰，从而优化DAC比较电压源从而使其输出稳定。</p><h3 id="_20-1-4-触发源" tabindex="-1"><a class="header-anchor" href="#_20-1-4-触发源" aria-hidden="true">#</a> 20.1.4 触发源</h3><p>可以设置软件来触发DAC，也可以通过使用ELC进行触发，还可以使用外部中断进行触发，最终目的是为了使得DACR.DAOEn（n=0,1）位被置1，可以编写相应的寄存器控制代码来使用不同的方式进行触发。</p><p>ELC也可以触发DAC转换，过程为：先设置ELSR12或ELSR13，选择“要连接的事件”，当连接的事件发生后，会使得DAC的寄存器DAOEi置1并开启DAC转换。ELSR12对应DAOE0即DAC0，ELSR13对应DAOE1即DAC1。</p><h3 id="_20-1-5-数据转换" tabindex="-1"><a class="header-anchor" href="#_20-1-5-数据转换" aria-hidden="true">#</a> 20.1.5 数据转换</h3><p>1.DAC的数据寄存器</p><p>RA6M5处理器的DAC数据寄存器DADRn(n=0,1)是一个16bit的可读可写的寄存器，用来保存DAC的转换值。当开启了DA转换后，存储在此寄存器的值就会被转化为一个模拟量输出。 此16bit寄存器实际上只有低12bit被用来保存转换值，高4bit是无效的，因而DAC可以转换的数字量范围是0~4095。</p><p>保存在此寄存器的数值有两种对齐方式：左对齐或右对齐。默认是右对齐。</p><p>2.电压转换公式</p><p>DAC的转换出来的模拟量值是根据其转换精度和参考电压换算的，公式如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image4.jpg" alt=""></p><ol start="3"><li>DA转换时间</li></ol><p>RA6M5处理器的DA转换时间在其数据手册中有说明，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image5.png" alt=""></p><p>是否使用DAC的放大器，输出的模拟量范围和转换时间是不同的：</p><ul><li>使用放大器：输出模拟量电压范围在0~之间；DA转换时间最大3us；</li><li>用放大器：输出模拟量电压范围在0~之间；DA转换时间最大4us；</li></ul><ol start="4"><li>DA转换过程</li></ol><p>开启DAC任意通道的DA转换分为如下几步：</p><ul><li>通过设置DADPR[DPSEL]位确定转换值是左对齐还是右对齐；</li><li>往寄存器DADRn写入数字值；</li><li>将DACR[DAOEn]位置1开启转换；</li><li>如果要进行多次转换，则在DACR[DAOEn]=1情况下，连续往DADRn寄存器写入值即可，转换时间为;</li><li>如果要停止转换，就将DAOEn写0；</li></ul><h2 id="_20-2-dac模块的使用" tabindex="-1"><a class="header-anchor" href="#_20-2-dac模块的使用" aria-hidden="true">#</a> 20.2 DAC模块的使用</h2><h3 id="_20-2-1-配置dac模块" tabindex="-1"><a class="header-anchor" href="#_20-2-1-配置dac模块" aria-hidden="true">#</a> 20.2.1 配置DAC模块</h3><p>在RASC中配置DAC时，建议先配置DAC的通道的引脚，再去添加DAC的Stack模块并进行配置。</p><ol><li>配置DAC通道引脚</li></ol><p>在RASC的“Pins”中的“Peripherals”选择“Analog:DAC”，根据硬件选择DAC通道，假设是DACO，那么则在右侧弹出的配置中将“Operation Mode”设置为“Enabled”，引脚只有一个P014。如果是DAC1，其引脚是P015。配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image6.png" alt=""></p><ol start="2"><li>配置DAC的Stack模块</li></ol><p>在FSP的“Stacks”界面点击“New Stack”，选择“Analog”中的“DAC(r_dac)”，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image7.png" alt=""></p><p>DAC的Stack模块分为3个板块：</p><ul><li>Common：对所有DAC外设Stack模块通用，DAC这里只有参数校验的使能或不使能，默认是不使能；</li><li>Module：某个指定的DAC外设Stack模块参数配置，在里面设置DAC外设Stack的名称、通道、数据格式、放大器使能、触发源等参数；</li><li>Pins：某个指定DAC外设的输出引脚</li></ul><p>如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image8.png" alt=""></p><p>配置好DAC的Stack参数后，点击FSP配置界面的“Generate Project Content”，使用RASC生成RA6M5处理器的Keil MDK工程。</p><h3 id="_20-2-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_20-2-2-配置信息解读" aria-hidden="true">#</a> 20.2.2 配置信息解读</h3><p>RASC生成的DAC配置信息有两种：引脚配置信息、DAC模块本身的配置信息。</p><ol><li>引脚信息</li></ol><p>该信息会在ra_gen\\pin_data.c文件里生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_00_PIN_14<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_ANALOG_ENABLE<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里将P014引脚的配置设置为复用模拟功能。</p><ol start="2"><li>块配置信息</li></ol><p>DAC模块的配置信息在hal_data.c里，它是dac_cfg_t类型的结构体常量，名为g_dac0_cfg，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">dac_cfg_t</span> g_dac0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>channel             <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ad_da_synchronized  <span class="token operator">=</span> false<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_extend            <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dac0_ext_cfg
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>channels：DAC通道；</li><li>ad_da_synchronized：是否和ADC同步转换</li><li>p_extend：扩展的配置信息</li></ul><p>对于p_extend，它被用来描述DAC的扩展配置参数，比如是否使用放大器、数据存放格式、是否使能内部输出等，结构体原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_dac_extended_cfg</span>
<span class="token punctuation">{</span>
    bool   enable_charge_pump<span class="token punctuation">;</span> <span class="token comment">///&lt; Enable DAC charge pump available on selected MCUs.</span>
    bool  output_amplifier_enabled<span class="token punctuation">;</span> <span class="token comment">///&lt; Output amplifier enable available on selected MCUs.</span>
    bool  internal_output_enabled<span class="token punctuation">;</span>  <span class="token comment">///&lt; Internal output enable available on selected MCUs.</span>
    <span class="token class-name">dac_data_format_t</span> data_format<span class="token punctuation">;</span>              <span class="token comment">///&lt; Data format</span>
<span class="token punctuation">}</span> <span class="token class-name">dac_extended_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RASC生成的had_data.c中，定义了g_dac0_ext_cfg常量，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">dac_extended_cfg_t</span> g_dac0_ext_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>enable_charge_pump   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>data_format         <span class="token operator">=</span> DAC_DATA_FORMAT_FLUSH_RIGHT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>output_amplifier_enabled <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>internal_output_enabled <span class="token operator">=</span> false<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>DAC外设对象结构体</li></ol><p>使用RASC配置生成的DAC外设对象，是一个dac_instance_t结构体类型常量，名为g_dac0表示，此结构体原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_dac_instance</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dac_ctrl_t</span>      <span class="token operator">*</span> p_ctrl<span class="token punctuation">;</span>   <span class="token comment">///&lt; Pointer to the control structure for this instance</span>
    <span class="token class-name">dac_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>    <span class="token comment">///&lt; Pointer to the configuration structure for this instance</span>
    <span class="token class-name">dac_api_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_api<span class="token punctuation">;</span>   <span class="token comment">///&lt; Pointer to the API structure for this instance</span>
<span class="token punctuation">}</span> <span class="token class-name">dac_instance_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>g_dac0定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_dac_instance</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dac_ctrl_t</span>      <span class="token operator">*</span> p_ctrl<span class="token punctuation">;</span>   <span class="token comment">///&lt; Pointer to the control structure for this instance</span>
    <span class="token class-name">dac_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>    <span class="token comment">///&lt; Pointer to the configuration structure for this instance</span>
    <span class="token class-name">dac_api_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_api<span class="token punctuation">;</span>   <span class="token comment">///&lt; Pointer to the API structure for this instance</span>
<span class="token punctuation">}</span> <span class="token class-name">dac_instance_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>g_dac0定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">dac_instance_t</span> g_dac0 <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl    <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dac0_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg     <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dac0_cfg<span class="token punctuation">,</span>
<span class="token punctuation">.</span>p_api     <span class="token operator">=</span> <span class="token operator">&amp;</span>g_dac_on_dac
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：控制参数，用来记录一些状态信息；</li><li>p_cfg：DAC的配置参数；</li><li>p_api：DAC的接口，它是一个dac_api_t指针，指向g_dac_on_dac；</li></ul><h3 id="_20-2-3api-接口及其用法" tabindex="-1"><a class="header-anchor" href="#_20-2-3api-接口及其用法" aria-hidden="true">#</a> 20.2.3API 接口及其用法</h3><p>DAC的API在dac_api_t结构体中指明，此结构体的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_dac_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">dac_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> value
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">dac_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在r_dac.c中实现了一个dac_api_t结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">dac_api_t</span> g_dac_on_dac <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open  <span class="token operator">=</span> R_DAC_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write <span class="token operator">=</span> R_DAC_Write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>start <span class="token operator">=</span> R_DAC_Start<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>stop  <span class="token operator">=</span> R_DAC_Stop<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close <span class="token operator">=</span> R_DAC_Close<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍这些函数进行介绍，并举例。</p><ol><li>打开DAC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">dac_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数会初始化DAC设备，用户可以参考如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_dac0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>写入DAC转换数字量值</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数会将value写入到DAC的DADR寄存器中，如果开启了DAC转换，会立刻进行DAC转换，并把模拟信号输出到DAC引脚上。</p><p>用户可以参考如下代码使用此函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>开启和停止转换</li></ol><ul><li>开启转换</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>停止转换</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只要用户调用start函数开启DAC的转换，每次调用write写入数字量的时候，就会立刻开始转换为模拟量。</p><p>用户可以参考如下代码开启DAC转换(停止转换类似)：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>关闭DAC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dac_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数关闭DAC的转换，如果使用了放大器还会失能放大器，并且将DAC的状态标志改为关闭状态。</p><h2 id="_20-3-dac控制实现呼吸灯" tabindex="-1"><a class="header-anchor" href="#_20-3-dac控制实现呼吸灯" aria-hidden="true">#</a> 20.3 DAC控制实现呼吸灯</h2><h3 id="_20-3-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_20-3-1-设计目的" aria-hidden="true">#</a> 20.3.1 设计目的</h3><p>使用DAC输出线性电压改变LED亮度，从而实现呼吸灯效果。</p><h3 id="_0-3-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_0-3-2-硬件连接" aria-hidden="true">#</a> 0.3.2 硬件连接</h3><p>配套开发板的P014没有连接外接电路，用户可以参考下图，使用杜邦线和洞洞板搭建控制电路：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image9.png" alt=""></p><p>电阻阻值在1kΩ~10kΩ即可，LED颜色任意，建议选择变化明显容易观察的、较深的颜色。</p><h3 id="_20-3-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_20-3-3-驱动程序" aria-hidden="true">#</a> 20.3.3 驱动程序</h3><p>1.DAC设备对象抽象</p><p>RA6M5处理器有两个硬件DAC，基于面向对象的编程思想，对DAC设备进行了抽象，定义了如下结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DACDev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>SetValue<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>Write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>DACDevTypeDef<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在驱动程序中实现结构体中的3个函数，并用来初始化一个DACDev结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvSetValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">DACDev</span> gDACDev0 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;DAC0&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> DACDrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>SetValue <span class="token operator">=</span> DACDrvSetValue<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Write <span class="token operator">=</span> DACDrvWrite
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第01~03行：声明内部静态驱动函数；</li><li>第05~11行：构造DACDev结构体</li></ul><p>还提供如下函数，供用户获得这个DACDev结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span><span class="token function">DACDrvGetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gDACDev0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>初始化</li></ol><p>打开DAC设备、启动DAC转换，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_dac0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06行：打开DAC设备，完成DAC0的初始化；</li><li>第12行：开启DAC的转换，之后只要调用write函数即可不断进行DA转换；</li></ul><ol start="3"><li>单次输出模拟量</li></ol><p>由于FSP的DAC库函数对于写入数值只有一个write函数，因而单次输出模拟量其实就是对write的封装：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvSetValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>连续输出模拟量</li></ol><p>连续输出相较于单次输出，差别仅在于输出多个模拟量，是对write的不同方式的封装而已：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DACDrvWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DACDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_dac0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_dac0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_20-3-4-测试程序" aria-hidden="true">#</a> 20.3.4 测试程序</h3><p>使LED要呈现呼吸灯的效果，其实让LED的驱动电压有规律地递增或递减：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-20/image10.png" style="zoom:50%;"><p>因而可以使用单次输出模拟量的方法，每隔一段时间输出一个递增变化的模拟量。测试代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DACAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DACDevTypeDef <span class="token operator">*</span>ptDacDev <span class="token operator">=</span> <span class="token function">DACDrvGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDacDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Can not get DAC device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to get device: %s\\r\\n&quot;</span><span class="token punctuation">,</span> ptDacDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptDacDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDacDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    bool dir <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token class-name">uint16_t</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            dir <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token number">4096</span><span class="token punctuation">)</span>
            dir <span class="token operator">=</span> false<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>
            value <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            value <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        ptDacDev<span class="token operator">-&gt;</span><span class="token function">SetValue</span><span class="token punctuation">(</span>ptDacDev<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第05行：获取指定的DAC设备；</li><li>第13行：初始化DAC设备；</li><li>第20~23行：根据数据的边际判断输出的数据是该递增还是递减；</li><li>第25~28行：输出的数字量每次递增或递减4个数字量；</li><li>第29行：将变化后的数字量写入到DAC的数据寄存器中；</li><li>第30行：每隔1ms数据递增或递减一次；</li></ul><p>为什么每次的变化量是4呢？根据呼吸灯的效果，设计逐渐变亮或变暗的时间周期为1.5s为佳，而DAC的数字量范围是0~4095，也就是4096个数字量，每隔1ms变化一次输出的数字量的话，为了接近1.5s的周期，且得到一个整数的数字量，每次变化4个单位是最科学的。</p><h3 id="_20-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_20-3-5-测试结果" aria-hidden="true">#</a> 20.3.5 测试结果</h3><p>用户可以使用示波器测试引脚P014的波形查看是否为一个线性变化的三角波，同时查看LED，可以观察到一个呼吸灯的效果。</p><h2 id="_20-4-dac输出正弦波实验" tabindex="-1"><a class="header-anchor" href="#_20-4-dac输出正弦波实验" aria-hidden="true">#</a> 20.4 DAC输出正弦波实验</h2><h3 id="_20-4-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_20-4-1-设计目的" aria-hidden="true">#</a> 20.4.1 设计目的</h3><p>使用DAC输出一个幅度为3.3V，周期为192us的正弦波。</p><h3 id="_20-4-2-正弦波数据的生成" tabindex="-1"><a class="header-anchor" href="#_20-4-2-正弦波数据的生成" aria-hidden="true">#</a> 20.4.2 正弦波数据的生成</h3><p>本书使用的是python脚本生成的正弦波数据，截取了其中一段正弦波数据，python脚本代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>import os
import numpy as np
import matplotlib<span class="token punctuation">.</span>pyplot as plt

def <span class="token function">sin_wave</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> f<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> phi<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token char">&#39;&#39;</span>&#39;
    <span class="token operator">:</span>params A<span class="token operator">:</span>    振幅
    <span class="token operator">:</span>params f<span class="token operator">:</span>    信号频率
    <span class="token operator">:</span>params fs<span class="token operator">:</span>   采样频率
    <span class="token operator">:</span>params phi<span class="token operator">:</span>  相位
    <span class="token operator">:</span>params t<span class="token operator">:</span>    时间长度
    <span class="token char">&#39;&#39;</span>&#39;
    # 若时间序列长度为 t<span class="token operator">=</span><span class="token number">1</span>s<span class="token punctuation">,</span> 
    # 采样频率 fs<span class="token operator">=</span><span class="token number">1000</span> Hz<span class="token punctuation">,</span> 则采样时间间隔 Ts<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>fs<span class="token operator">=</span><span class="token number">0.001</span>s
    # 对于时间序列采样点个数为 n<span class="token operator">=</span>t<span class="token operator">/</span>Ts<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0.001</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> 即有<span class="token number">1000</span>个点<span class="token punctuation">,</span>每个点间隔为 Ts
    Ts <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span>fs
    n <span class="token operator">=</span> t <span class="token operator">/</span> Ts
    n <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">arange</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
    y <span class="token operator">=</span> A<span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>f<span class="token operator">*</span>n<span class="token operator">*</span>Ts <span class="token operator">-</span> phi<span class="token operator">*</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>pi<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> y
    
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">f</span><span class="token expression"><span class="token operator">=</span><span class="token number">50</span> hz</span></span>
fs <span class="token operator">=</span> <span class="token number">256</span>
dat <span class="token operator">=</span> <span class="token function">sin_wave</span><span class="token punctuation">(</span>A<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> fs<span class="token operator">=</span>fs<span class="token punctuation">,</span> phi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2048</span>
dat <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span>

data <span class="token operator">=</span> dat<span class="token punctuation">[</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token string">&quot;const uint16_t sin[] ={ \\n&quot;</span>
<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>size<span class="token operator">/</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span>
        str <span class="token operator">=</span> <span class="token char">&#39;0x{:04x}&#39;</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> x <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span>
    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">&quot;};&quot;</span>
f <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;sine.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
f<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>python不是本书讲解的对象，因而不对此段代码做分析，请读者自行学习分析。</p><h3 id="_20-4-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_20-4-3-驱动程序" aria-hidden="true">#</a> 20.4.3 驱动程序</h3><p>驱动程序实际上使用的还是上一小节的那些函数和DAC设备对象，这里不再赘述，将上一小节的代码一直到本小节的实验中即可。</p><h3 id="_20-4-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_20-4-4-测试程序" aria-hidden="true">#</a> 20.4.4 测试程序</h3><p>本小节输出正弦波的方法是让DAC输出一段固定的正弦波数据，因而使用到的将会是DAC设备对象的连续输出模拟量的那一个函数，示例代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">uint16_t</span> sine<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>数据省略<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DACAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DACDevTypeDef <span class="token operator">*</span>ptDacDev <span class="token operator">=</span> <span class="token function">DACDrvGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDacDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. Can not get DAC device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to get device: %s\\r\\n&quot;</span><span class="token punctuation">,</span> ptDacDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptDacDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDacDev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ptDacDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>ptDacDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span>sine<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第01~03行：python生成的正弦波数据；</li><li>第21行：使用DAC设备对象连续输出函数将正弦波数据转化为模拟量输出到引脚；</li></ul><p>如果输出正弦波数据的时候，每个数据的输出间隔设计合适，输出正弦波也是能够实现呼吸灯效果的，读者可以自行尝试。</p><h3 id="_20-4-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_20-4-5-测试结果" aria-hidden="true">#</a> 20.4.5 测试结果</h3><p>使用示波器观察引脚P014的波形可以看到一个周期为192us，幅度为3.3V的正弦波。</p>`,151),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","chapter20.html.vue"]]);export{r as default};
