import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第12章-外部中断实验" tabindex="-1"><a class="header-anchor" href="#第12章-外部中断实验" aria-hidden="true">#</a> 第12章 外部中断实验</h1><p>本章目标</p><ul><li>使用RASC快速配置GPIO的外部中断模式</li><li>学会使用GPIO的外部中断处理按键信息</li></ul><h2 id="_12-1-icu模块配置外部中断" tabindex="-1"><a class="header-anchor" href="#_12-1-icu模块配置外部中断" aria-hidden="true">#</a> 12.1 ICU模块配置外部中断</h2><p>本书《第10章 中断控制单元简介》中提到过：可以通过事件链接的方式，将ICU的中断事件连接到用户自定义的中断服务函数，由用户自定义处理该中断。外部中断自然也可以这样做，将按键的GPIO对应的外部中断链接到一个自定义的中断函数去，例如key_irq，在key_irq中对寄存器进行读写和清零、执行用户代码。</p><p>这样做有个好处是开发者可以高自由度地设计中断函数，对中断的处理具有极高的掌控力。但是却没有很好地利用RASC的配置功能。使用RASC配置ICU模块来使用中断，可以不关心底层寄存器的处理，只需要关心中断的触发方式和注册中断回调函数即可。</p><p>本书使用的方式就是使用RASC配置ICU模块来使用外部中断，获取按键状态。另外，本章会使用到Led和printf功能，请读者参考前面的章节将LED的GPIO和UART模块配置好。并且还会使用到滴答定时器的驱动函数，请读者将《第11章 SysTick》中关于滴答定时器的驱动文件hal_systick.c/.h移植到本工程。</p><h3 id="_12-1-1-配置icu通道" tabindex="-1"><a class="header-anchor" href="#_12-1-1-配置icu通道" aria-hidden="true">#</a> 12.1.1 配置ICU通道</h3><p>本章需要配置的是ICU模块，在RASC中创建好工程之后，在配置界面的“Pins”中的“Peripherals”里找到“Input：ICU”，选中其中的“ICU0”，将“Operation Mode”从“Disable”改为“Enable”，然后选择IRQ的通道和使用的引脚，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image1.png" alt=""></p><p>在选择通道的时候需要根据硬件设计使用的IO来选择，例如本书使用的按键IO是P000，原理图如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image2.png" alt=""></p><p>P000对应的IRQ通道是哪一个呢？这个需要查看芯片的数据手册，在RA6M5的数据手册中，P000引脚使用的IRQ通道是6通道，如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image3.png" alt=""></p><p>所以在RASC的配置中选择的ICU0的IRQ06，并选择引脚为P000。</p><p>然后去RASC配置界面的“Stacks”里面添加ICU模块。在“New Stack”里面展开“Input”选中其中的“External IRQ(r_icu)”。如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image4.png" alt=""></p><p>最后去配置这个模块的通道和中断回调函数，先来看下配置结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image5.png" alt=""></p><p>主要配置的是图中圈出来的几个参数：</p><ul><li>名称：建议和通道匹配；</li><li>通道：根据前文讲的配置选择，本书使用的是通道6；</li><li>触发方式：支持上升沿/下降沿/双边沿/低电平触发，根据硬件设计本书使用下降沿触发；</li><li>中断回调函数：用户自定义；</li><li>中断优先级：根据需求选择，本书使用的是12级优先级；</li></ul><p>将上面的配置设置好之后就可以点击RASC的“Generate Project Content”生成工程了。</p><h3 id="_12-1-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_12-1-2-配置信息解读" aria-hidden="true">#</a> 12.1.2 配置信息解读</h3><p>使用RASC配置ICU后，生成了ICU的IRQ通道对应引脚配置信息和ICU本身的配置信息。以本章的实验“1201_icu_irq”为例。</p><ol><li>引脚配置信息</li></ol><p>该信息会在1201_icu_irq\\ra_gen\\pin_data.c文件里生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
      <span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_00_PIN_00<span class="token punctuation">,</span> 
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_IRQ_ENABLE
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_DIRECTION_INPUT<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略信息）
      <span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_00<span class="token punctuation">,</span> 
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_DRIVE_HIGH <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_DIRECTION_OUTPUT <span class="token operator">|</span>
                  <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_OUTPUT_LOW<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03~05行：将按键引脚P000配置为输入方向且使能IRQ；</li><li>第07~09行：将LED引脚P0400配置为输出方向且默认输出高电平；</li></ul><ol start="2"><li>ICU配置信息</li></ol><p>ICU的配置信息分为两部分：ICU模块信息和ICU中断服务函数。</p><p>ICU模块信息会在1201_icu_irq\\ra_gen\\common_data.c文件里生成。在RASC里配置的IRQ通道、触发方式和中断服务函数等，都会在common_data.c生成一个external_irq_cfg_t结构体，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">external_irq_cfg_t</span> g_external_irq6_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span> <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>trigger <span class="token operator">=</span> EXTERNAL_IRQ_TRIG_FALLING<span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
  <span class="token punctuation">.</span>p_callback <span class="token operator">=</span> ex_irq6_callback<span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第02行：选择通道；</li><li>第03行：设置触发方式；</li><li>第05行：注册中断回调函数；</li></ul><p>而ICU中断服务函数注册是在vector_data.c里完成的，在这个文件中会定义一个中断向量表，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">VECTOR_DATA_IRQ_COUNT <span class="token operator">&gt;</span> <span class="token number">0</span></span></span>
    BSP_DONT_REMOVE <span class="token keyword">const</span> <span class="token class-name">fsp_vector_t</span> g_vector_table<span class="token punctuation">[</span>BSP_ICU_VECTOR_MAX_ENTRIES<span class="token punctuation">]</span> <span class="token function">BSP_PLACE_IN_SECTION</span><span class="token punctuation">(</span>BSP_SECTION_APPLICATION_VECTORS<span class="token punctuation">)</span> <span class="token operator">=</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sci_uart_rxi_isr<span class="token punctuation">,</span> <span class="token comment">/* SCI7 RXI (Received data full) */</span>
        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sci_uart_txi_isr<span class="token punctuation">,</span> <span class="token comment">/* SCI7 TXI (Transmit data empty) */</span>
        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sci_uart_tei_isr<span class="token punctuation">,</span> <span class="token comment">/* SCI7 TEI (Transmit end) */</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> sci_uart_eri_isr<span class="token punctuation">,</span> <span class="token comment">/* SCI7 ERI (Receive error) */</span>
        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> r_icu_isr<span class="token punctuation">,</span> <span class="token comment">/* ICU IRQ6 (External pin interrupt 6) */</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">bsp_interrupt_event_t</span> g_interrupt_event_link_select<span class="token punctuation">[</span>BSP_ICU_VECTOR_MAX_ENTRIES<span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BSP_PRV_IELS_ENUM</span><span class="token punctuation">(</span>EVENT_SCI7_RXI<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* SCI7 RXI (Received data full) */</span>
        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BSP_PRV_IELS_ENUM</span><span class="token punctuation">(</span>EVENT_SCI7_TXI<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* SCI7 TXI (Transmit data empty) */</span>
        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BSP_PRV_IELS_ENUM</span><span class="token punctuation">(</span>EVENT_SCI7_TEI<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* SCI7 TEI (Transmit end) */</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BSP_PRV_IELS_ENUM</span><span class="token punctuation">(</span>EVENT_SCI7_ERI<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* SCI7 ERI (Receive error) */</span>
        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BSP_PRV_IELS_ENUM</span><span class="token punctuation">(</span>EVENT_ICU_IRQ6<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* ICU IRQ6 (External pin interrupt 6) */</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第04~07行：注册UART通信的中断服务函数；</li><li>第08行：注册ICU的中断服务函数；</li><li>第10~17行：链接中断服务函数表；</li></ul><p>本章需要了解的是ICU的中断服务函数r_icu_isr的实现，其源码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">r_icu_isr</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Save context if RTOS is used */</span>
    FSP_CONTEXT_SAVE

    IRQn_Type             irq    <span class="token operator">=</span> <span class="token function">R_FSP_CurrentIrqGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">R_FSP_IsrContextGet</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>

    bool level_irq <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>EXTERNAL_IRQ_TRIG_LEVEL_LOW <span class="token operator">==</span> R_ICU<span class="token operator">-&gt;</span>IRQCR_b<span class="token punctuation">[</span>p_ctrl<span class="token operator">-&gt;</span>channel<span class="token punctuation">]</span><span class="token punctuation">.</span>IRQMD<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        level_irq <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Clear the IR bit before calling the user callback so that if an edge is detected while the ISR is active
         * it will not be missed. */</span>
        <span class="token function">R_BSP_IrqStatusClear</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p_ctrl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p_ctrl<span class="token operator">-&gt;</span>p_callback<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">BSP_TZ_SECURE_BUILD</span></span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token comment">/* Set data to identify callback to user, then call user callback. */</span>
        <span class="token class-name">external_irq_callback_args_t</span> args<span class="token punctuation">;</span>
        args<span class="token punctuation">.</span>channel   <span class="token operator">=</span> p_ctrl<span class="token operator">-&gt;</span>channel<span class="token punctuation">;</span>
        args<span class="token punctuation">.</span>p_context <span class="token operator">=</span> p_ctrl<span class="token operator">-&gt;</span>p_context<span class="token punctuation">;</span>
        p_ctrl<span class="token operator">-&gt;</span><span class="token function">p_callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06~07行：获取中断信息；</li><li>第18行：清除中断；</li><li>第27~29行：记录中断信息，它将作为参数传递给中断服务函数；</li><li>第30行：执行该中断的回调函数</li></ul><h3 id="_1-1-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_1-1-3-中断回调函数" aria-hidden="true">#</a> 1.1.3 中断回调函数</h3><p>中断回调函数的原型已经在common_data.h中进行了声明，需要用户在自己的程序中实现它，其原型代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ex_irq6_callback</span><span class="token punctuation">(</span><span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其参数类型是external_irq_callback_args_t结构体指针，这个结构体的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_external_irq_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token comment">/** Placeholder for user data. Set in @ref external_irq_api_t::open function in @ref external_irq_cfg_t. */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span>     channel<span class="token punctuation">;</span>  <span class="token comment">///&lt; The physical hardware channel that caused the interrupt.</span>
<span class="token punctuation">}</span> <span class="token class-name">external_irq_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体仅表明外部中断的内容（context）和通道（channel），而context在初始化时被设置为NULL，没有使用。因而能使用的只有通道值：用来判定发生了哪个通道的中断。</p><p>例如本章的实验就是：在中断回调函数中发现发生了按键中断后，使用滴答定时器消除抖动，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> uwPressTick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ex_irq6_callback</span><span class="token punctuation">(</span><span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>channel <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token comment">// 按键的GPIO的ICU通道是6</span>
    <span class="token punctuation">{</span>
        uwPressTick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消除抖动的原理在后续章节讲解。</p><h3 id="_12-1-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_12-1-4-api接口及其用法" aria-hidden="true">#</a> 12.1.4 API接口及其用法</h3><p>在路径1201_icu_irq/ra/fsp/inc/api/r_external_irq_api.h中定义了ICU模块的接口，它定义了一个结构体类型external_irq_api_t，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_external_irq_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">external_irq_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span>
                             <span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">external_irq_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体的C文件中，需要定义一个external_irq_api_t结构体变量，比如在r_icu.c里实现了如下结构体变量的定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">external_irq_api_t</span> g_external_irq_on_icu <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open        <span class="token operator">=</span> R_ICU_ExternalIrqOpen<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>enable      <span class="token operator">=</span> R_ICU_ExternalIrqEnable<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>disable     <span class="token operator">=</span> R_ICU_ExternalIrqDisable<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet <span class="token operator">=</span> R_ICU_ExternalIrqCallbackSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close       <span class="token operator">=</span> R_ICU_ExternalIrqClose<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用ICU的控制接口，可以调用结构体g_external_irq_on_icu里的各个函数指针，也可以直接调用r_icu.c里实现的各个函数。</p><ol><li>打开/关闭外部中断</li></ol><p>外部中断open函数用于配置外部中断的类型、设置回调函数、设置通道等，函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">external_irq_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token function">R_ICU_ExternalIrqOpen</span> <span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                                 <span class="token class-name">external_irq_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> p_api_ctrl<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    p_ctrl<span class="token operator">-&gt;</span>irq <span class="token operator">=</span> p_cfg<span class="token operator">-&gt;</span>irq<span class="token punctuation">;</span>	<span class="token comment">// 中断类型</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">/* Initialize control block. */</span>
    p_ctrl<span class="token operator">-&gt;</span>p_callback <span class="token operator">=</span> p_cfg<span class="token operator">-&gt;</span>p_callback<span class="token punctuation">;</span>
    p_ctrl<span class="token operator">-&gt;</span>p_context  <span class="token operator">=</span> p_cfg<span class="token operator">-&gt;</span>p_context<span class="token punctuation">;</span>
    p_ctrl<span class="token operator">-&gt;</span>channel    <span class="token operator">=</span> p_cfg<span class="token operator">-&gt;</span>channel<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    p_ctrl<span class="token operator">-&gt;</span>open <span class="token operator">=</span> ICU_OPEN<span class="token punctuation">;</span>

    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>open函数的第一个参数是external_irq_ctrl_t类型的，和前面的许多外设一样，这是一个void类型的结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token class-name">external_irq_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>open函数的第二个参数是external_irq_cfg_t的，这个结构体描述了外部中断的通道、优先级、终端类型、触发方式等，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_external_irq_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span>                 channel<span class="token punctuation">;</span>   <span class="token comment">///&lt; Hardware channel used.</span>
    <span class="token class-name">uint8_t</span>                 ipl<span class="token punctuation">;</span>       <span class="token comment">///&lt; Interrupt priority</span>
    IRQn_Type               irq<span class="token punctuation">;</span>       <span class="token comment">///&lt; NVIC interrupt number assigned to this instance</span>
    <span class="token class-name">external_irq_trigger_t</span>  trigger<span class="token punctuation">;</span>   <span class="token comment">///&lt; Trigger setting.</span>
    <span class="token class-name">external_irq_pclk_div_t</span> pclk_div<span class="token punctuation">;</span>  <span class="token comment">///&lt; Digital filter clock divisor setting.</span>
    bool filter_enable<span class="token punctuation">;</span>                <span class="token comment">///&lt; Digital filter enable/disable setting.</span>

    <span class="token comment">/** Callback provided external input trigger occurs. */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/** Placeholder for user data.  Passed to the user callback in @ref external_irq_callback_args_t. */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_extend<span class="token punctuation">;</span>             <span class="token comment">///&lt; External IRQ hardware dependent configuration.</span>
<span class="token punctuation">}</span> <span class="token class-name">external_irq_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭外部中断close函数则比较简单，FSP在里面禁止中断，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token function">R_ICU_ExternalIrqClose</span> <span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> p_api_ctrl<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">/* Cleanup. Disable interrupt */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>irq <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Disable the interrupt, and then clear the interrupt pending bits and interrupt status. */</span>
        <span class="token function">R_BSP_IrqDisable</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">R_FSP_IsrContextSet</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>irq<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p_ctrl<span class="token operator">-&gt;</span>open <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第09行：失能中断；</li><li>第12行：将open标志清零；</li></ul><p>开发者调用open函数来初始化外部中断、注册中断回调函数，但是需要注意的是，open函数并没有使能中断。可以参考下面的代码打开中断：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_external_irq6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_external_irq6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                            g_external_irq6<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open Key device: %s!\\r\\n&quot;</span><span class="token punctuation">,</span> _iodev<span class="token operator">-&gt;</span>DevInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使能/失能外部中断</li></ol><p>使能和禁止外部中断的函数比较简单，只需要传入一个外部中断接口控制结构体external_irq_ctrl_t类型的参数即可，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个函数的实现也特别简单：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token function">R_ICU_ExternalIrqEnable</span> <span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> p_api_ctrl<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">/* Clear the interrupt status and Pending bits, before the interrupt is enabled. */</span>
    <span class="token function">R_BSP_IrqEnable</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">fsp_err_t</span> <span class="token function">R_ICU_ExternalIrqDisable</span> <span class="token punctuation">(</span><span class="token class-name">external_irq_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">icu_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> p_api_ctrl<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token comment">/* Disable the interrupt, and then clear the interrupt pending bits and interrupt status. */</span>
    <span class="token function">R_BSP_IrqDisable</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06行：调用内联函数R_BSP_IrqEnable使能中断；</li><li>第15行：调用内联函数R_BSP_IrqDisable失能中断；</li></ul><p>开发者可以参考如下代码来使能外部中断：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_external_irq6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_external_irq6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to enable %s&#39;s irq!\\r\\n&quot;</span><span class="token punctuation">,</span> _iodev<span class="token operator">-&gt;</span>DevInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-2-中断获取按键状态实验" tabindex="-1"><a class="header-anchor" href="#_12-2-中断获取按键状态实验" aria-hidden="true">#</a> 12.2 中断获取按键状态实验</h2><h3 id="_12-2-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_12-2-1-硬件连接" aria-hidden="true">#</a> 12.2.1 硬件连接</h3><p>本章实验使用的是板载按键，其GPIO是P000，原理图如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image6.PNG" style="zoom:150%;"><p>从图中可知，当按键被按下时P000直接接地，呈现低电平；按键松开后P000被R15上拉到VDD，呈现高电平。</p><h3 id="_12-2-2-按键的驱动解析" tabindex="-1"><a class="header-anchor" href="#_12-2-2-按键的驱动解析" aria-hidden="true">#</a> 12.2.2 按键的驱动解析</h3><p>按键按下和松开后，电平的变化并不是立即从高电平跳变到低电平和从低电平跳变到高电平，中间是会有一段的抖动的，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-12/image7.png" style="zoom:150%;"><p>开发者需要避开抖动期，在按键稳定时再获取按键状态。</p><h3 id="_12-2-3-按键的驱动程序" tabindex="-1"><a class="header-anchor" href="#_12-2-3-按键的驱动程序" aria-hidden="true">#</a> 12.2.3 按键的驱动程序</h3><ol><li>中断回调函数</li></ol><p>在中断回调函数中更新按键按下时刻T+100，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> uwPressTick<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ex_irq6_callback</span><span class="token punctuation">(</span><span class="token class-name">external_irq_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>channel <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token comment">// 按键的GPIO的ICU通道是6</span>
    <span class="token punctuation">{</span>
        uwPressTick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于机械按键，用户按下一次，它的机械开关可能震动多次、触发多次中断。消除抖动的原理为：发生中断时不要即刻处理，而是“推迟处理”。在第6行那里，发生中断时更新uwPressTick为“当前时间+100”。比如在短时间内发生了20次震动，导致20次中断，uwPressTick被更新、推迟20次，当机械震动停止后，最后一次中断更新的uwPressTick不再变化。当SysTick的dwTick到达uwPressTick时，再执行用户程序。这样，20次中断只导致执行1次用户程序，这就消除了抖动。</p><ol start="2"><li>IO对象封装</li></ol><p>本实验将LED和按键统一封装为一种GPIO设备对象，用一个结构体IODev表示该设备，在结构体中实现对设备的描述、初始化和读写。结构体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">IODev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span>         <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">int</span>          <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>          <span class="token punctuation">(</span><span class="token operator">*</span>Write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> IODevState_t level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">IODevState_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>IODev<span class="token punctuation">,</span> <span class="token operator">*</span>PIODev<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IO设备的电平状态有高低电平两类，IODevState_t枚举类型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    LowLevel<span class="token punctuation">,</span>
    HighLevel<span class="token punctuation">,</span>
    ErrLevel <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>IODevState_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>外部中断初始化</li></ol><p>本章实验是使用按键控制LED，所以需要初始化按键并使能它的中断，也要初始化LED的GPIO，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">IODrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">/* 初始化按键对应的外部中断且使能 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_external_irq6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_external_irq6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                                    g_external_irq6<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open Key device: %s!\\r\\n&quot;</span><span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        err <span class="token operator">=</span> g_external_irq6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_external_irq6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to enable %s&#39;s irq!\\r\\n&quot;</span><span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to enable %s&#39;s irq!\\r\\n&quot;</span><span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 初始化LED灯GPIO */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;UserLed&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_ioport<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_ERR_ALREADY_OPEN <span class="token operator">==</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. GPIOs are already open and init.\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open Led device: %s!\\r\\n&quot;</span><span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第08~15行：如果打开按键GPIO的外部中断成功了，才去使能这个外部中断；</li><li>第26~36行：初始化LED的GPIO；</li></ul><ol start="4"><li>按键抖动处理</li></ol><p>在中断回调函数中更新uwPressTick为“当前时间+100”，意图在100ms之后再处理。谁来处理？在SysTick中断函数里处理，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dwTick <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">KeyProcessJitter</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> tick<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">KeyProcessJitter</span><span class="token punctuation">(</span>dwTick<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>l 第03行：让dwTick累加1； l 第05行：调用KeyProcessJitter函数处理按键</p><p>关键在于KeyProcessJitter函数，此函数在每个SysTick中断中都被调用，但是只有dwTick值等于uwPressTick时才操作LED：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> IODevState_t gLedLevel <span class="token operator">=</span> HighLevel<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">KeyProcessJitter</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> tick<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tick <span class="token operator">==</span> uwPressTick<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        gLedDev<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gLedDev<span class="token punctuation">,</span> gLedLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        gLedLevel <span class="token operator">=</span> <span class="token operator">!</span>gLedLevel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>        
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-2-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_12-2-4-测试程序" aria-hidden="true">#</a> 12.2.4 测试程序</h3><p>因为是在中断中处理的按键和改变LED状态，因而本次实验无需在main中编写测试代码。</p><h3 id="_12-2-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_12-2-5-上机实验" aria-hidden="true">#</a> 12.2.5 上机实验</h3><p>在hal_entry()函数中初始化滴答定时器、UART、按键设备和LED设备即可，当按键按下时中断服务函数被调用。han_entry()函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_uart.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_gpio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_systick.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_data.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    IODev <span class="token operator">*</span>ptKeyDev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptKeyDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get UserKey!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    IODev <span class="token operator">*</span>ptLedDev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserLed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptLedDev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get UserLed!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptKeyDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptKeyDev<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptLedDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptLedDev<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将编译出来的二进制可执行文件烧录到芯片中运行，使用串口调试助手观察打印信息，在开发板上按下按键可以控制LED。</p>`,111),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","chapter12.html.vue"]]);export{r as default};
