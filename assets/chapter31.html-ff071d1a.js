import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第31章-wifi-蓝牙模块驱动实验" tabindex="-1"><a class="header-anchor" href="#第31章-wifi-蓝牙模块驱动实验" aria-hidden="true">#</a> 第31章 WIFI&amp;蓝牙模块驱动实验</h1><p>本章目标</p><ul><li>了解WiFi蓝牙芯片W800的通信协议；</li><li>学会使用串口收发AT指令实现开发板联网；</li></ul><h2 id="_31-1-w800出厂固件烧写" tabindex="-1"><a class="header-anchor" href="#_31-1-w800出厂固件烧写" aria-hidden="true">#</a> 31.1 W800出厂固件烧写</h2><p>烧写W800的固件时，需要使用X/Y modem串口协议。因而需要支持X/Y modem协议的串口工具，本书使用Xshell。</p><h3 id="_31-1-1-xshell软件安装" tabindex="-1"><a class="header-anchor" href="#_31-1-1-xshell软件安装" aria-hidden="true">#</a> 31.1.1 Xshell软件安装</h3><p>免费体验版的Xshell下载入口地址是：</p><p>https://www.xshell.com/zh/free-for-home-school/</p><p>进入网站填写信息后，Xshell官方会将免费下载链接下发到填写的邮箱：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image1.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image2.png" alt=""></p><p>将邮箱中的链接复制粘贴到浏览器即可进行下载，下载安装。</p><h3 id="_31-1-2-xshell的使用" tabindex="-1"><a class="header-anchor" href="#_31-1-2-xshell的使用" aria-hidden="true">#</a> 31.1.2 Xshell的使用</h3><p>Xshell安装好之后，双击运行软件，在弹出的会话窗口点击“新建”添加串口连接：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image3.png" alt=""></p><p>然后在“连接”项中将协议设置为“Serial”，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image4.png" alt=""></p><p>接着去“连接”中的“串口”处选择串口号（下图的COM20只是一个例子，按照下一节的说明使用USB串口连接W800后，端口好可能不一样）和设置通信参数，如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image5.png" alt=""></p><p>设置好之后点击右下角的“连接”即可连接指定串口设备了。</p><h3 id="_31-1-3-硬件连接" tabindex="-1"><a class="header-anchor" href="#_31-1-3-硬件连接" aria-hidden="true">#</a> 31.1.3 硬件连接</h3><p>W800的硬件接口图如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image6.png" alt=""></p><p>按上图将硬件连接好之后，使用Xshell打开串口，随后再将上图的WIFI_RESET引脚短接GND复位W800，之后W800就会一直往Xshell发送字符’C’，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image7.png" alt=""></p><p>进入此状态后，就可以按照下节内容烧写固件了。</p><h3 id="_31-1-4-固件烧写步骤" tabindex="-1"><a class="header-anchor" href="#_31-1-4-固件烧写步骤" aria-hidden="true">#</a> 31.1.4 固件烧写步骤</h3><p>W800进入烧写状态后，在Xshell的显示窗口点击鼠标右键，选择“传输”-&gt;“YMODEM(Y)”-&gt;“用YMODEM发送(S)”，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image8.png" alt=""></p><p>随后进入资料包中固件所在位置，选择w800.fls开始烧写：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image9.png" alt=""></p><p>最后等待传输烧写完毕：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image10.png" alt=""></p><p>烧写完成后W800会继续对外输出’C’表示还在烧写状态，此时将BOOT引脚与GND断开，并且再次手动复位W800，就可以让W800进入正常工作状态，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image11.png" alt=""></p><p>当Xshell打印出“user task”后，就表明W800已经进入工作状态了。此时可以在Xshell窗口直接输入指令“AT+”并车键（Xshell不会显示输入指令），如果返回“+OK”固件烧写成功了，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image12.png" alt=""></p><h2 id="_31-2-at-指令简介" tabindex="-1"><a class="header-anchor" href="#_31-2-at-指令简介" aria-hidden="true">#</a> 31.2 AT+指令简介</h2><p>W800的固件AT+指令，在官方手册《WM_W800_SDK_AT指令用户手册.pdf》中有详细描述，这个文档已经放到本书的配套资料中。</p><p>W800支持的AT+指令非常的多，本书仅展现几个常用的指令。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>指令格式</strong></th><th><strong>响应</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AT+</td><td>“AT+\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>测试指令，响应+OK表示测试成功</td></tr><tr><td>AT+Z</td><td>“AT+Z\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>软件复位，响应+OK表示复位指令发送成功，复位后会响应“user task”</td></tr><tr><td>AT+E</td><td>“AT+E\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>回显切换指令，输入一次切换一次状态，在回显状态下W800会连带指令和结果一起响应</td></tr><tr><td>AT+RSTF</td><td>“AT+RSTF\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>恢复FLASH中的出厂设置。恢复后的设置需系统重启后才能生效</td></tr><tr><td>AT+WPRT</td><td>“AT+WPRT=[!?][type]\\r\\n”例如：AT+WPRT=0\\r\\n</td><td>“+OK[=type]\\r\\n\\r\\n”例如：+OK=0\\r\\n\\r\\n</td><td>设置 /查询无线网络类型:l 0:STA;l 2:SoftAP;l 3:APSTA</td></tr><tr><td>AT+WSCAN</td><td>“AT+WSCAN\\r\\n”</td><td>“+OK=……”</td><td>该指令仅在无线网络类型为 STA时有效，用于扫描无线网络，完成后返回。</td></tr><tr><td>AT+SSID</td><td>“AT+SSID=[!?][SSID]”例如：AT+SSID=100ask\\r\\n</td><td>“+OK[=ssid]\\r\\n”</td><td>设置 /查询无线网络名称，即 SSID</td></tr><tr><td>AT+KEY</td><td>“AT+KEY=[!?][format],[index],[key]\\r\\n”</td><td>“+OK[=format,index,key]\\r\\n”</td><td>设置 /查询网络密钥</td></tr><tr><td>AT+WJOIN</td><td>“AT+WJOIN\\r\\n”</td><td>“+OK=&amp;ltbssid&amp;gt,&amp;lttype&amp;gt…\\r\\n”</td><td>如果当前网络类型为为 STA 时，本指令功能为连接 AP。如果当前网络类型SoftAP或者APSTA 时，本指令功能为创建</td></tr><tr><td>AT+WLEAV</td><td>“AT+WLEAV\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>无线网络类型为 STA时，用于断开当前无线网络。</td></tr><tr><td>AT+NIP</td><td>“AT+NIP=[!?][type]…\\r\\n”</td><td>“+OK[=type]…\\r\\n”</td><td>当 无线网卡作为STA时，该指令用于设置 /查询本端 IP地址。</td></tr><tr><td>AT+LKSTT</td><td>“AT+LKSTT\\r\\n”</td><td>+OK[=status,ip,netmask,gateway,dns1,dns2]\\r\\n\\r\\n</td><td>查询本端网络连接状态</td></tr><tr><td>AT+SKCT</td><td>“AT+SKCT=[protocol]…\\r\\n”</td><td>“+OK=&amp;ltsocket&amp;gt\\r\\n”</td><td>建立 socket。在 client模式，等待连接完成（成功或失败）后返回；在 server模式下，创建完成后直接返回。</td></tr><tr><td>AT+SKCLS</td><td>“AT+SKCLS=&amp;ltsocket&amp;gt\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>关闭指定的socket。</td></tr><tr><td>AT+SKSND</td><td>“AT+SKSND=[socket],[size]\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>响应OK后发送数据流</td></tr><tr><td>AT+SKRCV</td><td>“AT+SKRCV=[socket],[size]\\r\\n”</td><td>“+OK\\r\\n\\r\\n”</td><td>响应OK后会将rxdata中的数据发送到串口</td></tr></tbody></table><h2 id="_31-3-模块配置" tabindex="-1"><a class="header-anchor" href="#_31-3-模块配置" aria-hidden="true">#</a> 31.3 模块配置</h2><p>本实验只使用到UART，请参考前文的操作在FSP中配置UART及其引脚。本次实验仅展示配置结果。</p><h3 id="_31-3-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_31-3-1-硬件连接" aria-hidden="true">#</a> 31.3.1 硬件连接</h3><p>板载W800的原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image13.png" alt=""></p><p>使用到的RA6M5处理器引脚是P505和P506，对应于SCI的UART6的TX/RX引脚。</p><h3 id="_31-3-2-uart模块配置" tabindex="-1"><a class="header-anchor" href="#_31-3-2-uart模块配置" aria-hidden="true">#</a> 31.3.2 UART模块配置</h3><ol><li>UART6</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image14.png" alt=""></p><ol start="2"><li>UART7</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image15.png" alt=""></p><h2 id="_31-4-驱动程序" tabindex="-1"><a class="header-anchor" href="#_31-4-驱动程序" aria-hidden="true">#</a> 31.4 驱动程序</h2><h3 id="_31-4-1-设备对象封装" tabindex="-1"><a class="header-anchor" href="#_31-4-1-设备对象封装" aria-hidden="true">#</a> 31.4.1 设备对象封装</h3><p>在《30.3设备对象封装》的基础上，对定时器的设备对象进行了改进，添加了一个Timeout函数，它实现了延时函数。代码如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> gSystickDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Systick&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> SystickInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Start <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Stop <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Timeout <span class="token operator">=</span> HAL_Delay<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">SystickTimerDevicesCreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">TimerDeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gSystickDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gSystickDevice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gSystickDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> timeout<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ptdev<span class="token operator">-&gt;</span>status<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dwStart <span class="token operator">=</span> dwTick<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dwWait <span class="token operator">=</span> timeout<span class="token punctuation">;</span>

    <span class="token comment">/* Add a freq to guarantee minimum wait */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dwWait <span class="token operator">&lt;</span> HAL_MAX_DELAY<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        dwWait <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dwTick <span class="token operator">-</span> dwStart<span class="token punctuation">)</span> <span class="token operator">&lt;</span> dwWait<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-4-2-初始化uart" tabindex="-1"><a class="header-anchor" href="#_31-4-2-初始化uart" aria-hidden="true">#</a> 31.4.2 初始化UART</h3><p>本次实验会用到两个UART：</p><ul><li>UART6：和WiFi蓝牙芯片W800通信；</li><li>UART7：调试打印；</li></ul><p>对于UART6，由于W800每次收发的数据长度是不确定的，不适合用DTC或者DMA来辅助传输数据，因而使用环形缓冲区。在初始化UART6的时候申请了一个环形缓冲区，而UART7作为调试串口，没有使用环形缓冲区。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>gWiFiBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> gWiFiDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;WiFi Uart&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> UARTDrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> UARTDrvRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Write <span class="token operator">=</span> UARTDrvWrite<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">UartDevicesCreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gLogDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UartDeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gWiFiDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gLogDevice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gLogDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_uart6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_uart6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_uart6<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            gWiFiBuffer <span class="token operator">=</span> <span class="token function">RingBufferNew</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> gWiFiBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_uart7<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-4-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_31-4-3-中断回调函数" aria-hidden="true">#</a> 31.4.3 中断回调函数</h3><p>对于UART6和UART7，需要提供中断回调函数。它们的操作是类似的，UART6需要处理“发送完成”和“接收完成”两种情况，而UART7只需要处理“发送完成”。UART6的中断回调函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">uart6_callback</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> UART_EVENT_RX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> UART_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gUart6TxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> UART_EVENT_RX_CHAR<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gWiFiBuffer<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gWiFiBuffer<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p_args<span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> UART_EVENT_ERR_PARITY<span class="token operator">:</span><span class="token keyword">case</span> UART_EVENT_ERR_FRAMING<span class="token operator">:</span>
        <span class="token keyword">case</span> UART_EVENT_ERR_OVERFLOW<span class="token operator">:</span><span class="token keyword">case</span> UART_EVENT_BREAK_DETECT<span class="token operator">:</span>
        <span class="token keyword">case</span> UART_EVENT_TX_DATA_EMPTY<span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第11行：将UART6的发送完成标志写为true；</li><li>第16行：如果接收到数据，将它写入到UART6的缓冲区中；</li></ul><h3 id="_31-4-4-uart发送函数" tabindex="-1"><a class="header-anchor" href="#_31-4-4-uart发送函数" aria-hidden="true">#</a> 31.4.4 UART发送函数</h3><p>UART设备的发送函数比较简单，调用UART6和UART7设备结构体的write函数即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>static int UARTDrvWrite(struct UartDev *ptdev, unsigned char * const buf, unsigned int length)
{
    if(NULL == ptdev)   return -EINVAL;
    if(NULL == buf)     return -EINVAL;
    if(0 == length)     return -EINVAL;
    
    switch(ptdev-&gt;channel)
    {
        case 0:case 1:case 2:
        case 3:case 4:case 5:
        case 6:
        {
            fsp_err_t err = g_uart6.p_api-&gt;write(g_uart6.p_ctrl, buf, length);
            assert(FSP_SUCCESS == err);
            UART6WaitTxCplt();
            break;
        }
        case 7:
        {
            fsp_err_t err = g_uart7.p_api-&gt;write(g_uart7.p_ctrl, buf, length);
            assert(FSP_SUCCESS == err);
            UART7WaitTxCplt();
            break;
        }
        case 8:case 9:
            break;
        default:break;
    }
    return ESUCCESS;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-4-5-uart数据读取函数" tabindex="-1"><a class="header-anchor" href="#_31-4-5-uart数据读取函数" aria-hidden="true">#</a> 31.4.5 UART数据读取函数</h3><p>对于UART6，读取UART的数据时，是从它的环形缓冲区里读取数据。对于UART7，调用FSP封装的函数读数据。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">UARTDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buf<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>gWiFiBuffer<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gWiFiBuffer<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">!=</span> length<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">UART7WaitRxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-5-w800-wifi蓝牙模块" tabindex="-1"><a class="header-anchor" href="#_31-5-w800-wifi蓝牙模块" aria-hidden="true">#</a> 31.5 W800 WiFi蓝牙模块</h2><p>WiFi蓝牙模块的设备驱动代码在Devices/wifi_bluetooth文件夹中，文件dev_wifi_bt.c/.h。</p><h3 id="_31-5-1-初始化w800" tabindex="-1"><a class="header-anchor" href="#_31-5-1-初始化w800" aria-hidden="true">#</a> 31.5.1 初始化W800</h3><p>要初始化W800，实际是初始化W800用到的串口设备，即初始化UART6：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> UartDevice <span class="token operator">*</span>pWiFiBtDev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">WiFiBtDevInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    pWiFiBtDev <span class="token operator">=</span> <span class="token function">UartDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;WiFi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pWiFiBtDev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">)</span> <span class="token operator">!=</span> ESUCCESS<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-5-2-at-指令返回判定" tabindex="-1"><a class="header-anchor" href="#_31-5-2-at-指令返回判定" aria-hidden="true">#</a> 31.5.2 AT+指令返回判定</h3><p>在AT+指令简介中已经直到，每个AT+指令都有其对应的响应。对于大多数指令，只需要判断它收到的回应是不是“+OK”即可。将这个功能封装为如下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;+ERR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第08行：如果接收的数据中读出来有指定响应字符串，就返回ESUCCESS；</li><li>第12行：如果响应中有“+ERR”就表示指令失败，返回-EIO；</li><li>第16行：如果想要的响应或者错误响应都没有，则继续从缓冲区中读取数据并打印出来；</li><li>第21~22行：超时等待倒计时，如果是超时退出则返回-EIO；</li></ul><h3 id="_31-5-3-设置w800的工作模式" tabindex="-1"><a class="header-anchor" href="#_31-5-3-设置w800的工作模式" aria-hidden="true">#</a> 31.5.3 设置W800的工作模式</h3><p>W800的WiFi功能有3个工作模式：STA、SoftAP和APSTA，定义了一个枚举类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    STA     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    SoftAP  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    APSTA   <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>WorkType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发出指令“AT+WPRT=&amp;lttype&amp;gt\\r\\n”（注意必须要有’\\r’），就可以设置W800的工作模式。具体的实现很简单，调用UART设备的write函数发送这个字符串，然后等待响应即可。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevSetWorkType</span><span class="token punctuation">(</span>WorkType type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;AT+WPRT=%d\\r\\n&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ESUCCESS<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-5-4-设置w800的dhcp状态" tabindex="-1"><a class="header-anchor" href="#_31-5-4-设置w800的dhcp状态" aria-hidden="true">#</a> 31.5.4 设置W800的DHCP状态</h3><p>如果想让W800在连接上了热点之后自动获得IP地址，则需要使能W800的DHCP功能；如果想要固定W800的IP地址，则需要关闭DHCP自动分配功能，并且指定IP。</p><p>使能DHCP功能的指令是“AT+NIP=0\\r\\n”，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevEnableDHCP</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;AT+NIP=0\\r\\n&quot;</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS<span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要手工设置IP，使用指令“AT+NIP=1,[IP],[net_mask],[gate_way]\\r\\n”，它会关闭DHCP功能、指定IP、子网掩码和默认网关。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevDisableDHCP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>netmask<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>gateway<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;AT+NIP=1,%s,%s,%s\\r\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> netmask<span class="token punctuation">,</span> gateway<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS<span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-5-5-连接指定热点" tabindex="-1"><a class="header-anchor" href="#_31-5-5-连接指定热点" aria-hidden="true">#</a> 31.5.5 连接指定热点</h3><p>连接热点需要3个指令：</p><ul><li>设置热点的名称：AT+SSID=[SSID]\\r\\n；</li><li>设置连接热点的密码：AT+KEY=[密钥格式],[密钥索引号],[密钥字符串]\\r\\n；</li><li>连接热点：AT+WJOIN\\r\\n；</li></ul><p>对于设置密钥的参数，手册中是这样解释的：</p><ul><li>密钥格式：0-Hex格式；1-ASCII格式；</li><li>密钥索引号：1~4用于WEP加密密钥，其它加密方式固定为0；</li><li>密钥字符串：以双引号包围，根据不同的安全模式，密钥使用的长度与格式要求定义如下：</li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image16.png" alt=""></p><p>本实验将连接热点的三个指令封装到一个函数中，调用者只需要传入连接热点的名称和密码即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevConnectWiFi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>

    <span class="token keyword">char</span> ssid<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>ssid<span class="token punctuation">,</span> <span class="token string">&quot;AT+SSID=%s\\r\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ssid<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ssid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    
    <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;AT+KEY=1,0,%s\\r\\n&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    
    <span class="token keyword">char</span> join<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AT+WJOIN\\r\\n&quot;</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>join<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>join<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret1 <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span>ESUCCESS <span class="token operator">&amp;&amp;</span> ret1<span class="token punctuation">)</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-5-6-断开热点连接" tabindex="-1"><a class="header-anchor" href="#_31-5-6-断开热点连接" aria-hidden="true">#</a> 31.5.6 断开热点连接</h3><p>断开热点的连接，只需要发送指令“AT+WLEAV\\r\\n”即可，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevDisconnectWiFi</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>leavw <span class="token operator">=</span> <span class="token string">&quot;AT+WLEAV\\r\\n&quot;</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>leavw<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>leavw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span>“<span class="token operator">+</span>OK”<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31-5-7-获取本地ip" tabindex="-1"><a class="header-anchor" href="#_31-5-7-获取本地ip" aria-hidden="true">#</a> 31.5.7 获取本地IP</h3><p>当连接了热点并且使能了DHCP自动获取IP功能，用户可能想要知道本机分配的IP地址是多少，这时候就需要使用指令“AT+LKSTT\\r\\n”来查询本机IP了，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevGetLocalIP</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> lkstt<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;AT+LKSTT\\r\\n&quot;</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>lkstt<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>lkstt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> timeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于此指令需要打印”+OK”之后的类容，不容易判定结尾，因而故意设置很长的超时，以便接收到全部数据，再把它打印出来。读者可以改进代码，从中解析出IP。</p><h3 id="_31-5-8-建立socket连接" tabindex="-1"><a class="header-anchor" href="#_31-5-8-建立socket连接" aria-hidden="true">#</a> 31.5.8 建立socket连接</h3><p>W800连上热点之后，要和某个服务器进行网络通信，需要使用指令“AT+SKCT”。这个指令需要传入的参数比较多：协议、本机角色、IP地址、远端端口和本机端口，本书对此指令的参数进行了封装，用一个结构体描述连接信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    TCP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    UDP <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>NetworkProtocol<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    Client <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    Server <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>LocalRole<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    NetworkProtocol Protocl<span class="token punctuation">;</span>
    LocalRole       Role<span class="token punctuation">;</span>
    <span class="token keyword">char</span>            <span class="token operator">*</span>IP<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    RemotePort<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    LocalPort<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    SocketPort<span class="token punctuation">;</span>
<span class="token punctuation">}</span>ConnectInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用程序要构造一个ConnectInfo结构体，然后构造AT指令，发送给W800。这就是网络连接函数，如果连接成功，还要记录端口号。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevConnect</span><span class="token punctuation">(</span>ConnectInfo <span class="token operator">*</span>info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> skct<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>skct<span class="token punctuation">,</span> <span class="token string">&quot;AT+SKCT=%d,%d,%s,%d,%d\\r\\n&quot;</span><span class="token punctuation">,</span> \\
                   info<span class="token operator">-&gt;</span>Protocl<span class="token punctuation">,</span> \\
                   info<span class="token operator">-&gt;</span>Role<span class="token punctuation">,</span> \\
                   info<span class="token operator">-&gt;</span>IP<span class="token punctuation">,</span> \\
                   info<span class="token operator">-&gt;</span>RemotePort<span class="token punctuation">,</span> \\
                   info<span class="token operator">-&gt;</span>LocalPort
                   <span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>skct<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>skct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token comment">/* 获取连接成功后的socket号 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">&#39;\\r&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            info<span class="token operator">-&gt;</span>SocketPort <span class="token operator">=</span> info<span class="token operator">-&gt;</span>SocketPort<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;IP:%s - SocketPort:%d\\r\\n&quot;</span><span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>IP<span class="token punctuation">,</span> info<span class="token operator">-&gt;</span>SocketPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第37行：返回的socket号最后一个数字紧跟的是’\\r’，在解析socket号的时候不需要这个值，因而for循环的判定就是直到读取到’\\r’为止就不进行ASCII到数值的转换计算。</li></ul><h3 id="_31-5-9-断开指定socket的连接" tabindex="-1"><a class="header-anchor" href="#_31-5-9-断开指定socket的连接" aria-hidden="true">#</a> 31.5.9 断开指定socket的连接</h3><p>断开网络连接使用的指令是”AT+SKCLS=&amp;ltsocket&amp;gt\\r\\n”，本书封装了如下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">WiFiBtDevDisconnect</span><span class="token punctuation">(</span>ConnectInfo info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token keyword">char</span> skcls<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>skcls<span class="token punctuation">,</span> <span class="token string">&quot;AT+SKCLS=%d\\r\\n&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>SocketPort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> pWiFiBtDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pWiFiBtDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>skcls<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>skcls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">WiFiBtDevCmdRet</span><span class="token punctuation">(</span><span class="token string">&quot;+OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-6-测试程序" tabindex="-1"><a class="header-anchor" href="#_31-6-测试程序" aria-hidden="true">#</a> 31.6 测试程序</h2><p>本实验中，先使用网络调试助手开启了Windows电脑的TCP服务，然后启动板子。板子上的程序先使用W800连接热点，然后后Windows电脑建立TCP连接。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image17.png" alt=""></p><p>测试函数代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">WiFiBtAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">WiFiBtDevInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WiFiBtDevSetWorkType</span><span class="token punctuation">(</span>STA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WiFiBtDevEnableDHCP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WiFiBtDevConnectWiFi</span><span class="token punctuation">(</span><span class="token string">&quot;X-IOT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x-iot.cq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WiFiBtDevGetLocalIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    ConnectInfo connect <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>Protocl <span class="token operator">=</span> TCP<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>Role <span class="token operator">=</span> Client<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>IP <span class="token operator">=</span> <span class="token string">&quot;192.168.50.193&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>RemotePort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>LocalPort <span class="token operator">=</span> <span class="token number">1024</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">WiFiBtDevConnect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>connect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> ESUCCESS<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> <span class="token function">WiFiBtDevConnect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>connect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-7-测试结果" tabindex="-1"><a class="header-anchor" href="#_31-7-测试结果" aria-hidden="true">#</a> 31.7 测试结果</h2><p>打开串口助手观察信息，打开网络助手启动TCP服务。然后将编译出来的二进制文件烧写到板子上运行，就能在串口助手上观察到W800的响应信息，在网络助手上观察到网络连接信息，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-31/image18.png" alt=""></p>`,123),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter31.html.vue"]]);export{r as default};
