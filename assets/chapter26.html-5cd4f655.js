import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const e={},p=t(`<h1 id="第26章-独立看门狗定时器-iwdt" tabindex="-1"><a class="header-anchor" href="#第26章-独立看门狗定时器-iwdt" aria-hidden="true">#</a> 第26章 独立看门狗定时器-IWDT</h1><p>本章目标</p><ul><li>了解A6M5处理器的看门狗定时器及其工作原理；</li><li>学会使用RASC配置看门狗定时器，使用其接口函数；</li></ul><h2 id="_26-1-ra6m5的wdt外设" tabindex="-1"><a class="header-anchor" href="#_26-1-ra6m5的wdt外设" aria-hidden="true">#</a> 26.1 RA6M5的WDT外设</h2><h3 id="_26-1-1-wdt的特性" tabindex="-1"><a class="header-anchor" href="#_26-1-1-wdt的特性" aria-hidden="true">#</a> 26.1.1 WDT的特性</h3><p>IWDT (Independent Watchdog Timer)由一个14位的向下计数器组成，可以将应用程序从错误中恢复处理（比如重启系统）。应用程序必须在允许的计数窗口内进行刷新计时器，如果计数器下溢了，IWDT将复位MCU或生成不可屏蔽中断(NMI)。</p><p>瑞萨RA6M5处理器的看门狗定时器的特性见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image1.jpg" alt=""></p><p>独立看门狗的时钟源是一个独立的时钟IWDTCLK，PCLKB最大的时钟频率是15kHz，可以使用RASC在BSP中设置IWDTCLK的分频系数。</p><h3 id="_26-1-2-iwdt的系统框图" tabindex="-1"><a class="header-anchor" href="#_26-1-2-iwdt的系统框图" aria-hidden="true">#</a> 26.1.2 IWDT的系统框图</h3><p>IWDT的系统框图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image2.png" alt=""></p><h3 id="_26-1-3-iwdt和wdt的异同" tabindex="-1"><a class="header-anchor" href="#_26-1-3-iwdt和wdt的异同" aria-hidden="true">#</a> 26.1.3 IWDT和WDT的异同</h3><ol><li>差异点</li></ol><p>瑞萨RA6M5的独立看门狗（IWDT）与看门狗（WDT）的不同点如下：</p><ul><li>时钟源不一样，WDT使用外部时钟电路作为时钟源，而IWDT自带时钟源；</li><li>WDT有寄存器启动和自启动两种模式，IWDT只有自启动这一种模式；</li></ul><ol start="2"><li>相同点</li></ol><p>独立看门狗（IWDT）与看门狗（WDT）也有很多相似点，主要如下：</p><ul><li>都可以选择复位的范围（窗口值）；</li><li>都可以设置在睡眠模式下是否启动；</li><li>都可以设置NMI中断和复位重启；</li></ul><p>26.1.4 IWDT的工作原理</p><ol><li>超时时间计算</li></ol><p>以IWDTCLK=15kHz为例，假设对IWDT进行了以下配置：</p><ul><li>分频系数位256</li><li>超时时间周期为2048cycles</li></ul><p>那么IWDT的超时时间为：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image3.jpg" alt="image3"></p><ol start="2"><li>运行状态分析</li></ol><p>在“Option Function Select Register 0”寄存器中，对于IWDT有一个模式选择位[OFS0.IWDTSTRT]：它被写为0时，IWDT的自动启动模式被使能；写为1就是关闭IWDT的计数。</p><p>只有在复位状态下，以下对IWDT在OFS0中的设置才会有效：</p><ul><li>配置OFS0.IWDTCKS[3:0]来配置IWDT的时钟分频系数；</li><li>配置OFS0.IWDTRPSS[1:0]和OFS0.IWDTRPES[1:0]来设置IWDT的窗口监测始末位置；</li><li>配置OFS0.IWDTTOPS[1:0]来设置IWDT的超时周期值cycles；</li><li>配置OFS0.IWDTRSTIRQS来使能IWDT的重置输出和中断请求；</li></ul><p>当复位状态结束后，IWDT的计数器将会立刻向下计数。在RA6M5的用户手册中展示了一个IWDT的窗口刷新例图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image4.png" alt=""></p><p>总结下来就是：</p><ul><li>在窗口期内刷新看门狗会让IWDT计数器重新计数且不会触发任何事件或中断；</li><li>在没有到窗口期起始位置刷新会触发刷新错误事件，并触发NMI中断；</li><li>在超过窗口结束位置但是计数没有溢出期间刷新，会触发刷新错误事件，并触发NMI中断；</li><li>如果IWDT计数溢出了，会触发技术溢出事件，触发NMI中断；</li></ul><p>也就是说，如果使用了窗口监测，只有在窗口期刷新定时器才会让系统正常运行，否则都会触发NMI中断。</p><h2 id="_26-2-iwdt模块的使用" tabindex="-1"><a class="header-anchor" href="#_26-2-iwdt模块的使用" aria-hidden="true">#</a> 26.2 IWDT模块的使用</h2><h3 id="_26-2-1-模块配置" tabindex="-1"><a class="header-anchor" href="#_26-2-1-模块配置" aria-hidden="true">#</a> 26.2.1 模块配置</h3><ol><li>添加IWDT Stack</li></ol><p>在FSP的Stacks中添加IWDT模块的步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image5.png" alt=""></p><ol start="2"><li>在BSP中配置IWDT</li></ol><p>从前文对IWDT的工作原理分析中可以看到，对于IWDT的所有操作都是在OFS0寄存器中进行配置的，而OFS0是在BSP板块里面的“RA6F5 Family”中，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image6.png" alt=""></p><ul><li>Start Mode Select：IWDT启动模式选择</li></ul><p>1.1 IWDT is automatically activated after a reset (Autostart mode)(自启动) 1.2 IWDT is Disabled</p><ul><li>Timeout Period:IWDT计数周期值</li></ul><p>1.1 128 cycles 1.2 512 cycles 1.3 1024 cycles 1.4 2048 cycles</p><ul><li>Dedicated Clock Frequency Divisor:IWDT时钟分频系数（1/16/32/64/128/256）,默认128；</li><li>Window End Position:窗口监测结束位置，默认0%，没有结束位置</li><li>Window Start Position:窗口监测开始位置，默认100%，没有开始位置</li><li>Reset Interrupt Request:选择使能触发复位的中断请求（NMI或Reset）</li><li>Stop Control：停止对WDT控制的条件</li></ul><p>1.1 Stop counting when in Sleep, Snooze mode, or Software Standby 1.2 Counting continues (Note: Device will not enter Deep Standby Mode when selected. Device will enter Software Standby Mode)</p><p>如果用户选择使用了NMI中断，还需要去RASC的Stacks中找到IWDG Stack模块，设置NMI的中断回调函数名，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image7.png" alt=""></p><h3 id="_26-2-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_26-2-2-配置信息解读" aria-hidden="true">#</a> 26.2.2 配置信息解读</h3><p>在RASC中配置IWDT并生成工程后，会在hal_data.c中生成结构体全局常量g_iwdt，它被用来表示IWDT设备，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">wdt_instance_t</span> g_wdt <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl        <span class="token operator">=</span> <span class="token operator">&amp;</span>g_iwdt_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_iwdt_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_wdt_on_iwdt
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：iwdt_instance_ctrl_t类型指针成员，用来记录设备状态，记录一些重要信息（比如回调函数）；</li><li>p_cfg：指向IWDT的配置结构体，这个结构体的数值来自在RASC中对IWDT的配置，代码如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">wdt_cfg_t</span> g_iwdt_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>clock_division <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>window_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>window_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>reset_control <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>stop_control <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback <span class="token operator">=</span> nmi_callback<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_api：指向了一个wdt_api_t结构体，这个结构体在r_iwdt.c中实现，它封装了IWDT设备的接口函数，代码如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">wdt_api_t</span> g_wdt_on_iwdt <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open        <span class="token operator">=</span> R_IWDT_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>refresh     <span class="token operator">=</span> R_IWDT_Refresh<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>statusGet   <span class="token operator">=</span> R_IWDT_StatusGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>statusClear <span class="token operator">=</span> R_IWDT_StatusClear<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>counterGet  <span class="token operator">=</span> R_IWDT_CounterGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>timeoutGet  <span class="token operator">=</span> R_IWDT_TimeoutGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet <span class="token operator">=</span> R_IWDT_CallbackSet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_26-2-3-中断回调函数" aria-hidden="true">#</a> 26.2.3 中断回调函数</h3><p>在RASC中配置了IWDT的中断回调函数名字，会在hal_data.h中声明此回调函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">nmi_callback</span></span>
<span class="token keyword">void</span> <span class="token function">nmi_callback</span><span class="token punctuation">(</span><span class="token class-name">wdt_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要实现这个回调函数，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">nmi_callback</span><span class="token punctuation">(</span><span class="token class-name">wdt_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>p_args<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_26-2-4-api接口及其用法" aria-hidden="true">#</a> 26.2.4 API接口及其用法</h3><p>前文已经说过，在FSP库函数中是使用wdt_api_t结构体来封装IWDT的操作方法，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_wdt_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">wdt_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> refresh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">wdt_status_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusClear<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">wdt_status_t</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> counterGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> timeoutGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                             <span class="token class-name">wdt_timeout_values_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">wdt_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">wdt_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">wdt_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>瑞萨在r_iwdt.c中实现一个wdt_api_t结构体，IWDT和WDT共用一套操作接口，读者请参考《25.2.4 API接口及其用法》了解这些函数的用法。</p><h2 id="_26-3-独立看门狗定时器实验" tabindex="-1"><a class="header-anchor" href="#_26-3-独立看门狗定时器实验" aria-hidden="true">#</a> 26.3 独立看门狗定时器实验</h2><h3 id="_26-3-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_26-3-1-设计目的" aria-hidden="true">#</a> 26.3.1 设计目的</h3><p>让用户学会使用瑞萨RA6M5的IWDT，并观察是否刷新看门狗的现象。</p><h3 id="_26-3-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_26-3-2-硬件连接" aria-hidden="true">#</a> 26.3.2 硬件连接</h3><p>本实验会用到板载串口和按键，请读者参考前文配置。</p><h3 id="_26-3-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_26-3-3-驱动程序" aria-hidden="true">#</a> 26.3.3 驱动程序</h3><ol><li>初始化IWDT</li></ol><p>调用open函数即可初始化IWDT，并启动它，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">IWDTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_iwdt<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_iwdt<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_iwdt<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>刷新IWDT</li></ol><p>刷新IWDT比较简单，直接调用其refresh函数即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">IWDTDrvRefresh</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_iwdt<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">refresh</span><span class="token punctuation">(</span>g_iwdt<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>NMI中断回调函数</li></ol><p>在RASC中使能了IWDT的NMI中断，需要自己实现NMI回调函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>__WEAK <span class="token keyword">void</span> <span class="token function">DataSaveProcess</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">nmi_callback</span><span class="token punctuation">(</span><span class="token class-name">wdt_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>p_args<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nWarning!Do your most important save working!!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DataSaveProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>按键刷新定时器</li></ol><p>在按键消抖处理后，刷新看门狗定时器，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">KeyProcessEvents</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptLedDev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserLed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptKeyDev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptLedDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>ptLedDev<span class="token punctuation">,</span> ptKeyDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>ptKeyDev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">IWDTDrvRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_26-3-4-测试程序" aria-hidden="true">#</a> 26.3.4 测试程序</h3><p>在本次实验中，初始化了各个外设后，主循环中不用做任何事情，所有的操作都是在中断中完成的：</p><ul><li>按键中断</li><li>滴答定时器消除按键抖动</li><li>NMI中断处理用户的紧急事件</li></ul><p>测试函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">IWDTAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> ptdev<span class="token punctuation">)</span>
        ptdev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptdev <span class="token operator">=</span> <span class="token function">IOGetDecvice</span><span class="token punctuation">(</span><span class="token string">&quot;UserLed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> ptdev<span class="token punctuation">)</span>
        ptdev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">IWDTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* The code that is watched by iwdt */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_26-3-5-测试结果" aria-hidden="true">#</a> 26.3.5 测试结果</h3><p>将编译出来的二进制可执行文件烧录到板子上并运行，如果不按按键的话会得到例如下图这样的打印信息：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-26/image8.jpg" alt="image8"></p>`,92),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","chapter26.html.vue"]]);export{r as default};
