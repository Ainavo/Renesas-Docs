import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第19章-rtc" tabindex="-1"><a class="header-anchor" href="#第19章-rtc" aria-hidden="true">#</a> 第19章 RTC</h1><p>本章目标</p><ul><li>了解瑞萨处理器RTC模块的使用</li></ul><h2 id="_19-1-rtc模块的使用" tabindex="-1"><a class="header-anchor" href="#_19-1-rtc模块的使用" aria-hidden="true">#</a> 19.1 RTC模块的使用</h2><h3 id="_19-1-1-rtc简介" tabindex="-1"><a class="header-anchor" href="#_19-1-1-rtc简介" aria-hidden="true">#</a> 19.1.1 RTC简介</h3><p>RA6M5的RTC(Real Time Clock)外设，实质是一个掉电后还继续运行的定时器。RA6M5的实时时钟(RTC)有两种计数模式：日历计数模式、二进制计数模式，可以通过寄存器的设置来切换模式。对于日历计数模式，RTC具有从2000年到2099年的100年日历，并自动调整闰年的日期。对于二进制计数模式，RTC计数秒，并保留信息作为串行值。二进制计数模式可用于公历(西历)以外的日历。</p><p>可以选择作子时钟振荡器或LOCO作为时间计数器的计数源。RTC使用128Hz的时钟，通过将计数源除以预分频器的值获得。</p><h3 id="_19-1-2-rtc特征" tabindex="-1"><a class="header-anchor" href="#_19-1-2-rtc特征" aria-hidden="true">#</a> 19.1.2 RTC特征</h3><p>瑞萨处理器的RTC有如下特征：</p><ul><li>计数模式：日历计数模式和二进制计数模式。</li><li>时钟源：子时钟或LOCO。</li><li>l 日历计数模式：年，月，日，星期，小时，分钟，秒计数。</li><li>二进制计数模式：32位二进制计数器。</li><li>闹钟中断：在日历计数模式下，可以与年，月，日，星期，小时，分钟和秒进行比较。在二进制计数模式下则与32位2进制计数器进行对比。</li><li>周期性中断：可以选择2秒，1秒，1/2秒，1/4秒，1/8秒，1/16秒，1/32秒，1/64秒、1/128秒或1/256秒作为中断周期。</li><li>进位中断：当从64HZ计数器到二进制计数器的进位时和当改变64Hz计数器和R64同时读取CNT寄存器时进行中断。</li><li>输入捕获：当检测到捕获时间输入引脚的电平发生跳变时（上升沿或者下降沿时），可以进行输入捕获。 该输入捕获可以用日历计数或者二进制计数。电平跳变时可以产生中断。与GPT相同的是，该输入捕获也能使用噪声滤波器。</li><li>事件关联：周期性输出事件。</li><li>TrustZone过滤器：可以设置安全属性。</li></ul><h3 id="_19-1-3-rtc的系统框图" tabindex="-1"><a class="header-anchor" href="#_19-1-3-rtc的系统框图" aria-hidden="true">#</a> 19.1.3 RTC的系统框图</h3><p>瑞萨处理器的RTC系统框图大致分为以下几部分：</p><ol><li>外部引脚：</li></ol><ul><li>XCIN/XCOUT，连接到外部32.768kHz晶振；</li><li>RTCOUT：输出1Hz或64Hz的方波，无法在待机模式下使用。</li><li>RTCICn（n = 0,1,2）：输入捕获引脚。</li></ul><ol start="2"><li>计数器</li></ol><p>这个计数器可以在VBAT供电下使用，由以下寄存器（同时也是计数器）构成：</p><ul><li>R64CNT：R64CNT是一个8位的计数器，由128Hz的时钟脉冲驱动，实际只使用[6:0]位，故其最大计数值为128次， 也就是1秒就会产生一次进位，并驱动RSECCNT/BCNT计数器+1。</li><li>RSECCNT：用于统计R64CNT每秒产生的进位信号，表示“秒”，设置范围为0-59，如果设置其他值，会导致RTC工作异常。</li><li>RMINCNT：用于统计RSECCNT每分钟产生的进位信号，表示“分”，设置范围为0-59，如果设置其他值，会导致RTC工作异常。</li><li>RHRCNT：用于统计RMINCNT每小时产生的进位信号，表示“时”，当RTC设置为24小时制，则设置范围时0-23。 当RTC设置为12小时制，则设置范围时0-11。如果设置其他值，会导致RTC工作异常。</li><li>RDAYCNT：用于统计RHRCNT的每天时产生进位信号，表示“日”，计数范围取决于月份以及这一年是否为闰年。设置范围为1-31，如果设置其他值，会导致RTC工作异常。</li><li>RWKCNT：用于统计RHRCNT的每天产生的进位信号，表示“星期”，计数范围为0-6，如果设置其他值，会导致RTC工作异常。</li><li>RMONCNT：用于统计RDAYCNT每个月产生的进位信号，表示“月”，计数范围为1-12，如果设置其他值，会导致RTC工作异常。</li><li>RYRCNT：用于统计RMONCNT每个月产生的进位信号，表示“年”，计数范围为0-99，如果设置其他值，会导致RTC工作异常。</li></ul><p>在二进制模式下，RSECCNT、RMINCNT、RHRCNT、RWKCNT共同构成BCNT（Binary Counter），是一个32位向上递增的计数器。通过统计R64CNT的进位次数进行计数。</p><ol start="3"><li>闹钟功能</li></ol><p>在日历计数模式下，闹钟可以按年、月、日、周、时、分、秒或它们的任意组合来设置。在设置闹钟时，往涉及的寄存器的ENB位（都是最高位）写1， 并在低位设置比较值；对于不涉及的寄存器，往它的ENB位写入0。例如，设置闹钟为每天的8点30分， 则在RMINAR（分闹钟寄存器）的最高位写入1，同时低位为30。RHRAR（时闹钟寄存器）最高位写入1，同时低位写8。其他寄存器则在最高位写0。</p><p>在二进制计数模式下，时间值是32位的数值，设置闹钟时，要比较哪些位？在BCNTnAER中，将需要比较的位写1，不需要比较的位写0。这些位的比较值是什么？BCNTnAR中设置比较值。</p><p>需要注意的是，在日历计数模式下，闹钟寄存器的比较值使用BCD码。</p><ol start="4"><li>中断控制</li></ol><p>RTC支持的中断请求有以下三种：</p><ul><li>闹钟中断请求</li><li>周期计数中断请求</li><li>捕获比较中断请求</li></ul><ol start="5"><li>输入捕获控制单元</li></ol><p>整体框图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image1.png" alt=""></p><h3 id="_19-1-4-配置rtc模块" tabindex="-1"><a class="header-anchor" href="#_19-1-4-配置rtc模块" aria-hidden="true">#</a> 19.1.4 配置RTC模块</h3><p>配置RTC时，需要配置引脚和Stack模块。</p><ol><li>配置RTC引脚</li></ol><p>在RASC的配置界面中去“Pins”里的“Peripherals”找到“Timers:RTC”，选择RTC0后,在右侧使能它的操作模式，如果不输出RTC时钟或者捕获采样信号，就不需要选择引脚，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image2.png" alt=""></p><ol start="2"><li>加配置RTC的Stack模块</li></ol><p>首先需要去“Stacks”中添加RTC的Stack，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image3.png" alt=""></p><p>然后去配置RTC Stack的参数。</p><p>RTC的Stack参数分为3个板块：</p><ol><li>Common：配置RTC的通用参数，所有的RTC模块都会使用到这个板块的参数配置；</li><li>Module：指定RTC模块的定制参数，包括模块名称、时钟源、中断回调函数、中断优先级等；</li><li>Pins：RTC的引脚；</li></ol><p>RTC的Common板块中比较重要的参数是“Set Source Clock in Open”，如果使能了这个参数且后续使用的时钟源是子时钟，那么用户在代码中就不需要使用函数手动设置时钟源；如果不使能，就需要在代码中调用函数手动设置RTC的时钟源。默认是“Enabled”。</p><p>而RTC的Module板块需要配置的参数比较多，详见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image4.jpg" alt=""></p><p>下图是设置万年历实验的RTC Stack模块参数配置图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image5.png" alt=""></p><p>在万年历实验中，选择的时钟源是子时钟系统，使能了周期计数中断，它的优先级选择为比较低的10级优先级，中断回调函数的函数名设置为rtc_callback。</p><h3 id="_19-1-5-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_19-1-5-配置信息解读" aria-hidden="true">#</a> 19.1.5 配置信息解读</h3><p>因为没有使用RTC的输入/输出引脚，因而使用RASC配置好RTC并生成工程后，只会在hal_data.c中生成RTC设备对象的配置信息代码。</p><p>在hal_data.c中，定义了一个rtc_instance_t类型的全局变量g_rtc0，它含有控制参数、配置信息、接口信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">rtc_instance_t</span> g_rtc0 <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl        <span class="token operator">=</span> <span class="token operator">&amp;</span>g_rtc0_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_rtc0_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_rtc_on_rtc
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：RTC控制参数，它指向结构体变量g_rtc0_ctrl，g_rtc0_ctrl结构体原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_rtc_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>          open<span class="token punctuation">;</span>                     <span class="token comment">///&lt; Whether or not driver is open</span>
    <span class="token keyword">const</span> <span class="token class-name">rtc_cfg_t</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>                    <span class="token comment">///&lt; Pointer to initial configurations</span>
    <span class="token keyword">volatile</span> bool     carry_isr_triggered<span class="token punctuation">;</span>      <span class="token comment">///&lt; Was the carry isr triggered</span>

    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pointer to callback that is called when a rtc_event_t occurs.</span>
    <span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_callback_memory<span class="token punctuation">;</span>    <span class="token comment">// Pointer to non-secure memory that can be used to pass arguments to a callback in non-secure memory.</span>

    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>                     <span class="token comment">// Pointer to context to be passed into callback function</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_cfg：RTC配置参数，它指向全局常量g_rtc0_cfg，此常量成员的取值来自用户在RASC中对RTC的配置；以万年历的配置为例，此常量的赋值代码如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">rtc_cfg_t</span> g_rtc0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>clock_source            <span class="token operator">=</span> RTC_CLOCK_SOURCE_SUBCLK<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>freq_compare_value_loco <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_err_cfg               <span class="token operator">=</span> <span class="token operator">&amp;</span>g_rtc0_err_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback              <span class="token operator">=</span> rtc_callback<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_api：RTC操作函数的封装，指向结构体g_rtc_on_rtc，后面讲解。</li></ul><h3 id="_19-1-6-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_19-1-6-中断回调函数" aria-hidden="true">#</a> 19.1.6 中断回调函数</h3><p>在RASC中设置了RTC的中断回调函数名字，会在hal_data.h中声明此函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">rtc_callback</span></span>
<span class="token keyword">void</span> <span class="token function">rtc_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要在自己的程序中实现此函数，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rtc_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>RTC_EVENT_PERIODIC_IRQ <span class="token operator">==</span> p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以根据参数p_args的event成员判断是什么触发了RTC的中断，RTC的中断事件有以下这些：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Events that can trigger a callback function */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_rtc_event</span>
<span class="token punctuation">{</span>
    RTC_EVENT_ALARM_IRQ<span class="token punctuation">,</span>               <span class="token comment">///&lt; Real Time Clock ALARM IRQ</span>
    RTC_EVENT_PERIODIC_IRQ<span class="token punctuation">,</span>            <span class="token comment">///&lt; Real Time Clock PERIODIC IRQ</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有2种原因：闹铃中断、周期计数中断。</p><h3 id="_19-1-7-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_19-1-7-api接口及其用法" aria-hidden="true">#</a> 19.1.7 API接口及其用法</h3><p>RTC模块的操作方法封装到了结构体rtc_api_t中，此结构体的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_rtc_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">rtc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> clockSourceSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarTimeSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                  <span class="token class-name">rtc_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarTimeGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                  <span class="token class-name">rtc_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarAlarmSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                   <span class="token class-name">rtc_alarm_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_alarm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarAlarmGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                   <span class="token class-name">rtc_alarm_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_alarm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> periodicIrqRateSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                     <span class="token class-name">rtc_periodic_irq_select_t</span> <span class="token keyword">const</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> errorAdjustmentSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                     <span class="token class-name">rtc_error_adjustment_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> err_adj_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">rtc_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_rtc_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>瑞萨在r_rtc.c中实现了一个rtc_api_t结构体，里面填充了各个函数指针，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">rtc_api_t</span> g_rtc_on_rtc <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open               <span class="token operator">=</span> R_RTC_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close              <span class="token operator">=</span> R_RTC_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>clockSourceSet     <span class="token operator">=</span> R_RTC_ClockSourceSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>calendarTimeGet    <span class="token operator">=</span> R_RTC_CalendarTimeGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>calendarTimeSet    <span class="token operator">=</span> R_RTC_CalendarTimeSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>calendarAlarmGet   <span class="token operator">=</span> R_RTC_CalendarAlarmGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>calendarAlarmSet   <span class="token operator">=</span> R_RTC_CalendarAlarmSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>periodicIrqRateSet <span class="token operator">=</span> R_RTC_PeriodicIrqRateSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>infoGet            <span class="token operator">=</span> R_RTC_InfoGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>errorAdjustmentSet <span class="token operator">=</span> R_RTC_ErrorAdjustmentSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet        <span class="token operator">=</span> R_RTC_CallbackSet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来介绍这些操作函数。</p><ol><li>打开RTC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">rtc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：rtc_ctrl_t结构体类型，用来记录一些状态信息；</li><li>p_cfg：rtc_cfg_t结构体类型，含有RTC的配置信息；</li></ul><p>用户可以参考以下代码调用此函数初始化RTC的配置：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_rtc0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error in %s on %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭RTC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭RTC设备只需要传入RTC的控制参数即可，此函数会将控制参数p_ctrl中的状态标志位open成员改变位CLOSED。</p><p>用户可以参考以下代码关闭RTC设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error in %s on %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>设置RTC的时钟源</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> clockSourceSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果用户在RASC的配置中没有将“Set Source Clock in Open”设置为“Enabled”，就需要在代码中调用此函数手动设置使能RTC的时钟源。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image6.png" alt=""></p><p>用户可以参考以下代码手动设置使能RTC的时钟源：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">clockSourceSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error in %s on %d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>设置RTC的计数起始时间</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarTimeSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                              <span class="token class-name">rtc_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_time：rtc_time_t结构体类型，此结构体成员表示日常的时间值（年月日，时分秒和星期），原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>   <span class="token comment">/* seconds after the minute, 0 to 60
                     (0 - 60 allows for the occasional leap second) */</span>
    <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>   <span class="token comment">/* minutes after the hour, 0 to 59 */</span>
    <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>  <span class="token comment">/* hours since midnight, 0 to 23 */</span>
    <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>  <span class="token comment">/* day of the month, 1 to 31 */</span>
    <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>   <span class="token comment">/* months since January, 0 to 11 */</span>
    <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>  <span class="token comment">/* years since 1900 */</span>
    <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>  <span class="token comment">/* days since Sunday, 0 to 6 */</span>
    <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>  <span class="token comment">/* days since January 1, 0 to 365 */</span>
    <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span> <span class="token comment">/* Daylight Savings Time flag */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token class-name">rtc_time_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在注释中已经解释了这些成员的取值范围。</p><p>用户需要先定义一个rtc_time_t结构体，将其各成员赋值后再调用函数calendarTimeSet函数，它会设置RTC从这个时间开始计数。</p><p>用户可以参考以下代码来设置RTC的初始计数时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rtc_time_t</span> SetTime <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//秒</span>
    <span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//分</span>
    <span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//小时</span>
    <span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token comment">//日（一个月中）</span>
    <span class="token punctuation">.</span>tm_wday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">//星期</span>
    <span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">//月份</span>
    <span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token comment">//年份（如今年是2008，则这里输入2008-1900=108）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">FSP_Assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此段代码将RTC的初始时间设置为2023年5月29日星期一的0时0分0秒。</p><ol start="5"><li>获取RTC的当前计数时间</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarTimeGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                              <span class="token class-name">rtc_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数是获取RTC当前计数的时间，和设置时间使用的是同一个结构体。用户可以参考以下代码获取当前时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rtc_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>RTC_EVENT_PERIODIC_IRQ <span class="token operator">==</span> p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
         <span class="token comment">/*若是周期中断，获取日期*/</span>
         gRtcPeriodFlag <span class="token operator">=</span> true<span class="token punctuation">;</span>
         g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeGet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">rtc_time_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gCurTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是在RTC的中断回调函数中，更新一个全局变量gCurTime，它被用来记录时间值。</p><p>可以使用如下函数返回gCurTime，获得当前时间：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rtc_time_t</span> <span class="token function">RTCDrvGetTime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">RTCDrvWaitPeriodInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> gCurTime<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>设置RTC的闹铃时间</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarAlarmSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                               <span class="token class-name">rtc_alarm_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_alarm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_alarm：rtc_alarm_time_t结构体类型，用于指定闹铃匹配规则、匹配值，此结构体原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_rtc_alarm_time</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rtc_time_t</span> time<span class="token punctuation">;</span>                   <span class="token comment">///&lt; Time structure</span>
    bool       sec_match<span class="token punctuation">;</span>  <span class="token comment">///&lt; Enable the alarm based on a match of the seconds field</span>
    bool       min_match<span class="token punctuation">;</span>  <span class="token comment">///&lt; Enable the alarm based on a match of the minutes field</span>
    bool       hour_match<span class="token punctuation">;</span> <span class="token comment">///&lt; Enable the alarm based on a match of the hours field</span>
    bool       mday_match<span class="token punctuation">;</span> <span class="token comment">///&lt; Enable the alarm based on a match of the days field</span>
    bool       mon_match<span class="token punctuation">;</span>  <span class="token comment">///&lt; Enable the alarm based on a match of the months field</span>
    bool       year_match<span class="token punctuation">;</span> <span class="token comment">///&lt; Enable the alarm based on a match of the years field</span>
    bool dayofweek_match<span class="token punctuation">;</span> <span class="token comment">///&lt; Enable the alarm based on a match of the dayofweek field</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_alarm_time_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：闹铃匹配的时间，结构体内容见前文；</li><li>第04~10行：RTC闹铃匹配规则，根据需求决定匹配哪个时间点，true-匹配，false-不匹配；</li></ul><p>用户需要在程序中设定好匹配规则、匹配值后，再调用calendarAlarmSet函数进行设置，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">rtc_alarm_time_t</span> AlarmTime <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment">//秒</span>
        <span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//分</span>
        <span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//小时</span>
        <span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token comment">//日（一个月中）</span>
        <span class="token punctuation">.</span>tm_wday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">//星期</span>
        <span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">//月份</span>
        <span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token comment">//年份（如今年是2023，则这里输入2023-1900=123）</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>year_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mon_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>mday_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>dayofweek_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>hour_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>min_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>sec_match <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarAlarmSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>AlarmTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第02~10行：将闹铃时间设置为2023-5-29.0:0:30；</li><li>第11~17行：匹配规则为仅匹配秒时间段，即每分钟的第30秒会匹配一次闹铃；</li><li>第19行：调用函数完成闹铃设置；</li></ul><ol start="7"><li>获取RTC的闹铃时间</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> calendarAlarmGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                               <span class="token class-name">rtc_alarm_time_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_alarm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取闹铃设置信息的使用比较简单，仅是帮助用户获知当前RTC设置的闹铃的匹配规则、匹配值。参数和设置闹铃时间函数的参数是同一结构体类型。</p><ol start="8"><li>设置RTC的中断周期</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> periodicIrqRateSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                 <span class="token class-name">rtc_periodic_irq_select_t</span> <span class="token keyword">const</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>rate：rtc_periodic_irq_select_t结构体类型，表示触发RTC周期中断的间隔时间，支持的时间如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_rtc_periodic_irq_select</span>
<span class="token punctuation">{</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_256_SECOND <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_128_SECOND <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_64_SECOND  <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_32_SECOND  <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_16_SECOND  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_8_SECOND   <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_4_SECOND   <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_DIV_BY_2_SECOND   <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_1_SECOND            <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span>
    RTC_PERIODIC_IRQ_SELECT_2_SECOND            <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_periodic_irq_select_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据枚举成员的命名可以知道，周期间隔中断时间是1/256秒、1/128秒……1秒、2秒，通常选用1秒的间隔，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>err 
<span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">periodicIrqRateSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> RTC_PERIODIC_IRQ_SELECT_1_SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>获取RTC的配置信息</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">rtc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                      <span class="token class-name">rtc_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_rtc_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>p_rtc_info：RTC的配置信息和运行状态信息，配置信息指时钟源信息，运行状态则是指RTC是处于停滞状态还是运行状态：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_rtc_info</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rtc_clock_source_t</span> clock_source<span class="token punctuation">;</span>   <span class="token comment">///&lt; Clock source for the RTC block</span>
    <span class="token class-name">rtc_status_t</span>       status<span class="token punctuation">;</span>         <span class="token comment">///&lt; RTC run status</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_info_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行状态的枚举成员如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_rtc_status</span>
<span class="token punctuation">{</span>
    RTC_STATUS_STOPPED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">///&lt; RTC counter is stopped</span>
    RTC_STATUS_RUNNING <span class="token operator">=</span> <span class="token number">1</span>             <span class="token comment">///&lt; RTC counter is running</span>
<span class="token punctuation">}</span> <span class="token class-name">rtc_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-2-万年历实验" tabindex="-1"><a class="header-anchor" href="#_19-2-万年历实验" aria-hidden="true">#</a> 19.2 万年历实验</h2><h3 id="_19-2-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_19-2-1-设计目的" aria-hidden="true">#</a> 19.2.1 设计目的</h3><p>学会使用瑞萨处理器的RTC FSP库函数接口，获取RTC的计数时间并且将之打印出来观察。</p><h3 id="_19-2-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_19-2-2-硬件连接" aria-hidden="true">#</a> 19.2.2 硬件连接</h3><p>作为例程实验，本书没有连接外部电池电源VBAT，断电后无法保存维持RTC时钟，但是不影响本实验。</p><h3 id="_19-2-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_19-2-3-驱动程序" aria-hidden="true">#</a> 19.2.3 驱动程序</h3><ol><li>初始化RTC</li></ol><p>需要设置RTC的起始计数时间，并设置周期性中断的时间值，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">RTCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rtc_time_t</span> SetTime <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//秒</span>
        <span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//分</span>
        <span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//小时</span>
        <span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token comment">//日（一个月中）</span>
        <span class="token punctuation">.</span>tm_wday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">//星期</span>
        <span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">//月份</span>
        <span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token comment">//年份（如今年是2008，则这里输入2008-1900=108）</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_rtc0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">periodicIrqRateSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> RTC_PERIODIC_IRQ_SELECT_1_SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>中断回调函数和周期等待函数</li></ol><p>本次实验，先在中断回调函数中判断触发中断的原因是否为“周期中断”，在全局变量gCurTime中更新当前时间值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rtc_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>RTC_EVENT_PERIODIC_IRQ <span class="token operator">==</span> p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
     <span class="token comment">/*若是周期中断，获取日期*/</span>
     gRtcPeriodFlag <span class="token operator">=</span> true<span class="token punctuation">;</span>
     g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeGet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">rtc_time_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gCurTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此基础上封装一个周期中断的等待函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RTCDrvWaitPeriodInt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>gRtcPeriodFlag<span class="token punctuation">;</span>
    gRtcPeriodFlag <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数如果返回true则表明时间已经更新。</p><p>3.时间获取函数</p><p>实际上，这个函数可以直接读取当前时间gCurTime，下面的代码中先判断是否发生了RTC周期性中断，只是想得到更新后的时间值（以免多次调用都得到同样的时间值）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">RTCDrvGetTime</span><span class="token punctuation">(</span><span class="token class-name">rtc_time_t</span> <span class="token operator">*</span>time<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">RTCDrvWaitPeriodInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>time <span class="token operator">=</span> gCurTime<span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数返回true才表明获取到了最新一次更新的时间，调用者根据返回值和输出参数time做处理。</p><h3 id="_19-2-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_19-2-4-测试程序" aria-hidden="true">#</a> 19.2.4 测试程序</h3><p>本次实验测试方法很简单，就是获取更新的时间再打印出来，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">RTCAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTCDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;RTC Test!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">rtc_time_t</span> time<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">RTCDrvGetTime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;%.4d-%.2d-%.2d-%.2d:%.2d:%.2d\\r&quot;</span><span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_mon<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span>
                    time<span class="token punctuation">.</span>tm_hour<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_min<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了对齐以便观察，打印的年份使用4个数字，而月日时分秒使用2个数字表示。</p><h3 id="_19-2-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_19-2-5-测试结果" aria-hidden="true">#</a> 19.2.5 测试结果</h3><p>在hal_entry()函数中调用测试函数，将编译出来的二进制文件烧录到处理器中运行可以看到一直在计数的时间：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image7.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image8.png" alt="image8"></p><p>上图只是观察变化，因为RTC的起始计数时刻并未和网络时间统一校准，会出现一定的偏差。</p><h2 id="_19-3-闹铃实验" tabindex="-1"><a class="header-anchor" href="#_19-3-闹铃实验" aria-hidden="true">#</a> 19.3 闹铃实验</h2><h3 id="_19-3-1设计目的" tabindex="-1"><a class="header-anchor" href="#_19-3-1设计目的" aria-hidden="true">#</a> 19.3.1设计目的</h3><p>FSP库的RTC函数，设计一个简单的闹铃匹配程序。</p><h3 id="_19-3-2-rtc模块配置" tabindex="-1"><a class="header-anchor" href="#_19-3-2-rtc模块配置" aria-hidden="true">#</a> 19.3.2 RTC模块配置</h3><p>和万年历实验相比，本节实验的RTC模块需要使能RTC的Alarm中断：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image9.png" alt=""></p><h3 id="_19-3-3驱动程序" tabindex="-1"><a class="header-anchor" href="#_19-3-3驱动程序" aria-hidden="true">#</a> 19.3.3驱动程序</h3><p>1.初始化RTC</p><p>本次实验初始化RTC的时候除了设置RTC的起始计数时间以外，还要设置RTC的闹铃匹配规则和匹配值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">RTCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rtc_time_t</span> SetTime <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//秒</span>
        <span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//分</span>
        <span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//小时</span>
        <span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token comment">//日（一个月中）</span>
        <span class="token punctuation">.</span>tm_wday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">//星期</span>
        <span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">//月份</span>
        <span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token comment">//年份（如今年是2023，则这里输入2023-1900=123）</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token class-name">rtc_alarm_time_t</span> AlarmTime <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment">//秒</span>
            <span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//分</span>
            <span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//小时</span>
            <span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token comment">//日（一个月中）</span>
            <span class="token punctuation">.</span>tm_wday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">//星期</span>
            <span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">//月份</span>
            <span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span> <span class="token comment">//年份（如今年是2023，则这里输入2023-1900=123）</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>year_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mon_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mday_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>dayofweek_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>hour_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>min_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sec_match <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_rtc0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置起始计数时间 */</span>
    err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>SetTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置闹铃匹配时间和匹配规则 */</span>
    err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarAlarmSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>AlarmTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 设置触发周期中断的时间间隔 */</span>
    err <span class="token operator">=</span> g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">periodicIrqRateSet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> RTC_PERIODIC_IRQ_SELECT_1_SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>中断回调函数和闹铃中断等待函数</li></ol><p>本次实验的中断回调函数除了处理周期性中断外，还要处理闹铃中断，在闹铃中断事件中将闹铃事件标志置true：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rtc_callback</span><span class="token punctuation">(</span><span class="token class-name">rtc_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token punctuation">(</span>RTC_EVENT_ALARM_IRQ<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 如果是闹铃事件，则闹铃标志设置true */</span>
            gRtcAlarmFlag <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token punctuation">(</span>RTC_EVENT_PERIODIC_IRQ<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/*若是周期中断，获取日期*/</span>
            gRtcPeriodFlag <span class="token operator">=</span> true<span class="token punctuation">;</span>
            g_rtc0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">calendarTimeGet</span><span class="token punctuation">(</span>g_rtc0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">rtc_time_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gCurTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再封装一个闹铃事件等待函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">RTCDrvAlarmEvent</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>gRtcAlarmFlag<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        gRtcAlarmFlag <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户通过调用此函数来判断是否触发闹铃事件。</p><ol start="3"><li>时间获取函数</li></ol><p>此函数就是移植的上一小节万年历实验的驱动函数，此处不再说明。</p><h3 id="_19-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_19-3-4-测试程序" aria-hidden="true">#</a> 19.3.4 测试程序</h3><p>本节实验既要实时获取并打印RTC的计数时间，也要实时判断是否发生了闹铃匹配，如果发生了闹铃匹配那么就打印信息：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">RTCAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RTCDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">rtc_time_t</span> time<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">RTCDrvGetTime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;%.4d-%.2d-%.2d-%.2d:%.2d:%.2d\\r&quot;</span><span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_mon<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_mday<span class="token punctuation">,</span>
                    time<span class="token punctuation">.</span>tm_hour<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_min<span class="token punctuation">,</span> 
                    time<span class="token punctuation">.</span>tm_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">RTCDrvAlarmEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nAlarm Time!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_19-3-5-测试结果" aria-hidden="true">#</a> 19.3.5 测试结果</h3><p>在hal_entry()函数中调用测试函数，将编译出来的二进制文件烧录到处理器中运行观察可以发现，RTC计数时间的每个分钟的第30秒都会触发一次闹铃事件：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-19/image10.png" alt=""></p>`,175),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","chapter19.html.vue"]]);export{r as default};
