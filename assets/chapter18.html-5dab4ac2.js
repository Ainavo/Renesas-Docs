import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第18章-gpt" tabindex="-1"><a class="header-anchor" href="#第18章-gpt" aria-hidden="true">#</a> 第18章 GPT</h1><p>本章目标</p><ul><li>了解RA6M5处理器的GPT外设；</li><li>学会使用RASC配置GPT实现基本定时和PWM输出；</li></ul><h2 id="_18-1-gpt简介" tabindex="-1"><a class="header-anchor" href="#_18-1-gpt简介" aria-hidden="true">#</a> 18.1 GPT简介</h2><p>通用PWM定时器（GPT，Genera- PWM Timer）是RA MCU的一种32/16位的定时器外设。在GPT当中，可分为GPT32和GPT16，它们最主要的区别是计数器的位数不同。GPT32是32位的定时器，能计数的范围为：0~0xFFFF_FFFF； 而GPT16是16位的定时器，能计数的范围为：0~0xFFFF。</p><p>GPT模块可用于计数事件、测量外部输入信号、作为通用计时器并产生周期性中断、以及输出周期性PWM信号到GTIO引脚。GPT也可用于输出单个脉冲，但是注意这是通过软件来实现的，GPT硬件本身不支持输出单个脉冲（One-Shot）功能。当使用单个脉冲（One-Shot）模式时，必须要开启中断，在脉冲周期结束后在ISR中断服务函数中停止计时器。</p><p>RA MCU的GPT包括但不限于如下这些特征：</p><ul><li>32位GPT有4个输入/输出通道；16位GPT有6个输入输出通道；</li><li>每个GPT的计数器支持向上计数、向下计数或者向上向下同时计数；</li><li>每个通道的时钟源都可以单独配置选择；</li><li>每个通道有2个引脚可用来输入输出；</li><li>每个通道有2个输出比较寄存器或者输入捕获寄存器；</li><li>每个通道的输出比较寄存器或输入捕获寄存器都有4个缓存寄存器；</li><li>在PWM模式下支持设置死区时间；</li><li>计数器的开始、停止、清除等动作可以由最多8个ELC事件响应，也可以由最多4个外部触发器相应；</li><li>支持生成控制无刷直流电机的PWM波；</li></ul><p>RA MCU的GPT支持下表的这些功能：·</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image1.jpg" alt="image1"></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image2.jpg" alt="image2"></p><p>RA MCU的GPT引脚及其功能用途如下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image3.jpg" alt="image3"></p><p>最后来看下GPT的系统框图：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image4.png" alt="image4" style="zoom:67%;"><ol><li>计数器</li></ol><p>GTCNT是GPT定时器模块内部的计数器，实际上，计数器是实现定时器外设的各种功能的基础。 因此，了解计数器的规格和功能非常重要。</p><p>对于RA6M5，共有10个GPT定时器（GPT0~9），而GPT又分为GPT32和GPT16。GPT32有4个（GPT0~3），计数器为32bit，在上图中用GPT320~GPT323来表示；而GPT16有6个（GPT4~9），计数器为16bit，在上图中用GPT164~GPT169来表示。</p><p>GPT的计数器支持递增计数，递减计数和递增/递减计数（即递增与递减计数轮流进行）。</p><ol start="2"><li>时钟源</li></ol><p>GPT定时器的时钟输入可以选择内部的PCLKD分频后输入，或者选择通过GTETRGn引脚输入外部时钟。这两类中只能选择一个，若选择外部时钟输入则定时器不能对内部时钟输入进行计数。</p><ul><li>PCLKD / n（n = 1/2/4/8/16/32/64/256/1024）</li><li>GTETRGA,GTETRGB,GTETRGC,GTETRGD（通过POEG）</li></ul><p>注：PCLKD / 1表示的是不分频。</p><ol start="3"><li>周期设置</li></ol><p>GTPR周期设置寄存器，是一个可读写的寄存器，用户可通过该寄存器设置计数器GTCNT的最大计数值，计数超过该值就会溢出，因此该值决定了计数器的计数周期。GTPR的有效位与GTCNT（16位或32位）相同。如果GTPR的有效大小为16位，则用户读取其高16位始终为0，并且对其高16位的写入作会被忽略。</p><p>GTPBR 周期设置缓冲寄存器，同样也是一个可读写的寄存器，用作GTPR的缓冲寄存器，GPT计数器每计数溢出一次，就会将GTPBR的值写入GTPR。GTPBR的有效大小也与GTCNT（16位或32位）相同。如果GTPBR的有效大小为16位，则用户读取其高16位始终为0，并且对其高16位的写入作会被忽略。</p><ol start="4"><li>控制寄存器</li></ol><p>本书是面向对象的编程思想，不会基于寄存器直面底层硬件编程，且GPT的控制寄存器很多，本书不对GPT的寄存器做一一讲解。</p><ol start="5"><li>比较输出和输入捕获控制寄存器</li></ol><p>这部分包含一个比较器和6个GTCCRx寄存器（x = A,B,C,D,E,F）。这6个GTCCRx寄存器的功能并不完全相同：</p><ul><li>GTCCRA和GTCCRB是用于输出比较和输入捕捉的寄存器。</li><li>GTCCRC和GTCCRE可用作比较匹配寄存器，也可以分别作为GTCCRA和GTCCRB的缓冲寄存器（构成GTCCRA和GTCCRB的单缓冲寄存器）。</li><li>GTCCRD和GTCCRF可用作比较匹配寄存器，也可以分别作为GTCCRC和GTCCRE的缓冲寄存器（构成GTCCRA和GTCCRB的双缓冲寄存器：即GTCCRC和GTCCRD作为GTCCRA的双缓冲，GTCCRE和 GTCCRF作为GTCCRB的双缓冲）。</li></ul><p>比如，在普通的PWM输出模式下，比较器将计数器GTCNT与GTCCRA和GTCCRB进行比较，若匹配（比较结果相等），则根据GTIOR（Genera- PWM Timer I/O Contro- Register）寄存器的GTIOA[4:0]和GTIOB[4:0]的配置来切换GTIOCA和GTIOCB的输出电平。可以将GTIOCA和GTIOCB切换为低电平、高电平、或者反转电平。</p><ol start="6"><li>中断源</li></ol><p>图中显示的是GPT0的中断请求信号，中断请求信号用于产生中断、或者通过ELC链接到其他模块。</p><p>GPT提供以下中断源：</p><ul><li>GTCCR输入捕捉/比较匹配</li><li>GTCNT计数器上溢（超出GTPR设置的值）/下溢</li><li>周期计数功能完成</li></ul><p>每个中断源都有自己的状态标志。当一个中断源信号产生时，相关的状态标志会被硬件自动设置为1。状态标志可以通过写入0来清除。需要注意的是，如果标志设置和标志清除同时发生，标志清除优先于标志设置。</p><ol start="7"><li>GPT输入引脚</li></ol><p>GTIOCnA和GTIOCnB是GPT的IO输入输出引脚，用于信号输出和输入捕获。它们还配备了噪声滤波器（Noise Filter），噪声滤波器以采样时钟对输入信号进行采样，并去除长度小于3个采样周期的脉冲。用户可设置是否启用噪声滤波器。</p><ol start="8"><li>ELC输入事件</li></ol><p>GPT可以执行以下操作以响应最多8个来自ELC的事件信号输入：</p><ul><li>开始计数，停止计数，清除计数</li><li>递增计数，递减计数</li><li>进行一次输入捕获</li></ul><ol start="9"><li>输出相位切换控制</li></ol><p>输出相位切换（GPT_OPS）功能通过输出相位切换控制寄存器（OPSCR）进行控制，用于实现轻松控制无刷直流电机运行的功能。</p><p>需要注意的是：GPT_OPS功能在RA6M5中只有一个，并不是每个GPT定时器都对应有一个，也就是说通过该功能只能轻松控制一个直流无刷电机。</p><h2 id="_18-2-gpt模块的使用" tabindex="-1"><a class="header-anchor" href="#_18-2-gpt模块的使用" aria-hidden="true">#</a> 18.2 GPT模块的使用</h2><p>在RASC中使用GPT模块根据应用场景分为两类：基本定时、有输入/输出需求。如果仅仅用作基本定时，那么只需要在RASC的“Stacks”中添加GPT模块即可；如果有输入输出需求的，例如输出PWM到某个引脚或者对某个波形进行捕获比较，那就需要去FSP的“Pins”中配置该引脚，然后再去“Stacks”中添加配置GPT模块。</p><h3 id="_18-2-1-配置gpt模块" tabindex="-1"><a class="header-anchor" href="#_18-2-1-配置gpt模块" aria-hidden="true">#</a> 18.2.1 配置GPT模块</h3><p>如果需要输出波形到某个引脚或者捕获比较某个引脚，建议先去RASC的“Pins”配置引脚。</p><ol><li>配置GPT引脚</li></ol><p>在“Pins”中的“Peripherals”中找到“Timers:GPT”,根据硬件设计选择GPT通道和引脚，比如要使用PWM实现一个呼吸灯，LED的原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image5.png" alt=""></p><p>使用到的引脚是P400，此引脚支持的GPT复用通道在RA6M5数据手册中查看：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image6.png" alt=""></p><p>可以看到P400支持的GPT复用通道是GTIOC6A，也就是GPT通道6的A组引脚，那么就可以配置Pins了，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image7.png" alt=""></p><ol start="2"><li>添加GPT Stack</li></ol><p>在FSP的“Stacks”中点击“New Stack”找到“Timers”，选择其中的“Timer,General PWM(r_gpt)”添加GPT模块，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image8.png" alt=""></p><p>接着根据使用场景配置GPT的Stack模块。GPT的Stack有3个大类需要配置：</p><ul><li><p>Common：通用配置，适配该外设所有的stack模块。对于GPT而言，通用配置需要设置的参数是：</p><ul><li>Parameter Checking：参数校验，在FSP库函数中判断参数是否合法，使用断言方式判断，默认不使能。</li><li>Pin Output Support：GPT输出引脚是否使能，支持两种模式：使能和根据模块外部特征配置使能。默认使用“根据模块外部特征配置使能”，目的是不同的模块使用不同的配置实现定制化。</li><li>Write Protect Enable：写保护，默认不使能。</li><li>Clock Source：时钟源，GPT默认选择PCLKD。</li></ul></li><li><p>Module g_timer Timer,General PWM(r_gpt)：模块定制化配置，是本节配置的重点。</p></li><li><p>Pins：引脚选择，如果有输入输出需求，会自动连接到前文配置的引脚。如果是多通道，需要选择配置。</p></li></ul><ol start="3"><li>配置GPT Module</li></ol><p>GPT的通道定制化Module配置有以下5类参数需要配置：</p><ul><li>General：常规配置</li></ul><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image9.jpg" style="zoom:80%;"><ul><li>OutPut：输出配置</li></ul><p>此项是配置GPT输出功能的参数，例如占空比、引脚初始状态、空闲状态等，参数比较多，不一一列举，主要内容如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image10.png" alt=""></p><p>后文会配置此处的参数生成PWM来实现呼吸灯效果，那时会详细介绍这些参数。</p><ul><li>Input：输入配置</li></ul><p>此项是配置GPT的输入捕获功能，需要配置触发捕获向上计数的源、触发向下计数的源、开始捕获触发源、停止捕获触发源等，详细内容见下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image11.png" alt=""></p><p>这些触发源都需要根据硬件设计选择。</p><ul><li>Interrupts：中断配置</li></ul><p>此项配置GPT的中断回调函数和中断优先级，比如溢出中断优先级、输入捕获优先级等，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image12.png" alt=""></p><ul><li>Extra Features：外部特征配置</li></ul><p>GPT的外部特征配置是指配置GPT输出引脚的使能、GPT计数的触发源、死区时间的设置等，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image13.png" alt=""></p><p>当GPT的使用更加精细，比如会和ADC搭配使用，需要生成复杂的PWM、三角PWM时，就需要对外部特征进行更加精细的，定制化的配置。</p><h3 id="_18-2-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_18-2-2-配置信息解读" aria-hidden="true">#</a> 18.2.2 配置信息解读</h3><p>使用RASC将GPT的stack模块配置好之后点击“Generate Project Content”生成工程，会在工程的pin_data.c中生成模块的引脚信息，在hal_data.c中生成模块的配置信息。</p><ol><li>GPT的引脚信息</li></ol><p>假设需要使用GPT往P400引脚输出PWM控制LED，使用RASC配置GPT的通道且指定引脚后，生成的工程中的pin_data.c中的g_bsp_pin_cfg_data[]数组就会添加该引脚的配置信息，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_00<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
              <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_GPT1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>GPT的模块配置信息</li></ol><p>GPT模块的配置信息在hal_data.c中以timer_cfg_t类型的结构体变量表示，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">timer_cfg_t</span> g_timer6_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>mode                <span class="token operator">=</span> TIMER_MODE_PERIODIC<span class="token punctuation">,</span>
    <span class="token comment">/* Actual period: 0.001 seconds. Actual duty: 50%. */</span> 
    <span class="token punctuation">.</span>period_counts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> <span class="token number">0x186a0</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>duty_cycle_counts <span class="token operator">=</span> <span class="token number">0xc350</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>source_div <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">timer_source_div_t</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel             <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback          <span class="token operator">=</span> gpt_timer6_callback<span class="token punctuation">,</span>
    <span class="token comment">/** If NULL then do not add &amp; */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>p_context           <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>p_context           <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token constant">NULL</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">.</span>p_extend            <span class="token operator">=</span> <span class="token operator">&amp;</span>g_timer6_extend<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cycle_end_ipl       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>VECTOR_NUMBER_GPT2_COUNTER_OVERFLOW<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>cycle_end_irq       <span class="token operator">=</span> VECTOR_NUMBER_GPT2_COUNTER_OVERFLOW<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>cycle_end_irq       <span class="token operator">=</span> FSP_INVALID_VECTOR<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：mode表示GPT的类型，此处是周期型；</li><li>第05~06行：表示输出PWM的周期和占空比；</li><li>第08行：表示使用的GPT的通道；</li><li>第09行：表示GPT的中断回调函数；</li></ul><p>在程序中使用GPT的open函数打开GPT设备的时，就会使用这些配置信息初始化GPT。</p><h3 id="_18-2-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_18-2-3-中断回调函数" aria-hidden="true">#</a> 18.2.3 中断回调函数</h3><p>使用RASC配置生成工程后，配置的中断回调函数会在hal_data.h中声明，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">gpt_timer6_callback</span></span>
<span class="token keyword">void</span> <span class="token function">gpt_timer6_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户需要在自己的程序中实现这个中断回调函数，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">gpt_timer6_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以根据中断回调函数的参数timer_callback_args_t的成员进行定制处理，这个结构体的原型长这样：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_timer_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token comment">/** Placeholder for user data.  Set in @ref timer_api_t::open function in @ref timer_cfg_t. */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span>  <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
    <span class="token class-name">timer_event_t</span> event<span class="token punctuation">;</span>               <span class="token comment">///&lt; The event can be used to identify what caused the callback.</span>

    <span class="token comment">/** Most recent capture, only valid if event is TIMER_EVENT_CAPTURE_A or TIMER_EVENT_CAPTURE_B. */</span>
        <span class="token class-name">uint32_t</span> capture<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">timer_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最常用的就是其中的定时器事件成员timer_event_t，它支持的事件如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Events that can trigger a callback function */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_timer_event</span>
<span class="token punctuation">{</span>
    TIMER_EVENT_CYCLE_END<span class="token punctuation">,</span> <span class="token comment">///&lt; Requested timer delay has expired or timer has wrapped around</span>
    TIMER_EVENT_CREST <span class="token operator">=</span> TIMER_EVENT_CYCLE_END<span class="token punctuation">,</span> <span class="token comment">///&lt; Timer crest event (counter is at a maximum, triangle-wave PWM only)</span>
    TIMER_EVENT_CAPTURE_A<span class="token punctuation">,</span>                    <span class="token comment">///&lt; A capture has occurred on signal A</span>
    TIMER_EVENT_CAPTURE_B<span class="token punctuation">,</span>                    <span class="token comment">///&lt; A capture has occurred on signal B</span>
    TIMER_EVENT_TROUGH<span class="token punctuation">,</span>      <span class="token comment">///&lt; Timer trough event (counter is 0, triangle-wave PWM only</span>
<span class="token punctuation">}</span> <span class="token class-name">timer_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如用户可以判断事件是否为TIMER_EVENT_CYCLE_END，它表示计数到指定周期了才进入的中断：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event <span class="token operator">==</span> TIMER_EVENT_CYCLE_END<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-2-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_18-2-4-api接口及其用法" aria-hidden="true">#</a> 18.2.4 API接口及其用法</h3><p>GPT模块供用户使用的API在r_timer_api.h中定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_timer_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">timer_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> periodSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> dutyCycleSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                               <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> duty_cycle_counts<span class="token punctuation">,</span> 
                               <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">timer_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">timer_status_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">timer_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看下这些API的用法。</p><ol><li>打开GPT设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">timer_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：timer_ctrl_t结构体指针参数，本质是一个void类型的参数，指向st_gpt_instance_ctrl类型变量；</li><li>p_cfg：timer_cfg_t结构体指针参数，在程序中会指向在hal_data.c中定义的g_timer6_cfg静态全局变量；</li></ul><p>用户在程序中可以参考如下代码使用此函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer6<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>开启/停止GPT计数</li></ol><ul><li>GPT开始计数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>GPT停止计数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>必须要在GPT打开状态下使用这两个函数，用户可以参考如下代码在自己的程序中使用这两个函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>重置GPT计数值</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> reset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果GPT是向上计数，使用此函数会将计数器的值重置为0；如果是向下计数，使用此函数会将计数器的值重置为设定的周期值。</p><ol start="4"><li>使能/失能GPT的输入捕获</li></ol><ul><li>使能GPT输入捕获</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>失能GPT输入捕获</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果用户使用了GPT的输入捕获功能的话，在需要对引脚的信号进行捕获时需要使能捕获功能；如果想要停止捕获则调用disable。</p><ol start="5"><li>设置GPT的计数周期值</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> periodSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要改变定时器的计数周期，可以调用此函数，在下一次重新计数开始生效。</p><ol start="6"><li>设置GPT输出PWM的占空比</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> dutyCycleSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                           <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> duty_cycle_counts<span class="token punctuation">,</span> 
                           <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在PWM驱动应用中，可以使用此函数来修改占空比。用户可以参考如下代码来使用这个函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">dutyCycleSet</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> gPulse<span class="token punctuation">,</span> GPT_IO_PIN_GTIOCA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数最后一个参数是指GPT的输出通道，而不是指IO引脚。</p><ol start="7"><li>关闭GPT设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">timer_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_18-3-gpt的基本定时功能" tabindex="-1"><a class="header-anchor" href="#_18-3-gpt的基本定时功能" aria-hidden="true">#</a> 18.3 GPT的基本定时功能</h2><p>本节实验会使用到串口打印以及滴答定时器，请将前文的drv_uart.c/.h和hal_systick.c/.h移植到本次实验中。</p><h3 id="_18-3-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_18-3-1-设计目的" aria-hidden="true">#</a> 18.3.1 设计目的</h3><p>实现一个基于硬件定时器的延时函数，最小延时时间为1us。同时利用滴答定时器辅助验证，通过串口打印调试结果。</p><h3 id="_18-3-2-gpt模块配置" tabindex="-1"><a class="header-anchor" href="#_18-3-2-gpt模块配置" aria-hidden="true">#</a> 18.3.2 GPT模块配置</h3><p>本次实验只用到了GPT的基本定时计数功能，没有使用到比较输出或捕获输出，因而仅添加了stack模块，没有配置Pins。GPT Stack模块的Module配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image14.png" alt=""></p><p>虽然配置的时候选择的周期和单位是1us，但是在实际使用中可以改变这个值，所以Period和Period Unit在配置时其实可以选任意值。</p><p>另外，基于本次实验的目的，本书将定时器设置为one-shot模式，每次延时只需要计数器完成一次周期计数溢出。</p><h3 id="_18-3-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_18-3-3-驱动程序" aria-hidden="true">#</a> 18.3.3 驱动程序</h3><ol><li>初始化</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化函数比较简单，仅仅只是调用GPT的open函数打开设备。</p><ol start="2"><li>中断回调函数和溢出等待函数</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GPTDrvWaitOverflow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gGPTOverflow <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token comment">/* Callback function */</span>
<span class="token keyword">void</span> <span class="token function">gpt_timer0_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event <span class="token operator">==</span> TIMER_EVENT_CYCLE_END<span class="token punctuation">)</span>
        gGPTOverflow <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GPTDrvWaitOverflow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gGPTOverflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gGPTOverflow <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第02行：定义一个bool类型的标志位来表示定时器计数是否溢出，在中断回调函数中它被赋值为true，在等待函数中它被赋值为false；</li><li>第07行：判断的定时器中断事件是周期结束事件，表示一次周期性的计数完成触发的中断；</li></ul><ol start="3"><li>微秒延时函数</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">GPTDrvUDelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">periodSet</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> time<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">GPTDrvWaitOverflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：根据参数和定时器的时钟频率计算周期值，定时器的时钟频率是100MHz，要计数达到1us的时间就需要以100MHz的频率计数100下。因而要实现以n微秒，就需要给定时器设置n*100个计数周期值。</li><li>第07行：复位计数器的计数值，本次选择的是向上计数，复位后计数器的计数值会归零；</li><li>第11行：开启定时器计数，因为本次使用的是one-shot模式，当定时器计数time*100次后会自动停止；</li></ul><h3 id="_18-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_18-3-4-测试程序" aria-hidden="true">#</a> 18.3.4 测试程序</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">GPTAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token punctuation">{</span>
        <span class="token class-name">uint32_t</span> lastTick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">GPTDrvUDelay</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// delay 1ms</span>
        <span class="token class-name">uint32_t</span> curTick <span class="token operator">=</span> <span class="token function">HAL_GetTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Last    Tick: %d\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>lastTick<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Current Tick: %d\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>curTick<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Passed  Tick: %d\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>curTick <span class="token operator">-</span> lastTick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第08行：获取us延时函数调用前的滴答定时器时刻；</li><li>第09行：延时1000,000us也就是1s，因为使用的是滴答定时器辅助验证，延时函数需要大于1ms；</li><li>第10行：获取us延时函数调用后的滴答定时器时刻；</li><li>第13行：打印出两次时刻的差值计算us延时函数的实际耗时；</li></ul><h3 id="_18-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_18-3-5-测试结果" aria-hidden="true">#</a> 18.3.5 测试结果</h3><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image15.png" alt=""></p><p>可以看到滴答定时器走过的tick数为1000，也就是耗时1s，和实验预期一致。</p><h2 id="_18-4-pwm实现呼吸灯" tabindex="-1"><a class="header-anchor" href="#_18-4-pwm实现呼吸灯" aria-hidden="true">#</a> 18.4 PWM实现呼吸灯</h2><p>本节实验会使用到串口打印以及滴答定时器，请将前文的drv_uart.c/.h和hal_systick.c/.h移植到本次实验中。</p><h3 id="_18-4-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_18-4-1-设计目的" aria-hidden="true">#</a> 18.4.1 设计目的</h3><p>使用GPT输出PWM，通过调节PWM的占空比来改变LED的亮度，通过设计合理的周期值来达到适宜的呼吸灯效果。</p><h3 id="_18-4-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_18-4-2-硬件连接" aria-hidden="true">#</a> 18.4.2 硬件连接</h3><p>LED的原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image5.png" alt=""></p><p>在前文已经分析过P400可以复用做GPT通道6的输出IO。</p><h3 id="_18-4-3-gpt模块配置" tabindex="-1"><a class="header-anchor" href="#_18-4-3-gpt模块配置" aria-hidden="true">#</a> 18.4.3 GPT模块配置</h3><p>在FSP中对GPT6模块的配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image16.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-18/image17.png" alt=""></p><ol><li>通道：6</li><li>模式：周期型，周期值：1kHz</li><li>初始占空比：50%</li><li>中断回调函数：gpt_timer6_callback</li></ol><h3 id="_18-4-4-驱动程序" tabindex="-1"><a class="header-anchor" href="#_18-4-4-驱动程序" aria-hidden="true">#</a> 18.4.4 驱动程序</h3><ol><li>初始化</li></ol><p>本次实验的初始化程序如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">GptPWMDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer6<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">infoGet</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gTimerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gPeriod <span class="token operator">=</span> gTimerInfo<span class="token punctuation">.</span>period_counts<span class="token punctuation">;</span>
    gStep <span class="token operator">=</span> gPeriod<span class="token operator">/</span><span class="token number">1500</span><span class="token punctuation">;</span>
    
    err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：使用open函数初始化GPT6的配置；</li><li>第07行：获取GPT6的初始配置，最重要的是获取到周期数值；</li><li>第11行：根据周期数值和预期的呼吸灯效果，设计为逐渐加强和逐渐减弱的时间都为1.5s；</li><li>第13行：开启定时器计数；</li></ul><ol start="2"><li><p>中断回调函数</p><p>本次实验以1kHz频率触发溢出中断，每次中断都要修改PWM的占空比来达到LED亮度的增强和减弱，代码如下：</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">gpt_timer6_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event <span class="token operator">==</span> TIMER_EVENT_CYCLE_END<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>gDir<span class="token punctuation">)</span>
            gPulse <span class="token operator">-=</span> gStep<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            gPulse <span class="token operator">+=</span> gStep<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>gPulse <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            gDir <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>gPulse <span class="token operator">&gt;=</span> gPeriod<span class="token punctuation">)</span>
            gDir <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer6<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">dutyCycleSet</span><span class="token punctuation">(</span>g_timer6<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> gPulse<span class="token punctuation">,</span> GPT_IO_PIN_GTIOCA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第04行：判断触发中断的是否是周期性计数溢出触发的；</li><li>第06~13行：根据占空比的数值决定本次是处于亮度增强期还是减弱期，如果是增强期则增加占空比，否则减小占空比；</li><li>第14行：调用函数修改PWM的占空比；</li></ul><h3 id="_18-4-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_18-4-5-测试结果" aria-hidden="true">#</a> 18.4.5 测试结果</h3><p>本次实验需要在实际硬件上验证。在本书配套的开发板上运行此程序可以发现LED以大约1.5s的时间从暗状态逐渐增强到最亮，然后又花1.5s的时间逐渐减弱到暗状态。</p>`,184),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter18.html.vue"]]);export{r as default};
