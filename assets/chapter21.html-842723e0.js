import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const e={},p=t(`<h1 id="第21章-事件链接控制器elc" tabindex="-1"><a class="header-anchor" href="#第21章-事件链接控制器elc" aria-hidden="true">#</a> 第21章 事件链接控制器ELC</h1><p>本章目标</p><ul><li>了解ELC基本概念和RA6M5处理器的ELC模块；</li><li>学会使用RASC配置ELC链接不同外设，并触发设备工作；</li></ul><h2 id="_21-1-elc简介" tabindex="-1"><a class="header-anchor" href="#_21-1-elc简介" aria-hidden="true">#</a> 21.1 ELC简介</h2><h3 id="_21-1-1-elc的特征" tabindex="-1"><a class="header-anchor" href="#_21-1-1-elc的特征" aria-hidden="true">#</a> 21.1.1 ELC的特征</h3><p>ELC：Event Link Controller，事件链接控制器。它用于链接芯片上两个不同的外设，通过外设A的某个中断事件触发外设B去执行某个动作，这个过程是通过芯片内部硬件信号的连接完成的，不需要占用CPU资源。因而ELC可以帮助开发者完成许多同步触发的工作，而不会引起CPU资源的过多浪费。</p><p>ELC支持的事件类型多达219种。当产生了一个ELC事件的时候，也可以触发激活DTC功能。</p><h3 id="_21-1-2-elc的系统框图" tabindex="-1"><a class="header-anchor" href="#_21-1-2-elc的系统框图" aria-hidden="true">#</a> 21.1.2 ELC的系统框图</h3><p>ECL的系统框图如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image1.png" style="zoom:50%;"><ol><li><p>事件控制器</p></li><li><p>ELC相关寄存器：用户可以配置和观察这些寄存器来调试ELC。</p></li><li><p>ELC支持连接的事件：并不是所有的中断事件都能够用于ELC，只有框图中显示的这些中断事件可以。</p></li></ol><h3 id="_1-1-1-支持的事件" tabindex="-1"><a class="header-anchor" href="#_1-1-1-支持的事件" aria-hidden="true">#</a> 1.1.1 支持的事件</h3><p>ELC支持互相连接触发的外设模块见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image2.jpg" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image3.png" alt=""></p><ul><li>外部中断IRQ触发定时器GPT开始计数；</li><li>定时器开始计数后，当计数溢出事件产生时，同步触发ADC转换和CTSU的测量模式；</li><li>串口中断触发DTC开启数据传输；</li></ul><p>这所有的触发操作都是无需CPU干预处理。</p><h2 id="_21-2-elc模块的配置" tabindex="-1"><a class="header-anchor" href="#_21-2-elc模块的配置" aria-hidden="true">#</a> 21.2 ELC模块的配置</h2><h3 id="_21-2-1-配置elc模块" tabindex="-1"><a class="header-anchor" href="#_21-2-1-配置elc模块" aria-hidden="true">#</a> 21.2.1 配置ELC模块</h3><p>ELC本身只是一个连接控制器，不涉及双方设备的设置。具体模块的触发条件，需要去设置该模块。因而在RASC中，ELC的配置很简单，只需要在FSP的“Stacks”中添加ELC的Stack即可，无需额外配置，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image4.png" alt=""></p><p>击“New Stack”后在“System”中找到“Event Link Controller(r_elc)”添加ELC模块即可（在用户代码里，再去打开、使能它即可）。</p><p>对于ELC的Stack配置，只能设置它的名字（使用默认值即可）：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image5.png" alt=""></p><h3 id="_21-2-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_21-2-2-配置信息解读" aria-hidden="true">#</a> 21.2.2 配置信息解读</h3><p>使用RASC配置ELC并生成代码后，在common_data.c中生成一个elc_instance_t结构体类型的全局变量g_elc，它包括ELC控制参数成员、ELC配置信息、ELC控制接口成员。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">elc_instance_t</span> g_elc <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl <span class="token operator">=</span> <span class="token operator">&amp;</span>g_elc_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api  <span class="token operator">=</span> <span class="token operator">&amp;</span>g_elc_on_elc<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg  <span class="token operator">=</span> <span class="token operator">&amp;</span>g_elc_cfg
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>g_elc_ctrl：elc_instance_ctrl_t结构体类型，表明ELC的状态，原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_elc_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>     open<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">elc_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>g_elc_on_elc：ELC的控制接口，elc_api_t结构体指针，指向g_elc_on_elc结构体。g_elc_on_elc在r_elc.c中实现：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">elc_api_t</span> g_elc_on_elc <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open                  <span class="token operator">=</span> R_ELC_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close                 <span class="token operator">=</span> R_ELC_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>softwareEventGenerate <span class="token operator">=</span> R_ELC_SoftwareEventGenerate<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>linkSet               <span class="token operator">=</span> R_ELC_LinkSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>linkBreak             <span class="token operator">=</span> R_ELC_LinkBreak<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>enable                <span class="token operator">=</span> R_ELC_Enable<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>disable               <span class="token operator">=</span> R_ELC_Disable<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些控制API将会在下一小节进行介绍讲解。</p><ul><li>g_elc_cfg：ELC的控制配置信息，它是elc_cfg_t结构体指针，此结构体原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_elc_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">elc_event_t</span> <span class="token keyword">const</span> link<span class="token punctuation">[</span>ELC_PERIPHERAL_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; Event link register (ELSR) settings</span>
<span class="token punctuation">}</span> <span class="token class-name">elc_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体在elc_data.c中生成，以本章外部中断触发定时器开始计数为例，生成的列表内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">elc_cfg_t</span> g_elc_cfg <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_A<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_ICU_IRQ6<span class="token punctuation">,</span> <span class="token comment">/* ICU IRQ6 (External pin interrupt 6) */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_B<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_ICU_IRQ1<span class="token punctuation">,</span> <span class="token comment">/* ICU IRQ1 (External pin interrupt 1) */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_C<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_D<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_E<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_F<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_G<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_GPT_H<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_ADC0<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_ADC0_B<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_ADC1<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_ADC1_B<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_DAC0<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_DAC1<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_IOPORT1<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_IOPORT2<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_IOPORT3<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_IOPORT4<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
    <span class="token punctuation">.</span>link<span class="token punctuation">[</span>ELC_PERIPHERAL_CTSU<span class="token punctuation">]</span> <span class="token operator">=</span> ELC_EVENT_NONE<span class="token punctuation">,</span> <span class="token comment">/* No allocation */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第02行：IRQ6触发ELC_GPTA类事件；</li><li>第03行：IRQ1触发ELC_GPTB类事件；</li></ul><p>ELC_GPT_A~H是指ELC允许的GPT事件类型名称，如下表所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image6.png" alt=""></p><h3 id="_21-2-3-api接口及其使用" tabindex="-1"><a class="header-anchor" href="#_21-2-3-api接口及其使用" aria-hidden="true">#</a> 21.2.3 API接口及其使用</h3><p>在上一小节已经了解到ELC的控制接口，其原型是elc_api_t结构体，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_elc_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">elc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareEventGenerate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                        <span class="token class-name">elc_software_event_t</span> event_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> linkSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">elc_peripheral_t</span> peripheral<span class="token punctuation">,</span> 
                          <span class="token class-name">elc_event_t</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> linkBreak<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">elc_peripheral_t</span> peripheral<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">elc_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本小节就对这些操作API进行一一介绍讲解。</p><ol><li>打开ELC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">elc_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：elc_ctrl_t结构体类型，此结构体实际上是void类型，实际会指向elc_instance_ctrl_t结构体全局变量g_elc_ctrl；</li><li>p_cfg：elc_cfg_t结构体类型，实际会指向elc_cfg_t全局常量g_elc_cfg；</li></ul><p>open函数的主要功能就是将事件连接列表的设置值，用来初始化ELC模块。可以参考以下代码来初始化ELC设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_elc<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭ELC设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭ELC函数实现的功能比较简单，就是将代表ELC的状态成员变量设置为CLOSED，并且失能ELC设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Set state to closed */</span>
p_instance_ctrl<span class="token operator">-&gt;</span>open <span class="token operator">=</span> ELC_CLOSED<span class="token punctuation">;</span>

<span class="token comment">/* Globally disable the operation of the Event Link Controller */</span>
R_ELC<span class="token operator">-&gt;</span>ELCR <span class="token operator">=</span> ELC_ELCR_ELCON_DISABLE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使能和失能ELC功能</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> enable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> disable<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只有在使能了ELC的情况下，外设模块的事件触发才能生效。而使能、失能ELC实际上就是对ELC的ELCR寄存器进行控制：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Globally enable ELC function */</span>
R_ELC<span class="token operator">-&gt;</span>ELCR <span class="token operator">=</span> ELC_ELCR_ELCON_ENABLE<span class="token punctuation">;</span>

<span class="token comment">/* Globally disable ELC function */</span>
R_ELC<span class="token operator">-&gt;</span>ELCR <span class="token operator">=</span> ELC_ELCR_ELCON_DISABLE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>设置事件链接</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> linkSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                      <span class="token class-name">elc_peripheral_t</span> peripheral<span class="token punctuation">,</span> 
                      <span class="token class-name">elc_event_t</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在初始化设置列表之后，如果要额外添加事件，可以使用这个API。支持的外设列表在r_elc_api.h中的elc_peripheral_t枚举中定义，支持的事件信号类型在bsp_elc.h中的elc_event_t枚举定义。</p><p>用户可以参考以下代码使用这个函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> <span class="token function">R_ELC_LinkSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_elc_ctrl<span class="token punctuation">,</span> ELC_PERIPHERAL_DAC0<span class="token punctuation">,</span> ELC_EVENT_ICU_IRQ10<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>断开事件链接</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> linkBreak<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">elc_peripheral_t</span> peripheral<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>断开连接只需要传入需要断开连接的设备序号即可。</p><ol start="6"><li>件触发产生事件</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> softwareEventGenerate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">elc_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                    <span class="token class-name">elc_software_event_t</span> event_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ELC支持的软件触发事件只有两种，在r_elc_api.h中定义的elc_software_event_t枚举类型里列出了这2种事件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_elc_software_event</span>
<span class="token punctuation">{</span>
    ELC_SOFTWARE_EVENT_0<span class="token punctuation">,</span>              <span class="token comment">///&lt; Software event 0</span>
    ELC_SOFTWARE_EVENT_1<span class="token punctuation">,</span>              <span class="token comment">///&lt; Software event 1</span>
<span class="token punctuation">}</span> <span class="token class-name">elc_software_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-3-外部中断触发gpt启停" tabindex="-1"><a class="header-anchor" href="#_21-3-外部中断触发gpt启停" aria-hidden="true">#</a> 21.3 外部中断触发GPT启停</h2><p>本实验会使用到按键外部中断、串口的printf和GPT，请读者阅读前面的章节参考配置相关外设模块。</p><h3 id="_21-3-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_21-3-1-设计目的" aria-hidden="true">#</a> 21.3.1 设计目的</h3><p>使用两个外部中断来触发GPT定时器计数的开始和停止，让用户了解ELC的使用方法。</p><h3 id="_21-3-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_21-3-2-模块配置" aria-hidden="true">#</a> 21.3.2 模块配置</h3><ol><li>外部中断</li></ol><p>外部中断在FSP的“Pins”中选好ICU的引脚后，配置各自的Stack如下图示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image7.png" alt=""></p><p>本次实验选用的外部中断是IRQ1和IRQ6，使用的引脚是P205和P000。通过ELC使用IRQ触发GPT计数，是通过内部硬件的信号连接来实现的，所以不需要使用外部中断的中断服务函数及其中断回调函数。</p><ol start="2"><li>LC外设</li></ol><p>在前文已经说明，ELC的配置除了模块名称外，并不需要做额外配置。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image8.png" alt=""></p><ol start="3"><li>GPT定时器</li></ol><p>GPT定时器的配置除了通道、周期值、计数类型等常规配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image9.png" alt=""></p><p>本章的实验还需要配置GPT模块的Input项中关于开启计数触发源和停止计数触发源的设置：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image10.png" alt=""></p><p>对于开启触发源和停止触发源，里面的可选项是一样的，本次实验使用IRQ6触发定时器开始计数，使用IRQ1触发定时器停止计数，因而“Start Source”和“Stop Source”的配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image11.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image12.png" alt="image12"></p><h3 id="_21-3-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_21-3-3-驱动程序" aria-hidden="true">#</a> 21.3.3 驱动程序</h3><ol><li>外部中断</li></ol><p>外部中断IRQ信号会直接链接触发GPT，因而只需要在RASC中配置IRQ模块，不需要在代码中初始化IRQ。</p><ol start="2"><li>GPT初始化函数</li></ol><p>对于GPT的初始化，只需要调用open、enable函数指针：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>瑞萨对于GPT的enable函数解释是：“Enables external event triggers that start, stop, clear, or capture the counter.”，也就是使能外部中断事件触发计数器的开始、停止、清除和捕获。</p><ol start="3"><li>GPT中断回调函数和溢出等待函数</li></ol><p>GPT的中断回调函数，只是设置一个溢出标志值，函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gGPTOverflow <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token comment">/* Callback function */</span>
<span class="token keyword">void</span> <span class="token function">gpt_timer0_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event <span class="token operator">==</span> TIMER_EVENT_CYCLE_END<span class="token punctuation">)</span>
        gGPTOverflow <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">GPTDrvWaitOverflow</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gGPTOverflow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gGPTOverflow <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>ELC初始化函数</li></ol><p>对于ELC的初始化，只需要调用open、enable函数指针，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ELCDrvInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_elc<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_21-3-4-测试程序" aria-hidden="true">#</a> 21.3.4 测试程序</h3><p>本次实验的测试程序比较简单，每次GPT计数溢出后就计数一次，串口将计数值打印，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ELCAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ELCDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nStart ELC Test!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> tick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">GPTDrvWaitOverflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Tick: %d\\r&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>tick<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_21-3-5-测试结果" aria-hidden="true">#</a> 21.3.5 测试结果</h3><p>在hal_entry.c中的hal_entry()函数中调用测试函数，将编译出来的二进制文件烧写到板子上运行。按下开发板的按键后，就会触发开启定时器开始计数，将开发板的P205引脚和GND短接后就会触发定时器停止计数：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-21/image13.png" alt=""></p>`,107),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","chapter21.html.vue"]]);export{r as default};
