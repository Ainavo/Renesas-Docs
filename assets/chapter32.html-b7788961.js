import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第32章-ds18b20温度获取实验" tabindex="-1"><a class="header-anchor" href="#第32章-ds18b20温度获取实验" aria-hidden="true">#</a> 第32章 DS18B20温度获取实验</h1><p>本章目标</p><ul><li>了解DS18B20通信协议；</li><li>学会使用RA6M5驱动DS18B20以获取温度数据；</li></ul><h2 id="_32-1-ds18b20简介" tabindex="-1"><a class="header-anchor" href="#_32-1-ds18b20简介" aria-hidden="true">#</a> 32.1 DS18B20简介</h2><p>DS18B20温度传感器具有线路简单、体积小的特点，用来测量温度非常简单，在一根通信线上可以挂载多个DS18B20温度传感器。用户可以通过编程实现9~12位的温度读数，每个DS18B20有唯一的64位序列号，保存在rom中，因此一条总线上可以挂载多个DS18B20。</p><p>温度寄存器格式如下表所示：</p><table><thead><tr><th></th><th>Bit 7</th><th>Bit 6</th><th>Bit 5</th><th>Bit 4</th><th>Bit 3</th><th>Bit 2</th><th>Bit 1</th><th>Bit 0</th></tr></thead><tbody><tr><td>LS Byte</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps1.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps2.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps3.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps4.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps5.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps6.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps7.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps8.jpg)</td></tr><tr><td>MS Byte</td><td>S</td><td>S</td><td>S</td><td>S</td><td>S</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps9.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps10.jpg)</td><td>![img](file:///C:\\Users\\myj\\AppData\\Local\\Temp\\ksohtml24560\\wps11.jpg)</td></tr></tbody></table><h2 id="_32-1-1-单总线连接" tabindex="-1"><a class="header-anchor" href="#_32-1-1-单总线连接" aria-hidden="true">#</a> 32.1.1 单总线连接</h2><p>主控芯片和DS18B20之间，只需要连接两条线：数据线、GND。除去GND，只有一条数据线，这就是单总线。</p><p>要使用一条数据线传输双向的数据，要考虑最坏的情况：如果双方同时驱动这个数据线时，一个输出高电平，一个输出低电平，会不会烧坏？所以，一般来说，单总线的驱动电路都是漏极开路，并且使用上拉电阻。如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image1.png" alt=""></p><p>A、 B的输出值与DATA信号的关系，如下表所示：</p><table><thead><tr><th>A</th><th>B</th><th>DATA</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>即：DATA = A &amp; B，只要一方输出0，DATA就是0。</p><p>使用单总线可以连接很多DS18B20，它们平时处于高阻态（内部输出1，反相后无法驱动三极管），不影响其他设备。参与通信的DS18B20，想输出0时并不会损坏其他设备。</p><p>DS18B20接口如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image2.png" alt=""></p><h2 id="_32-1-2-内部存储器" tabindex="-1"><a class="header-anchor" href="#_32-1-2-内部存储器" aria-hidden="true">#</a> 32.1.2 内部存储器</h2><p>DS18B20内部有个64位只读存储器（ROM）和64位配置存储器（SCRATCHP）。</p><p>64位只读存储器（ROM）包含序列号等，具体格式如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image3.png" alt=""></p><p>低八位用于CRC校验，中间48位是DS18B20唯一序列号，高八位是该系列产品系列号(固定为28h)。因此，根据每个DS18B20唯一的序列号，可以实现一条总线上可以挂载多个DS18B20时，获取指定DS18B20的温度信息。</p><p>64位配置存储器（SCRATCHP）由9个Byte组成，包含温度数据、配置信息等，具体格式如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image4.png" alt=""></p><p>Byte[0:1]：温度值。也就是当我们发出一个测量温度的命令之后，还需要发送一个读内存的命令才能把温度值读取出来。</p><p>Byte[2:3]：TL是低温阈值设置，TH是高温阈值设置。当温度低于/超过阈值，就会报警。 TL、TH存储在EEPROM中，数据在掉电时不会丢失；</p><p>Byte4：配置寄存器。用于配置温度精度为9、10、11或12位。配置寄存器也存储在EEPROM中，数据在掉电时不会丢失；</p><p>Byte[5:7]：厂商预留；</p><p>Byte[8]：CRC校验码。</p><h2 id="_32-1-3-通信时序" tabindex="-1"><a class="header-anchor" href="#_32-1-3-通信时序" aria-hidden="true">#</a> 32.1.3 通信时序</h2><p>① 初始化时序</p><p>主机要跟DS18B20通信，首先需要发出一个开始信号。下图中，深黑色线表示由主机驱动信号，浅灰色线表示由DS18B20驱动信号。最开始时引脚是高电平，想要开始传输信号，步骤如下：</p><p>a. 主机必须要拉低至少480us，这是复位信号；</p><p>b. 然后主机释放总线，等待15~60us之后，</p><p>c. 如果GPIO上连有DS18B20芯片，它会拉低60~240us。</p><p>如果主机在最后检查到60～240us的低脉冲，则表示DS18B20初始化成功。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image5.png" alt=""></p><p>② 写时序</p><p>如果写0，拉低至少60us(写周期为60-120us)即可；</p><p>如果写1，先拉低至少1us，然后拉高，整个写周期至少为60us即可。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image6.png" alt=""></p><p>③ 读时序</p><p>主机先拉低至少1us，随后读取电平，如果为0，即读到的数据是0，如果为1，即可读到的数据是1。</p><p>整个过程必须在15us内完成，15us后引脚都会被拉高。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image7.png" alt=""></p><h2 id="_32-1-4-常用命令" tabindex="-1"><a class="header-anchor" href="#_32-1-4-常用命令" aria-hidden="true">#</a> 32.1.4 常用命令</h2><p>现在我们知道怎么发1位数据，收1位数据。发什么数据才能得到温度值，这需要用到“命令”。</p><p>DS18B20中有两类命令：ROM命令、功能命令，列表如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image8.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image9.png" alt=""></p><h2 id="_32-1-5-流程图" tabindex="-1"><a class="header-anchor" href="#_32-1-5-流程图" aria-hidden="true">#</a> 32.1.5 流程图</h2><p>DS18B20芯片手册中有ROM命令、功能命令的流程图，先贴出来，下一小节再举例。</p><p>ROM命令流程图如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image10.png" alt=""></p><p>功能命令流程图如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image11.png" alt=""></p><h2 id="_32-1-6-操作示例1-单个ds18b20温度转换" tabindex="-1"><a class="header-anchor" href="#_32-1-6-操作示例1-单个ds18b20温度转换" aria-hidden="true">#</a> 32.1.6 操作示例1：单个DS18B20温度转换</h2><p>总线上只一个DS18B20设备时，根据下表发送命令、读取数据。因为只有一个DS18B20，所以不需要选择设备，发出“Skip ROM”命令。然后发户“Convert T”命令启动温度转换；等待温度转换成功后再读数据。读数据前，也要发出“Skip ROM”命令。</p><p>下表列得很清楚：</p><table><thead><tr><th>主机模式</th><th>数据</th><th>描述</th></tr></thead><tbody><tr><td>发送</td><td>复位</td><td>主机发出复位脉冲</td></tr><tr><td>接收</td><td>回应</td><td>总线上可能有多个DS18B20，它们都可以拉低信号，回应</td></tr><tr><td>发送</td><td>CCh</td><td>主机发出“Skip ROM”命令(忽略ROM)</td></tr><tr><td>发送</td><td>44h</td><td>主机发出“Convert T”命令(启动温度转换)</td></tr><tr><td>发送</td><td>保持高电平</td><td>主机使用强上拉保存数据线为高电平，至少tCONV()</td></tr><tr><td>发送</td><td>复位</td><td>主机发出复位脉冲</td></tr><tr><td>接收</td><td>回应</td><td>总线上可能有多个DS18B20，它们都可以拉低信号，回应</td></tr><tr><td>发送</td><td>CCh</td><td>主机发出“Skip ROM”命令(忽略ROM)</td></tr><tr><td>发送</td><td>BEh</td><td>主机发出“Read Scratchpad”命令(读内存)</td></tr><tr><td>接收</td><td>9字节数据</td><td>主机读9字节数据</td></tr></tbody></table><h2 id="_32-1-7-操作示例2-指定ds18b20温度转换" tabindex="-1"><a class="header-anchor" href="#_32-1-7-操作示例2-指定ds18b20温度转换" aria-hidden="true">#</a> 32.1.7 操作示例2：指定DS18B20温度转换</h2><p>总线上有多个DS18B20设备时，根据下表发送命令、读取数据。首先是要选中指定设备：使用“Match ROM”命令发出ROM Code来选择中设备；然后发出“Convert T”命令启动温度转换；等待温度转换成功后读数据。读数据前，也要发出“Match ROM”命令、ROM Code。</p><p>下表列得很清楚：</p><table><thead><tr><th>主机模式</th><th>数据</th><th>描述</th></tr></thead><tbody><tr><td>发送</td><td>复位</td><td>主机发出复位脉冲</td></tr><tr><td>接收</td><td>回应</td><td>总线上可能有多个DS18B20，它们都可以拉低信号，回应</td></tr><tr><td>发送</td><td>55h</td><td>主机发出“Match ROM”命令(匹配ROM)</td></tr><tr><td>发送</td><td>64位ROM code</td><td>主机发出想访问的DS18B20的“ROM Code”</td></tr><tr><td>发送</td><td>44h</td><td>主机发出“Convert T”命令(启动温度转换)</td></tr><tr><td>发送</td><td>保持高电平</td><td>主机使用强上拉保存数据线为高电平，至少tCONV()</td></tr><tr><td>发送</td><td>复位</td><td>主机发出复位脉冲</td></tr><tr><td>接收</td><td>回应</td><td>总线上可能有多个DS18B20，它们都可以拉低信号，回应</td></tr><tr><td>发送</td><td>55h</td><td>主机发出“Match ROM”命令(匹配ROM)</td></tr><tr><td>发送</td><td>64位ROM code</td><td>主机发出想访问的DS18B20的“ROM Code”</td></tr><tr><td>发送</td><td>BEh</td><td>主机发出“Read Scratchpad”命令(读内存)</td></tr><tr><td>接收</td><td>9字节数据</td><td>主机读9字节数据</td></tr></tbody></table><h2 id="_32-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_32-2-模块配置" aria-hidden="true">#</a> 32.2 模块配置</h2><p>DS18B20所用引脚要配置为开漏输出，还要使用一个GPT定时器实现微妙的延时。</p><h2 id="_32-2-1-gpio配置" tabindex="-1"><a class="header-anchor" href="#_32-2-1-gpio配置" aria-hidden="true">#</a> 32.2.1 GPIO配置</h2><p>本次实验使用的DS18B20为扩展模块，接插到开发板的扩展板上。使用引脚P003作为DS18B20的DQ功能引脚，原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image12.png" alt=""></p><p>根据DS18B20手册的描述，DQ引脚应该被设置为开漏输出，因而在RASC中如下配置：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image13.png" alt=""></p><h2 id="_32-2-2-gpt配置" tabindex="-1"><a class="header-anchor" href="#_32-2-2-gpt配置" aria-hidden="true">#</a> 32.2.2 GPT配置</h2><p>本次实验需要比较精确的微妙级别的延时，因而使用了一个GPT定时器来实现延时函数，GPT配置如下图所示；</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image14.png" alt=""></p><h2 id="_32-3-延时函数模块封装" tabindex="-1"><a class="header-anchor" href="#_32-3-延时函数模块封装" aria-hidden="true">#</a> 32.3 延时函数模块封装</h2><p>为了满足更多的需求，将延时函数封装为一个独立的模块，实现秒级、毫秒级和微秒级的延时函数。这些延时函数对于不同的平台，不同的RTOS，内部实现的办法会有所不同。</p><p>基于瑞萨处理器RA6M5平台，这些延时函数使用定时器设备的Timeout函数实现，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> secs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>pTimer <span class="token operator">=</span> <span class="token function">TimerDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;Delay Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pTimer<span class="token operator">-&gt;</span><span class="token function">Timeout</span><span class="token punctuation">(</span>pTimer<span class="token punctuation">,</span> secs<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> msecs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>pTimer <span class="token operator">=</span> <span class="token function">TimerDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;Delay Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pTimer<span class="token operator">-&gt;</span><span class="token function">Timeout</span><span class="token punctuation">(</span>pTimer<span class="token punctuation">,</span> msecs<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> usecs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>pTimer <span class="token operator">=</span> <span class="token function">TimerDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;Delay Timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pTimer<span class="token operator">-&gt;</span><span class="token function">Timeout</span><span class="token punctuation">(</span>pTimer<span class="token punctuation">,</span> usecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想使用上述函数，要在config.h中定义如下宏开关：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Libraries Enable/Disable */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIBS_USE_DELAY</span>      <span class="token expression"><span class="token number">1</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-4-驱动程序" tabindex="-1"><a class="header-anchor" href="#_32-4-驱动程序" aria-hidden="true">#</a> 32.4 驱动程序</h2><h2 id="_32-4-1-gpio驱动" tabindex="-1"><a class="header-anchor" href="#_32-4-1-gpio驱动" aria-hidden="true">#</a> 32.4.1 GPIO驱动</h2><p>GPIO驱动程序就是对引脚进行初始化和读写。</p><ol><li><p>初始化GPIO</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">IODrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_ioport<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输出电平</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">IODrvWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> level<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinCfg</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> IOPORT_CFG_PORT_DIRECTION_OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ul><li>第06行：将IO重新配置为输出模式；</li></ul><ol start="2"><li><p>读取电平</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">IODrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinCfg</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> IOPORT_CFG_PORT_DIRECTION_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinRead</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ptdev<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ul><li>第06行：将IO重新配置为输入模式；</li></ul><h2 id="_32-4-2-定时器驱动" tabindex="-1"><a class="header-anchor" href="#_32-4-2-定时器驱动" aria-hidden="true">#</a> 32.4.2 定时器驱动</h2><p>本节只展现GPT关键的代码，至于其它部分代码请读者自行参考前面章节。</p><ol><li><p>初始化GPT</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ptdev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 打开GPT设备完成初始化 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>GPT Timeout</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvTimeout</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> timeout<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">periodSet</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> timeout<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_timer0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">GPTDrvWaitTimer0Overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-5-ds18b20模块" tabindex="-1"><a class="header-anchor" href="#_32-5-ds18b20模块" aria-hidden="true">#</a> 32.5 DS18B20模块</h2><h2 id="_32-5-1-ds18b20设备对象" tabindex="-1"><a class="header-anchor" href="#_32-5-1-ds18b20设备对象" aria-hidden="true">#</a> 32.5.1 DS18B20设备对象</h2><p>要操作DS18B20，只需要对它进行初始化、然后读取数值（在读函数中封装了启动温度转换的操作）。抽象出如下结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span><span class="token punctuation">{</span>
    <span class="token keyword">float</span> value<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>DS18B20Device<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Read函数中会发出各类指令，根据这些指令定义一个枚举类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    READ_ROM            <span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">,</span>
    MATCH_ROM           <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">,</span>
    SEARCH_ROM          <span class="token operator">=</span> <span class="token number">0xF0</span><span class="token punctuation">,</span>
    ALARM_SEARCH        <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">,</span>
    SKIP_ROM            <span class="token operator">=</span> <span class="token number">0xCC</span><span class="token punctuation">,</span>
    
    WRITE_SCRATCHPAD    <span class="token operator">=</span> <span class="token number">0x4E</span><span class="token punctuation">,</span>
    READ_SCRATCHPAD     <span class="token operator">=</span> <span class="token number">0xBE</span><span class="token punctuation">,</span>
    COPY_SCRATCHPAD     <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">,</span>
    CONVERT_T           <span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">,</span>
    RECALL_E2           <span class="token operator">=</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>
    READ_POWER_SUPPLY   <span class="token operator">=</span> <span class="token number">0xB4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>DS18B20_CMD<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后需要向上层应用提供获取DS18B20设备的接口：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span> <span class="token operator">*</span><span class="token function">DS18B20GetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gDevice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-5-2-初始化设备" tabindex="-1"><a class="header-anchor" href="#_32-5-2-初始化设备" aria-hidden="true">#</a> 32.5.2 初始化设备</h2><p>DS18B20本身不需要进行什么初始化，只需要初始化使用到的IO即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DS18B20DevInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    gDQDevice <span class="token operator">=</span> <span class="token function">IODeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;DS18B20 DQ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gDQDevice<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to find DS18B20 DQ!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> gDQDevice<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to init GPIO!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-5-3-ds18b20发送一个字节数据" tabindex="-1"><a class="header-anchor" href="#_32-5-3-ds18b20发送一个字节数据" aria-hidden="true">#</a> 32.5.3 DS18B20发送一个字节数据</h2><p>根据DS18B20通信时序，实现发送一个字节的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DS18B20DevWriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cmd<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x01</span><span class="token punctuation">)</span>   <span class="token comment">// 写1</span>
        <span class="token punctuation">{</span>
            gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 低电平维持10us</span>
            gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 高电平维持100us, 总时长110us </span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>    <span class="token comment">// 写0</span>
        <span class="token punctuation">{</span>
            gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 低电平维持50us</span>
            gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 高电平维持50us, 总时长100us </span>
        <span class="token punctuation">}</span>
        cmd <span class="token operator">=</span> cmd<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-5-4-ds18b20接收一个字节数据" tabindex="-1"><a class="header-anchor" href="#_32-5-4-ds18b20接收一个字节数据" aria-hidden="true">#</a> 32.5.4 DS18B20接收一个字节数据</h2><p>基于开漏输出的特点，主控想放弃单总线的控制时，要让它输出1；然后才可以读取数据。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">DS18B20DevReadByte</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> time_out <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>gDQDevice<span class="token operator">-&gt;</span>value<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gDQDevice<span class="token operator">-&gt;</span>value<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>time_out<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
                time_out<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>time_out<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0x80</span><span class="token punctuation">;</span>
            <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第08行：处理器将IO输出寄存器写1放弃总线控制权；</li></ul><h2 id="_32-5-5-ds18b20复位" tabindex="-1"><a class="header-anchor" href="#_32-5-5-ds18b20复位" aria-hidden="true">#</a> 32.5.5 DS18B20复位</h2><ol><li>主控发出初始化时序</li></ol><p>代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DS18B20DevResetPulse</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>   
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gDQDevice<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span>

    gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机拉低480us~960us</span>
    <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gDQDevice<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机拉高10us</span>
    <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第05、09行的代码让GPIO输出1，但是基于开漏电路的特点，它是依靠上拉电阻将总线拉高。</p><ol start="2"><li>主控等待DS18B20发出回应脉冲</li></ol><p>当主机发出复位脉冲且放弃总线控制后，只需要去读取IO电平并判断时延即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DS18B20DevWaitPresencePulse</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gDQDevice<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> time_out <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    time_out <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gDQDevice<span class="token operator">-&gt;</span>value<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>time_out<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>
        <span class="token comment">// 等待DS18B20将总线拉低</span>
        gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        time_out<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>time_out<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    
    time_out <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gDQDevice<span class="token operator">-&gt;</span>value<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>time_out<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>
        gDQDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gDQDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        time_out<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>time_out<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>复位函数</li></ol><p>综合前两个函数即为复位函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DS18B20DevReset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">DS18B20DevResetPulse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DS18B20DevWaitPresencePulse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> EIO<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>  <span class="token comment">// 等待应答超时</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-5-6-读取ds18b20温度数据" tabindex="-1"><a class="header-anchor" href="#_32-5-6-读取ds18b20温度数据" aria-hidden="true">#</a> 32.5.6 读取DS18B20温度数据</h2><p>根据前面的操作示例1，编写读取函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">DS18B20DevRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DS18B20Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ret1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> <span class="token function">DS18B20DevReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">DS18B20DevWriteByte</span><span class="token punctuation">(</span>SKIP_ROM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0xCC</span>
    <span class="token function">DS18B20DevWriteByte</span><span class="token punctuation">(</span>CONVERT_T<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0x44</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> <span class="token function">DS18B20DevReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">DS18B20DevWriteByte</span><span class="token punctuation">(</span>SKIP_ROM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0xCC</span>
    <span class="token function">DS18B20DevWriteByte</span><span class="token punctuation">(</span>READ_SCRATCHPAD<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0xBE</span>
    ret1 <span class="token operator">=</span> <span class="token function">DS18B20DevReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret2 <span class="token operator">=</span> <span class="token function">DS18B20DevReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret2<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> ret1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">float</span> mTempture_inter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mTempture_dec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mTempture <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    mTempture_dec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.0625</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mTempture_inter <span class="token operator">=</span> <span class="token punctuation">(</span>ret<span class="token operator">&gt;&gt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x7F</span><span class="token punctuation">;</span>
    mTempture <span class="token operator">=</span> mTempture_inter <span class="token operator">+</span> mTempture_dec<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token operator">&gt;&gt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xF</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0xF</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        mTempture <span class="token operator">=</span> <span class="token operator">-</span>mTempture<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    ptdev<span class="token operator">-&gt;</span>value <span class="token operator">=</span> mTempture<span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-6-测试程序" tabindex="-1"><a class="header-anchor" href="#_32-6-测试程序" aria-hidden="true">#</a> 32.6 测试程序</h2><p>测试程序比较简单，获取DS18B20设备并成功初始化之后，直接读取即可。本实验每隔2s读取一次数据并打印观察：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DeviceTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">IODevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    DS18B20Device <span class="token operator">*</span>pDevice <span class="token operator">=</span> <span class="token function">DS18B20GetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pDevice<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error. There is no DS18B20 device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pDevice<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pDevice<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pDevice<span class="token punctuation">)</span> <span class="token operator">==</span> ESUCCESS<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;环境温度：%.4f℃ \\r&quot;</span><span class="token punctuation">,</span> pDevice<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_32-7-测试结果" tabindex="-1"><a class="header-anchor" href="#_32-7-测试结果" aria-hidden="true">#</a> 32.7 测试结果</h2><p>将程序编译烧录到开发板中运行可以观察到如下图所示的测试结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-32/image15.png" alt=""></p>`,129),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter32.html.vue"]]);export{r as default};
