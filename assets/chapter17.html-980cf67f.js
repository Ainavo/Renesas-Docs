import{_ as n,o as s,c as a,e}from"./app-829098b3.js";const t={},p=e(`<h1 id="第17章-can-fd-模块" tabindex="-1"><a class="header-anchor" href="#第17章-can-fd-模块" aria-hidden="true">#</a> 第17章 CAN FD 模块</h1><p>本章目标</p><ul><li>使用 RASC 快速配置 CAN FD 模块</li><li>学会使用 CAN FD 的 API 进行通信</li></ul><h2 id="_17-1-ra6m5-的-can-fd" tabindex="-1"><a class="header-anchor" href="#_17-1-ra6m5-的-can-fd" aria-hidden="true">#</a> 17.1 RA6M5 的 CAN FD</h2><h3 id="_17-1-1-can-fd-模块简介" tabindex="-1"><a class="header-anchor" href="#_17-1-1-can-fd-模块简介" aria-hidden="true">#</a> 17.1.1 CAN FD 模块简介</h3><p>对于瑞萨的 RA6M5 处理器，它的 CAN FD 有如下特征：</p><ol><li>兼容性CAN2.0和CAN FD；</li><li>通信速率在1Mbps~8Mbps；</li><li>模块时钟50MHz；</li><li>有两个通信通道，每通道 4-16 个传输消息缓冲区（TX MB）；</li><li>支持标准帧11bit的ID和扩展帧29bit的ID；</li><li>个全局接收消息缓冲区（RX MB），2-8个全局接收 FIFO（RX FIFO）；</li><li>可以单独将每个筛选规则配置为根据以下条件接受邮件；</li></ol><ul><li>编号</li><li>标准或扩展ID（IDE 位）</li><li>数据或远程帧（RTR 位）</li><li>ID/IDE/RTR掩码</li><li>最小DLC（数据长度）值</li></ul><p>对于CAN FD的中断，分为可配置的全局RX FIFO中断、信道TX中断、全局错误中断和通道错误中断，其中又进行了如下细分：</p><ol><li>可配置的全局 RX FIFO 中断</li></ol><ul><li>可单独配置每个 FIFO</li><li>在接收到特定深度或每收到一条消息触发中断</li></ul><ol start="2"><li>全局错误中断</li></ol><ul><li>数据链路校验</li><li>邮件丢失</li><li>FD 有效负载溢出</li></ul><ol start="3"><li>通道错误中断</li></ol><ul><li>总线错误</li><li>警告错误</li><li>被动错误</li><li>总线断开</li><li>总线断开恢复</li><li>超载</li><li>总线锁</li><li>仲裁损失</li><li>传输中止</li></ul><h3 id="_17-1-2-can-fd系统框图" tabindex="-1"><a class="header-anchor" href="#_17-1-2-can-fd系统框图" aria-hidden="true">#</a> 17.1.2 CAN FD系统框图</h3><p>RA6M5的CAN FD外设的系统框图如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images1.png" style="zoom:50%;"><ol><li>CAN的通道和时钟：</li></ol><p>RA6M5的CAN有两个通道CAN0和CAN1，其通信引脚对应框图中的CTX0/1和CRX0/1，这两个通道的CAN使用各自独立的通信速率。</p><p>CANFDCLK和CANMCLK为CAN-FD 模块的输入时钟，可以选择其一，经过波特率预分频器（Baud rate prescaler）进行分频后输入到CAN协议控制器（Protoco- controller）。 该输入时钟对于计算CAN波特率非常重要。</p><ol start="2"><li>CAN的相关寄存器</li></ol><p>RA6M5的CAN具有很多个寄存器，大致分为控制寄存器、状态寄存器、过滤器寄存器、错误寄存器、FIFO寄存器和发送消息队列寄存器。这些寄存器总数特别多，且本书是基于FSP库进行的面向对象的编程，而直接控制寄存器驱动外设十分的复杂，是面向过程的编程思想，与本书的中心主旨相悖，所以请读者自行阅读手册查阅寄存器信息。</p><ol start="3"><li>过滤器</li></ol><p>接收过滤器（Acceptance filter）和接收过滤器列表（AFL，Acceptance filter list）用于实现CAN的接收过滤功能。而对于使用CAN来说，接收过滤功能至关重要，使用CAN就绕不过CAN外设模块中的接收过滤器，后面在代码中需要手动配置接收过滤器列表（AFL，Acceptance filter list）。</p><ol start="4"><li>CAN的中断</li></ol><p>中断生成器（Interrupt generator）用于生成CAN相关的中断信号，包含如下信号：</p><ul><li>成功接收并存到RX FIFO中断</li><li>全局错误中断</li><li>通道相关的传输中断</li><li>通道错误中断</li><li>从COM FIFO成功接收中断</li></ul><p>另外，两个CAN通道的CRX引脚可用于产生通道唤醒中断信号：通道唤醒中断（CRX0、CRX1）。</p><h3 id="_17-1-3-通信速率" tabindex="-1"><a class="header-anchor" href="#_17-1-3-通信速率" aria-hidden="true">#</a> 17.1.3 通信速率</h3><p>CAN FD的波特率基础计算公式如下：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images2.jpg" style="zoom:67%;"><p>通过手册中关于DLL_CLOCK和对Bit Timing的说明和计算，上述公式可以换算成为下面这个公式：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images3.jpg" style="zoom:67%;"><p>各参数取值范围见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images4.jpg" alt="image4"></p><p>用户需要根据应用场景需求计算表中的参数值，在FSP中填入这些值后生成对应代码使得CAN FD的通信速率满足需求。</p><p>但是实际上，在RASC中配置的时候用户在Bitrate|Automatic中填入预期的波特率时，生成代码自动计算这些数值。</p><h3 id="_17-1-4can-fd的测试模式" tabindex="-1"><a class="header-anchor" href="#_17-1-4can-fd的测试模式" aria-hidden="true">#</a> 17.1.4CAN FD的测试模式</h3><ol><li>监听模式</li></ol><p>SO11898-1推荐一种可选的总线监控模式。在此模式下，CAN通道能够接收有效的数据帧和有效的远程帧。但是，它只在CAN总线上发送隐性位，不允许发送显性位。如果CAN引擎需要发送显性位（ACK位、过载标志、活动错误标志），则该位在内部路由，以便CAN引擎将其监控为显性。外部TX引脚保持隐性状态。</p><p>该模式可用于波特率检测。在此模式下，如果发生总线错误并启用了中断，则会产生错误中断。在此模式下，不允许从该通道的任何正常TX消息缓冲区或TX/GW FIFO请求传输。</p><p>注意：如果消息存储在GWFIFO或路由TXQ中，请确保发送通道不处于监听模式，以便不会从GW FIFO或路由TXQ请求此通道的传输。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images5.png" style="zoom:50%;"><ol start="2"><li>外部环回测试</li></ol><p>在自检模式0中，CAN引擎将自己发送的消息视为通过CAN收发器接收到的消息，并将它们存储到其接收消息缓冲区中。为了独立于外部激励，引擎会生成自己的确认位。此测试可用于CAN收发器测试，并且RX/TX引脚应连接到收发器。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images6.png" alt="images6" style="zoom:50%;"><ol start="3"><li>内部环回测试</li></ol><p>在自检模式1中，CAN引擎将自己发送的消息视为接收的消息，并将它们存储到接收缓冲区中。此模式用于自检功能。为了独立于外部刺激，CAN引擎生成自己的确认位。在这种模式下，CAN引擎执行从TX内部到RX内部的内部反馈。CAN引擎忽略外部RX输入的实际值。外部TX引脚仅输出隐性位。RX/TX引脚不需要连接到CAN总线或任何外部设备。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images7.png" style="zoom:50%;"><h2 id="_17-2can-fd模块的使用" tabindex="-1"><a class="header-anchor" href="#_17-2can-fd模块的使用" aria-hidden="true">#</a> 17.2CAN FD模块的使用</h2><h3 id="_17-2-1配置can-fd模块" tabindex="-1"><a class="header-anchor" href="#_17-2-1配置can-fd模块" aria-hidden="true">#</a> 17.2.1配置CAN FD模块</h3><p>配置CAN FD模块步骤：</p><ul><li>使能时钟</li><li>配置引脚</li><li>配置模块的Stack</li></ul><p>对于CAN FD的Stack，分为两项：Common和Module。</p><p>Common是针对于CAN FD模块而言的通用参数；Module是针对于CAN FD的某个通道而言的特定的参数。CAN FD有两个通道CAN FD0和CAN FD1，Common配置的就是CAN FD0和CAN FD1共用的参数，而如果两个通道都使用了，则会有两个Module，用户需要去CAN FD0和CAN FD1各自的Module中定制配置这两个通道的通信参数。</p><ol><li>使能CAN FD的时钟</li></ol><p>CAN FD模块的时钟默认是没有使能的，用户需要在FSP的“Clocks”里面选择PLL2的时钟源和CAN FD的时钟源，以及设置预分频系数得到CAN FD的时钟频率，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images8.png" style="zoom:67%;"><p>本书选择的PLL2时钟源是内部晶振，经过2分频和24分频后得到240MHz的PLL2总线时钟，而CAN FD的时钟源选择的是PLL2的时钟也就是240Mhz，然后经6分频后得到40MHz的CAN FD时钟。</p><ol start="2"><li>配置Pins</li></ol><p>在FSP的“Pins”中选择“Peripherals”里的“Connectivity:CANFD”，根据硬件设计选择使用的通道，本书使用的是CANFD0，然后再去使能、选择引脚，配置如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images9.png" alt=""></p><p>引脚选择的是P401和P402，本书配套的开发板使用的就是这两个引脚，原理图如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images10.png" style="zoom:67%;"><ol start="3"><li>添加CAN FD的Stack模块</li></ol><p>配置CAN FD的Stack前，需要先去RASC配置界面的“Stacks”中添加CAN FD的Stack，步骤如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images11.png" alt="images11"></p><p>添加完成后可以看到CAN FD的Stack属性配置界面如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images12.png" alt="images12"></p><ol start="4"><li>配置Stack Common</li></ol><p>CAN FD模块的通用参数类型如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images13.png" alt="images13"></p><p>其中Global Error Interupt、Reception和Flexible Data还会细分设置具体的参数，这些参数的作用见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images14.jpg" alt="images12"></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images15.jpg" alt="images15"></p><ol start="5"><li>配置Stack Module</li></ol><p>CAN FD的通道配置参数如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images16.png" alt="images16"></p><p>参数较多，本书将会挑选其中需要重点关注的几个参数进行讲解，其它的参数读者可以在RASC的CAN FD的Stack中点击蓝色感叹号进入查看阅读，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images17.png" alt="images17"></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images18.png" alt="images18"></p><p>本书主要介绍以下几个参数：</p><ol><li>General|Name:CAN FD模块在代码中的名称，需要满足C语言字符串的定义要求，默认为g_canfd0；</li><li>General|Channel：CAN FD模块的通道，范围0~1；</li><li>Bitrate|Automatic|Nominal Rate (bps)：波特率标称值，默认500000bps；</li><li>Bitrate|Automatic|FD Data Rate (bps)：数据波特率值，默认2000000bps；</li><li>Bitrate|Manual|Nominal|Prescaler (divisor)：标称波特率时钟分频系数，默认1；</li><li>Bitrate|Manual|Nominal|Time Segment 1 (Tq)：标称波特率的Segment1，默认29；</li><li>Bitrate|Manual|Nominal|Time Segment 2 (Tq)：标称波特率的Segment2，默认10；</li><li>Bitrate|Manual|Nominal|Sync Jump Width (Tq)：标称波特率的Sync Jump Width,默认4；</li></ol><p>这样计算出来的标称波特率值就是：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images19.jpg" alt="images19" style="zoom:67%;"><ol start="9"><li><p>Bitrate|Manual|Data|Prescaler (divisor)：数据波特率时钟分频系数，默认1；</p></li><li><p>Bitrate|Manual|Data|Time Segment 1 (Tq)：标称波特率的Segment1，默认5；</p></li><li><p>Bitrate|Manual|Data|Time Segment 2 (Tq)：标称波特率的Segment2，默认2；</p></li><li><p>Bitrate|Manual|Data|Sync Jump Width (Tq)：标称波特率的Sync Jump Width，默认1；</p></li></ol><p>这样计算出来的数据波特率值就是：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images20.jpg" alt="images20" style="zoom:67%;"><ol start="13"><li><p>Interrupts|Callback：CAN FD通信的中断回调函数，本书取名为canfd0_callback，适配于CAN FD的通道0；</p></li><li><p>Interrupts|Channel Interrupt Priority Level：CAN FD通信的中断优先级，默认为Priority 12；</p></li><li><p>Transmit Interrupts|TXMB x：CAN FD发送使用的消息缓存中断使能，本书选择的是使能TXMB 0；</p></li></ol><p>配置好CAN FD的时钟、Pins和Stacks后，在RASC中点击“Generate Project Content”生成工程代码，随后去代码中了解CAN FD的配置及其API。</p><h3 id="_17-2-2-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_17-2-2-中断回调函数" aria-hidden="true">#</a> 17.2.2 中断回调函数</h3><p>在RASC中设置的中断回调函数后，生成代码在hal_data.h中，它只是一个声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">canfd0_callback</span></span>
<span class="token keyword">void</span> <span class="token function">canfd0_callback</span><span class="token punctuation">(</span><span class="token class-name">can_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中断回调函数的形参can_callback_args_t的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_can_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>    channel<span class="token punctuation">;</span>               <span class="token comment">///&lt; Device channel number.</span>
    <span class="token class-name">can_event_t</span> event<span class="token punctuation">;</span>                 <span class="token comment">///&lt; Event code.</span>
    <span class="token class-name">uint32_t</span>    error<span class="token punctuation">;</span>                 <span class="token comment">///&lt; Error code.</span>
    <span class="token keyword">union</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">uint32_t</span> mailbox<span class="token punctuation">;</span>              <span class="token comment">///&lt; Mailbox number of interrupt source.</span>
        <span class="token class-name">uint32_t</span> buffer<span class="token punctuation">;</span>               <span class="token comment">///&lt; Buffer number of interrupt source.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>            <span class="token comment">///&lt; Context provided to user during callback.</span>
    <span class="token class-name">can_frame_t</span>  frame<span class="token punctuation">;</span>                <span class="token comment">///&lt; Received frame data.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能用户更关心的是event成员和frame成员。event帮助用户了解触发中断的原因是什么，frame帮助用户获得接收到的数据帧信息。</p><p>CAN FD支持的触发中断的事件有这些：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_can_event</span>
<span class="token punctuation">{</span>
    CAN_EVENT_ERR_WARNING          <span class="token operator">=</span> <span class="token number">0x0002</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Error Warning event.</span>
    CAN_EVENT_ERR_PASSIVE          <span class="token operator">=</span> <span class="token number">0x0004</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Error Passive event.</span>
    CAN_EVENT_ERR_BUS_OFF          <span class="token operator">=</span> <span class="token number">0x0008</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Bus Off event.</span>
    CAN_EVENT_BUS_RECOVERY         <span class="token operator">=</span> <span class="token number">0x0010</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Bus Off Recovery event.</span>
    CAN_EVENT_MAILBOX_MESSAGE_LOST <span class="token operator">=</span> <span class="token number">0x0020</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Mailbox has been overrun.</span>
    CAN_EVENT_ERR_BUS_LOCK         <span class="token operator">=</span> <span class="token number">0x0080</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Bus lock detected (32 consecutive dominant bits).</span>
    CAN_EVENT_ERR_CHANNEL          <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Channel error has occurred.</span>
    CAN_EVENT_TX_ABORTED           <span class="token operator">=</span> <span class="token number">0x0200</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Transmit abort event.</span>
    CAN_EVENT_RX_COMPLETE          <span class="token operator">=</span> <span class="token number">0x0400</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Receive complete event.</span>
    CAN_EVENT_TX_COMPLETE          <span class="token operator">=</span> <span class="token number">0x0800</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Transmit complete event.</span>
    CAN_EVENT_ERR_GLOBAL           <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Global error has occurred.</span>
    CAN_EVENT_TX_FIFO_EMPTY        <span class="token operator">=</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Transmit FIFO is empty.</span>
    CAN_EVENT_FIFO_MESSAGE_LOST    <span class="token operator">=</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token comment">///&lt; Receive FIFO overrun.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以参考以下代码设计CAN FD通信的中断回调函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">canfd0_callback</span><span class="token punctuation">(</span><span class="token class-name">can_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CAN_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gCANFDTxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> CAN_EVENT_RX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gRxFrame<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_args<span class="token operator">-&gt;</span>frame<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            gCANFDRxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第06、11行：判断触发中断是发送完成事件还是接收完成事件；</li><li>第08行：如果是发送完成，则将标志位置true；</li><li>第13、14行：如果是接收完成，则将接收到的数据copy到自定义的变量中，并且将接收完成标志置true；</li></ul><h3 id="_17-2-3-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_17-2-3-配置信息解读" aria-hidden="true">#</a> 17.2.3 配置信息解读</h3><p>RASC生成的CAN配置信息有3种：时钟配置信息、引脚配置信息、CANFD模块本身的配置信息。</p><ol><li>时钟配置参数</li></ol><p>所有的时钟参数配置都在bsp_clock_cfg.h中定义，包括本章CAN FD模块的时钟，此文件代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* generated configuration header file - do not edit */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BSP_CLOCK_CFG_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CLOCK_CFG_H_</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_XTAL_HZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">24000000</span><span class="token punctuation">)</span> </span><span class="token comment">/* XTAL 24000000Hz */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_HOCO_FREQUENCY</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> </span><span class="token comment">/* HOCO 20MHz */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_PLL_SOURCE</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_SOURCE_CLOCK_HOCO<span class="token punctuation">)</span> </span><span class="token comment">/* PLL Src: HOCO */</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_PLL2_SOURCE</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_SOURCE_CLOCK_HOCO<span class="token punctuation">)</span> </span><span class="token comment">/* PLL2 Src: HOCO */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_PLL2_DIV</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_PLL_DIV_2<span class="token punctuation">)</span> </span><span class="token comment">/* PLL2 Div /2 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_PLL2_MUL</span> <span class="token expression"><span class="token function">BSP_CLOCKS_PLL_MUL</span><span class="token punctuation">(</span><span class="token number">24U</span><span class="token punctuation">,</span><span class="token number">0U</span><span class="token punctuation">)</span> </span><span class="token comment">/* PLL2 Mul x24.0 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_CLOCK_SOURCE</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_SOURCE_CLOCK_PLL<span class="token punctuation">)</span> </span><span class="token comment">/* Clock Src: PLL */</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_CANFDCLK_SOURCE</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_SOURCE_CLOCK_PLL2<span class="token punctuation">)</span> </span><span class="token comment">/* CANFDCLK Src: PLL2 */</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BSP_CFG_CANFDCLK_DIV</span> <span class="token expression"><span class="token punctuation">(</span>BSP_CLOCKS_CANFD_CLOCK_DIV_6<span class="token punctuation">)</span> </span><span class="token comment">/* CANFDCLK Div /6 */</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* BSP_CLOCK_CFG_H_ */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第07行：定义PLL的时钟源为HOCO；</li><li>第09行：定义PLL2的时钟源为HOCO；</li><li>第10~11行：定义PLL2的分频系数为2，倍频系数为24；</li><li>第12行：定义系统时钟源为PLL；</li><li>第14行：定义CAN FD的时钟源是PLL2；</li><li>第16行：定义CAN FD的分频系数为6；</li></ul><ol start="2"><li>引脚配置信息</li></ol><p>CANFD涉及的引脚，它们的配置信息在工程的pin_data.c中生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_01<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_CAN<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_04_PIN_02<span class="token punctuation">,</span>
     <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
               <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_CAN<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>模块配置信息</li></ol><p>CAN FD的模块配置信息在hal_data.c中，它是一个can_cfg_t类型的全局结构体，名为g_canfd0_cfg，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">can_cfg_t</span> g_canfd0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>channel                <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_bit_timing           <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd0_bit_timing_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback             <span class="token operator">=</span> canfd0_callback<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_extend               <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd0_extended_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_context              <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>ipl                    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>VECTOR_NUMBER_CAN0_TX<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>tx_irq             <span class="token operator">=</span> VECTOR_NUMBER_CAN0_TX<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>tx_irq             <span class="token operator">=</span> FSP_INVALID_VECTOR<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>VECTOR_NUMBER_CAN0_CHERR<span class="token punctuation">)</span></span></span>
    <span class="token punctuation">.</span>error_irq             <span class="token operator">=</span> VECTOR_NUMBER_CAN0_CHERR<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>error_irq             <span class="token operator">=</span> FSP_INVALID_VECTOR<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体囊括了CAN FD的通道值、中断回调函数、时间特性参数配置和扩展参数配置，其中时间特性和扩展参数同样在hal_data.c中用结构体can_bit_timing_cfg_t和结构体canfd_extended_cfg_t定义的全局变量表示。</p><p>在hal_data.c中定义了两种时间特性：标称时间特性和数据时间特性，对应于前文的标称波特率和数据波特率，这两个时间特性在代码中是这样表示的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">can_bit_timing_cfg_t</span> g_canfd0_bit_timing_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Actual bitrate: 500000 Hz. Actual sample point: 75 %. */</span>
    <span class="token punctuation">.</span>baud_rate_prescaler <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>time_segment_1 <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>time_segment_2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>synchronization_jump_width <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">BSP_FEATURE_CANFD_FD_SUPPORT</span></span>
<span class="token class-name">can_bit_timing_cfg_t</span> g_canfd0_data_timing_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Actual bitrate: 2000000 Hz. Actual sample point: 75 %. */</span>
    <span class="token punctuation">.</span>baud_rate_prescaler <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>time_segment_1 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>time_segment_2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>synchronization_jump_width <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这段代码中可以看到，在FSP的CAN FD Stack模块中配置的</p><ul><li>l Bitrate|Manual|Nominal|Prescaler (divisor)：标称波特率时钟分频系数，默认1；</li><li>l Bitrate|Manual|Nominal|Time Segment 1 (Tq)：标称波特率的Segment1，默认29；</li><li>l Bitrate|Manual|Nominal|Time Segment 2 (Tq)：标称波特率的Segment2，默认10；</li><li>l Bitrate|Manual|Nominal|Sync Jump Width (Tq)：标称波特率的Sync Jump Width,默认4；</li><li>l Bitrate|Manual|Data|Prescaler (divisor)：数据波特率时钟分频系数，默认1；</li><li>l Bitrate|Manual|Data|Time Segment 1 (Tq)：标称波特率的Segment1，默认5；</li><li>l Bitrate|Manual|Data|Time Segment 2 (Tq)：标称波特率的Segment2，默认2；</li><li>l Bitrate|Manual|Data|Sync Jump Width (Tq)：标称波特率的Sync Jump Width，默认1；</li><li>这些参数并没有实际生成到代码中，而是根据一下参数自动计算了baud_rate_prescaler、time_segment_1和time_segment_2以及synchronization_jump_width的值;</li><li>l Bitrate|Automatic|Nominal Rate (bps)：波特率标称值，默认500000bps；</li><li>l Bitrate|Automatic|FD Data Rate (bps)：数据波特率值，默认2000000bps；</li></ul><p>所以用户要配置波特率，最方便的方法就是去Bitrate|Automati中设置波特率。</p><p>扩展参数中配置的就是CAN FD的数据波特率配置和全局配置，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">canfd_extended_cfg_t</span> g_canfd0_extended_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_afl              <span class="token operator">=</span> p_canfd0_afl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>txmb_txi_enable    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token number">0ULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>error_interrupts   <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">0U</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">BSP_FEATURE_CANFD_FD_SUPPORT</span></span>
    <span class="token punctuation">.</span>p_data_timing      <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd0_data_timing_cfg<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token punctuation">.</span>p_data_timing      <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">.</span>delay_compensation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_global_cfg       <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd_global_cfg<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局配置参数设置的就是CAN FD通信的中断优先级、错误帧格式、接收FIFO等的配置，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">canfd_global_cfg_t</span> g_canfd_global_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>global_interrupts <span class="token operator">=</span> CANFD_CFG_GLOBAL_ERR_SOURCES<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>global_config     <span class="token operator">=</span> <span class="token punctuation">(</span>CANFD_CFG_TX_PRIORITY 
                        <span class="token operator">|</span> CANFD_CFG_DLC_CHECK 
                        <span class="token operator">|</span> <span class="token punctuation">(</span>BSP_CFG_CANFDCLK_SOURCE <span class="token operator">==</span> BSP_CLOCKS_SOURCE_CLOCK_MAIN_OSC <span class="token operator">?</span> R_CANFD_CFDGCFG_DCS_Msk <span class="token operator">:</span> <span class="token number">0U</span><span class="token punctuation">)</span> 
                        <span class="token operator">|</span> CANFD_CFG_FD_OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_mb_config      <span class="token operator">=</span> <span class="token punctuation">(</span>CANFD_CFG_RXMB_NUMBER <span class="token operator">|</span> <span class="token punctuation">(</span>CANFD_CFG_RXMB_SIZE <span class="token operator">&lt;&lt;</span> R_CANFD_CFDRMNB_RMPLS_Pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>global_err_ipl <span class="token operator">=</span> CANFD_CFG_GLOBAL_ERR_IPL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_fifo_ipl    <span class="token operator">=</span> CANFD_CFG_RX_FIFO_IPL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_fifo_config    <span class="token operator">=</span>
    <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>BSP_FEATURE_CANFD_LITE</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

最后，在hal_data<span class="token punctuation">.</span>c中定义了一个<span class="token class-name">can_instance_t</span>类型的全局结构体g_canfd0，它容纳了控制结构体、配置结构体、接口结构体，如下：

\`\`\`c
<span class="token keyword">const</span> <span class="token class-name">can_instance_t</span> g_canfd0 <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>p_ctrl        <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd0_ctrl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_cfg         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd0_cfg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_api         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_canfd_on_canfd
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-2-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_17-2-4-api接口及其用法" aria-hidden="true">#</a> 17.2.4 API接口及其用法</h3><p>CAN FD设备的操作方法函数在r_can_api.h中定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_can_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">can_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> buffer_number<span class="token punctuation">,</span> 
                       <span class="token class-name">can_frame_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> buffer_number<span class="token punctuation">,</span> 
                       <span class="token class-name">can_frame_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> modeTransition<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                                 <span class="token class-name">can_operation_mode_t</span> operation_mode<span class="token punctuation">,</span>
                                 <span class="token class-name">can_test_mode_t</span> test_mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">can_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">can_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">can_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些函数，会在r_canfd.c中实现，它们都被放入一个体can_api_t结构体里：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">can_api_t</span> g_canfd_on_canfd <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open           <span class="token operator">=</span> R_CANFD_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close          <span class="token operator">=</span> R_CANFD_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write          <span class="token operator">=</span> R_CANFD_Write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read           <span class="token operator">=</span> R_CANFD_Read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>modeTransition <span class="token operator">=</span> R_CANFD_ModeTransition<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>infoGet        <span class="token operator">=</span> R_CANFD_InfoGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet    <span class="token operator">=</span> R_CANFD_CallbackSet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就来看下这些操作函数的用法。</p><ol><li>打开CAN FD设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                  <span class="token class-name">can_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数用于初始化CAN FD设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_canfd0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭CAN FD设备</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭CAN FD设备函数就很简单，调用此函数的时候传入参数g_canfd0_ctrl即可。如果关闭设备成功会返回FSP_SUCCESS(0)。</p><ol start="3"><li>CAN FD发送数据帧</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token class-name">uint32_t</span> buffer_number<span class="token punctuation">,</span> 
                    <span class="token class-name">can_frame_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送CAN FD数据帧的write函数，其第二个参数指的是发送的buffer序号，而不是数据个数，取值范围在CANFD_TX_MB_0~CANFD_TX_MB_7，CANFD_TX_MB_32~CANFD_TX_MB_39之间；第三个参数表示数据帧的结构，包括ID、ID类型、数据等，结构体原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_can_frame</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>         id<span class="token punctuation">;</span>                           <span class="token comment">///&lt; CAN ID.</span>
    <span class="token class-name">can_id_mode_t</span>    id_mode<span class="token punctuation">;</span>               <span class="token comment">///&lt; Standard or Extended ID (IDE).</span>
    <span class="token class-name">can_frame_type_t</span> type<span class="token punctuation">;</span>                         <span class="token comment">///&lt; Frame type (RTR).</span>
    <span class="token class-name">uint8_t</span>          data_length_code<span class="token punctuation">;</span>             <span class="token comment">///&lt; CAN Data Length Code (DLC).</span>
    <span class="token class-name">uint32_t</span>         options<span class="token punctuation">;</span>              <span class="token comment">///&lt; Implementation-specific options.</span>
    <span class="token class-name">uint8_t</span>          data<span class="token punctuation">[</span>CAN_DATA_BUFFER_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; CAN data.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_frame_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CAN Id的类型有标准帧和扩展帧，在代码中的宏定义值是：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_can_id_mode</span>
<span class="token punctuation">{</span>
   CAN_ID_MODE_STANDARD<span class="token punctuation">,</span>              <span class="token comment">///&lt; Standard IDs of 11 bits used.</span>
   CAN_ID_MODE_EXTENDED<span class="token punctuation">,</span>              <span class="token comment">///&lt; Extended IDs of 29 bits used.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_id_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>帧类型有数据帧和远程帧之分：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_can_frame_type</span>
<span class="token punctuation">{</span>
    CAN_FRAME_TYPE_DATA<span class="token punctuation">,</span>               <span class="token comment">///&lt; Data frame.</span>
    CAN_FRAME_TYPE_REMOTE<span class="token punctuation">,</span>             <span class="token comment">///&lt; Remote frame.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_frame_type_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据个数则根据当前发送的是传统CAN数据帧还是CAN FD数据帧决定，传统数据帧个数不能超过8，CAN FD数据帧个数据不能超过64。</li><li>CAN数据帧的特殊操作有三种：ESI、BRS和FDF：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_canfd_frame_option</span>
<span class="token punctuation">{</span>
    CANFD_FRAME_OPTION_ERROR <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; Error state set (ESI).</span>
    CANFD_FRAME_OPTION_BRS   <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; Bit Rate Switching (BRS) enabled.</span>
    CANFD_FRAME_OPTION_FD    <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; Flexible Data frame (FDF).</span>
<span class="token punctuation">}</span> <span class="token class-name">canfd_frame_options_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CAN数据帧的数据数组，此数组的大小由宏定义值CAN_DATA_BUFFER_LENGTH确定：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">BSP_FEATURE_CANFD_NUM_CHANNELS</span></span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAN_DATA_BUFFER_LENGTH</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAN_DATA_BUFFER_LENGTH</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以参考以下代码使用write函数发送CAN数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> CANFD_TX_MB_0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>CAN FD读取数据帧</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">uint32_t</span> buffer_number<span class="token punctuation">,</span> 
                   <span class="token class-name">can_frame_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数和发送函数十分类似，第二个参数是读取buffer的序号，取值范围是CANFD_RX_BUFFER_MB_0~CANFD_RX_BUFFER_MB_31和CANFD_RX_BUFFER_FIFO_0、CANFD_RX_BUFFER_FIFO_1；第二个参数同样是数据帧结构体。</p><p>用户可以参考发送数据的方法来使用此函数。</p><ol start="5"><li>CAN FD的通信模式</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> modeTransition<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                             <span class="token class-name">can_operation_mode_t</span> operation_mode<span class="token punctuation">,</span>
                             <span class="token class-name">can_test_mode_t</span> test_mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数用于设置CAN FD的通讯方式，由参数e_can_operation_mode和e_can_test_mode共同决定。</p><p>e_can_operation_mode定义了CAN支持的所有操作模式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_can_operation_mode</span>
<span class="token punctuation">{</span>
    CAN_OPERATION_MODE_NORMAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>              <span class="token comment">///&lt; CAN Normal Operation Mode</span>
    CAN_OPERATION_MODE_RESET<span class="token punctuation">,</span>                   <span class="token comment">///&lt; CAN Reset Operation Mode</span>
    CAN_OPERATION_MODE_HALT<span class="token punctuation">,</span>                    <span class="token comment">///&lt; CAN Halt Operation Mode</span>
    CAN_OPERATION_MODE_SLEEP            <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token comment">///&lt; CAN Sleep Operation Mode</span>
    CAN_OPERATION_MODE_GLOBAL_OPERATION <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token comment">// CANFD Global Operation Mode</span>
    CAN_OPERATION_MODE_GLOBAL_RESET<span class="token punctuation">,</span>            <span class="token comment">// CANFD Global Reset Mode</span>
    CAN_OPERATION_MODE_GLOBAL_HALT<span class="token punctuation">,</span>             <span class="token comment">// CANFD Global Halt Mode</span>
    CAN_OPERATION_MODE_GLOBAL_SLEEP <span class="token operator">=</span> <span class="token number">0x85</span>      <span class="token comment">// CANFD Global Sleep Mode</span>
<span class="token punctuation">}</span> <span class="token class-name">can_operation_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在正常通信中一般选择CAN_OPERATION_MODE_NORMAL模式。 e_can_test_mode定义了CAN支持的所有测试模式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_can_test_mode</span>
<span class="token punctuation">{</span>
    CAN_TEST_MODE_DISABLED          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; CAN Test Mode Disabled.</span>
    CAN_TEST_MODE_LISTEN            <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; CAN Test Listen Mode.</span>
    CAN_TEST_MODE_LOOPBACK_EXTERNAL <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; CAN Test External Loopback Mode.</span>
    CAN_TEST_MODE_LOOPBACK_INTERNAL <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; CAN Test Internal Loopback Mode.</span>
    CAN_TEST_MODE_INTERNAL_BUS      <span class="token operator">=</span> <span class="token number">0x80</span> <span class="token comment">///&lt; CANFD Internal CAN Bus Communication Test Mode.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_test_mode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试阶段可以根据硬件设计选择某种测试模式，在正常的双端CAN通信中不要使用测试模式，选择CAN_TEST_MODE_DISABLED。</p><p>在开始通信前，用户需要在代码中指定CAN的通信模式，可以参考以下代码来设置通信模式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">modeTransition</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                             CAN_OPERATION_MODE_NORMAL<span class="token punctuation">,</span>
                             CAN_TEST_MODE_LOOPBACK_INTERNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>获取CAN FD的配置参数</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">can_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                      <span class="token class-name">can_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以获取到的CAN信息有这些：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_can_info</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> status<span class="token punctuation">;</span>            <span class="token comment">///&lt; Useful information from the CAN status register.</span>
    <span class="token class-name">uint32_t</span> rx_mb_status<span class="token punctuation">;</span>             <span class="token comment">///&lt; RX Message Buffer New Data flags.</span>
    <span class="token class-name">uint32_t</span> rx_fifo_status<span class="token punctuation">;</span>           <span class="token comment">///&lt; RX FIFO Empty flags.</span>
    <span class="token class-name">uint8_t</span>  error_count_transmit<span class="token punctuation">;</span>     <span class="token comment">///&lt; Transmit error count.</span>
    <span class="token class-name">uint8_t</span>  error_count_receive<span class="token punctuation">;</span>      <span class="token comment">///&lt; Receive error count.</span>
    <span class="token class-name">uint32_t</span> error_code<span class="token punctuation">;</span>               <span class="token comment">///&lt; Error code, cleared after reading.</span>
<span class="token punctuation">}</span> <span class="token class-name">can_info_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-3-can-fd回环实验" tabindex="-1"><a class="header-anchor" href="#_17-3-can-fd回环实验" aria-hidden="true">#</a> 17.3 CAN FD回环实验</h2><p>此实验会使用到按键中断、printf功能和滴答定时器，请读者将前文的外部中断实验的驱动文件、drv_uart.c/.h文件和滴答定时器的驱动文件移植到本工程。</p><h3 id="_17-3-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_17-3-1-设计目的" aria-hidden="true">#</a> 17.3.1 设计目的</h3><p>本节实验是利用CAN FD的环回测试模式，体验CAN FD的过滤器配置和数据收发。本实验通过按键控制CAN FD的数据帧发送，按一次发送一次。</p><h3 id="_17-3-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_17-3-2-硬件连接" aria-hidden="true">#</a> 17.3.2 硬件连接</h3><p>本书配套的开发板板载了CAN收发器，因而既可以使用外部环回测试也可以使用内部换回测试。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images21.png" alt="images21" style="zoom:50%;"><h3 id="_17-3-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_17-3-3-驱动程序" aria-hidden="true">#</a> 17.3.3 驱动程序</h3><ol><li>接收过滤器列表</li></ol><p>使用RASC配置CAN FD并生成代码后，接受过滤器列表会在hal_data.c中声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token class-name">canfd_afl_entry_t</span> p_canfd0_afl<span class="token punctuation">[</span>CANFD_CFG_AFL_CH0_RULE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因而需要用户在代码中按照声明的格式定义此接收过滤器数组，例如本书在drv_canfd.c中就定义了此数组：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">canfd_afl_entry_t</span> p_canfd0_afl<span class="token punctuation">[</span>CANFD_CFG_AFL_CH0_RULE_NUM<span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>id <span class="token operator">=</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* Specify the ID, ID type and frame type to accept. */</span>
            <span class="token punctuation">.</span>id         <span class="token operator">=</span> <span class="token number">0x000</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>frame_type <span class="token operator">=</span> CAN_FRAME_TYPE_DATA<span class="token punctuation">,</span>
            <span class="token punctuation">.</span>id_mode    <span class="token operator">=</span> CAN_ID_MODE_STANDARD
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token punctuation">.</span>mask <span class="token operator">=</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* These values mask which ID/mode bits to compare when filtering messages. */</span>
            <span class="token punctuation">.</span>mask_id         <span class="token operator">=</span> <span class="token number">0x000</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>mask_frame_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token punctuation">.</span>mask_id_mode    <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token punctuation">.</span>destination <span class="token operator">=</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* If DLC checking is enabled any messages shorter than the below setting will be rejected. */</span>
            <span class="token punctuation">.</span>minimum_dlc <span class="token operator">=</span> CANFD_MINIMUM_DLC_0<span class="token punctuation">,</span>

            <span class="token comment">/* Optionally specify a Receive Message Buffer (RX MB) to store accepted frames. RX MBs do not have an
             * interrupt or overwrite protection and must be checked with R_CANFD_InfoGet and R_CANFD_Read. */</span>
            <span class="token punctuation">.</span>rx_buffer   <span class="token operator">=</span> CANFD_RX_MB_NONE<span class="token punctuation">,</span>

            <span class="token comment">/* Specify which FIFO(s) to send filtered messages to. Multiple FIFOs can be OR&#39;d together. */</span>
            <span class="token punctuation">.</span>fifo_select_flags <span class="token operator">=</span> CANFD_RX_FIFO_0
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>canfd_afl_entry_t结构体各成员含义见下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images22.jpg" alt="images22"></p><p>以本书的过滤器为例：</p><ul><li>id=0；</li><li>frame_type = CAN_FRAME_TYPE_DATA；</li><li>id_mode = CAN_ID_MODE_STANDARD；</li><li>mask_id=0；</li></ul><p>表示所有的标准ID数据帧都可以接收，不做任何过滤，而如果：</p><ul><li>id=0x40；</li><li>frame_type = CAN_FRAME_TYPE_DATA；</li><li>id_mode = CAN_ID_MODE_STANDARD；</li><li>mask_id=0x7F0；</li></ul><p>那么就表示ID在0x40~0x4F的标准ID数据帧不进行过滤，其它的都过滤不接收。计算方式如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images23.png" alt="images23"></p><ol start="2"><li>断回调函数</li></ol><p>本书的中断回调函数仅对收发完成事件做处理，用户可以根据需求添加对错误事件的处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">canfd0_callback</span><span class="token punctuation">(</span><span class="token class-name">can_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> CAN_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gCANFDTxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> CAN_EVENT_RX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gRxFrame<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_args<span class="token operator">-&gt;</span>frame<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            gCANFDRxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本书没有使用CAN FD的read函数读取数据，而是在中断回调函数中将接收到的数据帧复制给一个静态全局变量gRxFrame。</p><ol start="3"><li>收发完成等待函数</li></ol><p>在通信过程中通常需要知道读写操作何时完成，然后再进行下一步的处理，本书以下代码等待读写完成，并加入了超时机制：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">CANFDDrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> uwTimeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gCANFDTxCplt <span class="token operator">&amp;&amp;</span> uwTimeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        uwTimeout<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bool ret <span class="token operator">=</span> gCANFDTxCplt<span class="token punctuation">;</span>
    gCANFDTxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool <span class="token function">CANFDDrvWaitRxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> uwTimeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gCANFDRxCplt <span class="token operator">&amp;&amp;</span> uwTimeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        uwTimeout<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bool ret <span class="token operator">=</span> gCANFDRxCplt<span class="token punctuation">;</span>
    gCANFDRxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个函数的逻辑比较简单，不再讲解。</p><ol start="4"><li>数据发送函数</li></ol><p>本书通过帧ID的大小来分辨标准帧还是扩展帧，将这一判断封装到发送函数中，然后调用CAN FD的write函数将数据帧发送出去：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>CANFDDrvWrite<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">CANDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>frame<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        
    <span class="token class-name">can_frame_t</span> <span class="token operator">*</span>tFrame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span>frame<span class="token punctuation">;</span>
    tFrame<span class="token operator">-&gt;</span>data_length_code   <span class="token operator">=</span> length<span class="token punctuation">;</span>
    tFrame<span class="token operator">-&gt;</span>type               <span class="token operator">=</span> CAN_FRAME_TYPE_DATA<span class="token punctuation">;</span>
    tFrame<span class="token operator">-&gt;</span>options            <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tFrame<span class="token operator">-&gt;</span>id <span class="token operator">&gt;</span> <span class="token number">0x7FF</span><span class="token punctuation">)</span>
        tFrame<span class="token operator">-&gt;</span>id_mode         <span class="token operator">=</span> CAN_ID_MODE_EXTENDED<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        tFrame<span class="token operator">-&gt;</span>id_mode          <span class="token operator">=</span> CAN_ID_MODE_STANDARD<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> CANFD_TX_MB_0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> false<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">CANFDDrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>数据接收函数</li></ol><p>在介绍中断回调函数的时候已经说明，在中断回调函数中已经把接收到的数据复制到gRxFrame里，因此接收函数的实现就比较简单了——从gRxFrame中复制数据即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>CANFDDrvRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">CANDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>frame<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>true <span class="token operator">==</span> <span class="token function">CANFDDrvWaitRxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span>frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>gRxFrame<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>按键驱动的修改</li></ol><p>为了适配本实验，将按键中断实验的代码进行了修改：</p><ul><li>按键消抖处理不再点灯，而是设置一个按键标志位：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">KeyProcessJitter</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> tick<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tick <span class="token operator">==</span> uwPressTick<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        gKeyStatus <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>        
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要记得将按键消抖处理函数放到滴答定时器的中断服务函数中：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dwTick <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">KeyProcessJitter</span><span class="token punctuation">(</span>dwTick<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> IODrvRead函数可以获取按键IO的电平值了：

\`\`\`c
<span class="token keyword">static</span> IODevState_t <span class="token function">IODrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IODev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    IODevState_t state <span class="token operator">=</span> LowLevel<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        state <span class="token operator">=</span> <span class="token punctuation">(</span>IODevState_t<span class="token punctuation">)</span>gKeyStatus<span class="token punctuation">;</span>
        gKeyStatus <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注册按键IO设备的时候需要将Read函数注册：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> IODev gKeyDev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;UserKey&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> IODrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Write <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> IODrvRead
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_17-3-4-测试程序" aria-hidden="true">#</a> 17.3.4 测试程序</h3><p>对滴答定时器、UART、按键设备和CAN FD设备初始化之后，读取IO按键，发现按键被按下后就发送一个数据帧。程序还会尝试读取数据，如果收到数据就把它打印出来：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint16_t</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">can_frame_t</span> txFrame<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pKeyDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pKeyDev<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        txFrame<span class="token punctuation">.</span>id <span class="token operator">=</span> count<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            txFrame<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">+</span> i <span class="token operator">+</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pCANDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCANDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>txFrame<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> true<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to transmit ID = 0x%.3x frame\\r\\n&quot;</span><span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nSuccess to transmit!\\r\\n\\tID = 0x%.3x frame\\r\\n&quot;</span><span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">can_frame_t</span> rxFrame<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pCANDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pCANDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rxFrame<span class="token punctuation">)</span> <span class="token operator">!=</span> true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nLoopback --- %d\\r\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tSource ID = 0x%.3x \\t Destination ID = 0x%.3x\\r\\n&quot;</span><span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>id<span class="token punctuation">,</span> rxFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tSource Data[%d] = 0x%.2x&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t Destination[%d] = 0x%.2x\\r\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rxFrame<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第07~11行：发送的数据帧每次都设置不同的ID和数据；</li><li>第15行：如果发送失败则不去判断是否接收到数据；</li><li>第23行：如果没有接收到数据则不进行信息打印，从头再来；</li></ul><h3 id="_17-3-5-测试结果" tabindex="-1"><a class="header-anchor" href="#_17-3-5-测试结果" aria-hidden="true">#</a> 17.3.5 测试结果</h3><p>将工程编译后，把得到的二进制可执行文件烧录到处理器中执行可以看到如下的打印信息：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images24.png" alt="images24" style="zoom:75%;"><h2 id="_17-4-can-fd双板通信实验" tabindex="-1"><a class="header-anchor" href="#_17-4-can-fd双板通信实验" aria-hidden="true">#</a> 17.4 CAN FD双板通信实验</h2><p>此实验会使用到按键中断、printf功能和滴答定时器，请读者将前文的外部中断实验的驱动文件、drv_uart.c/.h文件和滴答定时器的驱动文件移植到本工程。</p><p>本节实验使用的CAN FD驱动程序和上一节回环实验的代码基本一致，读者在配置好FSP生成工程后可以将上一节的启动代码整体移植到本工程。</p><h3 id="_17-4-1-设计目的" tabindex="-1"><a class="header-anchor" href="#_17-4-1-设计目的" aria-hidden="true">#</a> 17.4.1 设计目的</h3><p>让用户体验真实的CAN FD双端通信。本实验需要两块支持CAN FD接口的开发板，除了本书配套的一块RA6M5处理器的开发板外，用户还需准备一块有CAN FD接口和控制器的开发板（可以再购买一块本书配套的开发板）。</p><h3 id="_17-4-2-硬件连接" tabindex="-1"><a class="header-anchor" href="#_17-4-2-硬件连接" aria-hidden="true">#</a> 17.4.2 硬件连接</h3><p>本节实验使用两块开发板连接CAN FD控制器的CAN_H和CAN_L，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images25.png" alt="images25" style="zoom:67%;"><h3 id="_17-4-3-驱动程序" tabindex="-1"><a class="header-anchor" href="#_17-4-3-驱动程序" aria-hidden="true">#</a> 17.4.3 驱动程序</h3><p>本节实验的驱动程序大体和上一小节的实验一致，差别仅在于初始化CAN FD的时候不再是测试模式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">CANFDDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">CANDev</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_canfd0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_canfd0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">modeTransition</span><span class="token punctuation">(</span>g_canfd0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span>
                                         CAN_OPERATION_MODE_NORMAL<span class="token punctuation">,</span>
                                         CAN_TEST_MODE_DISABLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> false<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第15~17行：设置的CAN FD通信模式，不使能测试模式</li></ul><h3 id="_17-4-4测试程序" tabindex="-1"><a class="header-anchor" href="#_17-4-4测试程序" aria-hidden="true">#</a> 17.4.4测试程序</h3><p>测试程序和上一小节的基本也一样，只是去掉了数据的比较，只是把接收到的数据打印出来：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint16_t</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pKeyDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pKeyDev<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">can_frame_t</span> txFrame<span class="token punctuation">;</span>
        txFrame<span class="token punctuation">.</span>id <span class="token operator">=</span> count<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            txFrame<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">+</span> i <span class="token operator">+</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pCANDev<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCANDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>txFrame<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> true<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nFailed to transmit!\\r\\n\\tID = 0x%.3x frame\\r\\n&quot;</span><span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nSuccess to transmit!\\r\\n\\tID = 0x%.3x frame\\r\\n&quot;</span><span class="token punctuation">,</span> txFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token class-name">can_frame_t</span> rxFrame<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pCANDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pCANDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">can_frame_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rxFrame<span class="token punctuation">)</span> <span class="token operator">!=</span> true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nSuccess to Receive!\\r\\n\\tID = 0x%.3x\\r\\n&quot;</span><span class="token punctuation">,</span> rxFrame<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tReceive[%d] = 0x%.2x\\r\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> rxFrame<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-4-5测试结果" tabindex="-1"><a class="header-anchor" href="#_17-4-5测试结果" aria-hidden="true">#</a> 17.4.5测试结果</h3><p>本实验需要使用2个RA6M5开发板，连接它们的CAN接口后，两个板子烧入同样的程序。然后按下按键以给对方发送数据：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-17/images26.png" alt="images26"></p>`,237),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","chapter17.html.vue"]]);export{r as default};
