import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const e={},t=p(`<h1 id="第30章-irda红外遥控实验" tabindex="-1"><a class="header-anchor" href="#第30章-irda红外遥控实验" aria-hidden="true">#</a> 第30章 IRDA红外遥控实验</h1><p>本章目标</p><ul><li>学会使用红外遥控IRDA的通信协议；</li><li>了解环形缓冲区的概念以及掌握基于环形缓冲区的程序设计；</li><li>学会使用瑞萨RA6M5的GPT输入捕获功能；</li></ul><h2 id="_30-1-irda红外遥控协议简介" tabindex="-1"><a class="header-anchor" href="#_30-1-irda红外遥控协议简介" aria-hidden="true">#</a> 30.1 IRDA红外遥控协议简介</h2><p>NEC协议是众多红外遥控协议的其中一种,除NEC外,还有RC5、RC6等协议。市面上买到的非学习型万能电视遥控器大多集成一种或多种编码，一般都支持NEC协议。</p><p>NEC编码的一帧（通常按一下遥控器按钮所发送的数据）由引导码、地址码及数据码组成，如下图所示，把地址码及数据码取反的作用是验证数据的正确性。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image1.png" alt=""></p><p>当一直按住一个按钮的时候，会隔110ms左右发一次连续码，连续码后面不带任何数据。NEC协议的信号定义如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image2.png" alt=""></p><p>引导码由一个9ms的低脉冲加上一个4.5ms的高脉冲组成，它用来通知接收方“我要开始传输数据了”。</p><p>数据1和0，开始都是0.56ms的低脉冲，对于数据1，后面的高脉冲比较长；对于数据0，后面的高脉冲比较短。</p><p>NEC协议里有很多时间，这些时间有一个有趣的现象，把所有时间里面最小的0.56ms看作基本脉冲宽度，假设用t表示，那么其它时长都是t的倍数。</p><p>NEC协议中，信号的最小时间单位是0.56ms，这个时间对人来说是很短的，但对于嵌入式系统它是很长的，足够做很多事情了。我们并不知道用户什么时候按下遥控器，使用轮询的方式特别耗资源，因此使用中断来处理。</p><h2 id="_30-2-模块配置" tabindex="-1"><a class="header-anchor" href="#_30-2-模块配置" aria-hidden="true">#</a> 30.2 模块配置</h2><h3 id="_30-2-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_30-2-1-硬件连接" aria-hidden="true">#</a> 30.2.1 硬件连接</h3><p>本次实验使用的是板载IRDA模块，其原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image3.png" alt=""></p><p>使用的引脚是P404，属于定时器GPT3的输入输出控制引脚。</p><h3 id="_30-2-2-gpt模块配置" tabindex="-1"><a class="header-anchor" href="#_30-2-2-gpt模块配置" aria-hidden="true">#</a> 30.2.2 GPT模块配置</h3><p>在RASC中设置引脚和添加Stack模块，本小节就仅展示配置结果。</p><ol><li>配置Pins</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image4.png" alt=""></p><ol start="2"><li>配置GPT Stack</li></ol><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image5.png" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image6.png" alt=""></p><h2 id="_30-3-设备对象封装" tabindex="-1"><a class="header-anchor" href="#_30-3-设备对象封装" aria-hidden="true">#</a> 30.3 设备对象封装</h2><p>在实际开发过程中，会涉及很多不同的设备。本实验抛砖引玉，对于串口、定时器，都基于环形缓冲区来实现它们的操作。</p><h3 id="_30-3-1-串口设备" tabindex="-1"><a class="header-anchor" href="#_30-3-1-串口设备" aria-hidden="true">#</a> 30.3.1 串口设备</h3><ol><li>对象封装和管理</li></ol><p>前面的章节里，使用串口时比较简单直接。本实验里，针对串口设备的特点，抽象出一个结构体（在dev_uart.h里）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">UartDev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>UartDev<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>底层的程序里，对于每一个串口设备，都要实现一个UartDev结构体。</p><p>假设底层drv_uart.c里实现了一个UartDev结构体，要把它插入一个链表管理起来，在dev_uart.c里实现了如下链表插入函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>gHeadUartDev<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">UartDeviceInsert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gHeadUartDev<span class="token punctuation">)</span>
        gHeadUartDev <span class="token operator">=</span> ptdev<span class="token punctuation">;</span>
    Else
    <span class="token punctuation">{</span>
        ptdev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> gHeadUartDev<span class="token punctuation">;</span>
        gHeadUartDev <span class="token operator">=</span> ptdev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实现串口设备</li></ol><p>在drv_uart.c中，构造一个UartDev结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> gLogDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Log&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> UARTDrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> UARTDrvRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Write <span class="token operator">=</span> UARTDrvWrite<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后提供一个UartDevicesCreate函数，调用“UartDeviceInsert(&amp;gLogDevice)”把这个设备插入链表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">UartDevicesCreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gLogDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gLogDevice<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gLogDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>注册串口设备</li></ol><p>底层的drv_uart.c提供了UartDevicesCreate函数来注册它实现的UartDev，谁来调用UartDevicesCreate？</p><p>假设还有另一个底层的drv_uart2.c也提供了Uart2DevicesCreate函数来注册它实现的UartDev，谁来调用Uart2DevicesCreate？</p><p>我们需要在设备层实现一个函数：UartDevicesRegister，用来调用底层的接口函数，管理底层实现的所有UartDev。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UartDeviceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用UartDevicesRegister后，在链表里就记录有底层实现的各个UartDev了。</p><ol start="4"><li>查找串口设备</li></ol><p>如何使用串口设备？需要在链表里根据名字找到UartDev，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span><span class="token function">UartDeviceFind</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev <span class="token operator">=</span> gHeadUartDev<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ptdev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ptdev<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ptdev <span class="token operator">=</span> ptdev<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>打印整个串口设备列表</li></ol><p>链表打印也很简单，从表头开始遍历、打印：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">UartDeviceList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">UartDev</span> <span class="token operator">*</span>ptdev <span class="token operator">=</span> gHeadUartDev<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\nUart Device List:\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ptdev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\t%s\\r\\n&quot;</span><span class="token punctuation">,</span> ptdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ptdev <span class="token operator">=</span> ptdev<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-3-2-定时器设备" tabindex="-1"><a class="header-anchor" href="#_30-3-2-定时器设备" aria-hidden="true">#</a> 30.3.2 定时器设备</h3><ol><li>对象封装</li></ol><p>根据定时器的特点抽象出一个结构体，里面有名称、通道等属性，还有初始化、启停、读取等操作方法。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> status<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>TimerDevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实现定时器设备</li></ol><p>本章要使用GPT3的输入捕获功能，因而在drv_gpt.c中实现了这个定时器：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> gGPTDevice <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;GPT3&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> GPTDrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Start <span class="token operator">=</span> GPTDrvStart<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Stop <span class="token operator">=</span> GPTDrvStop<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> GPTDrvRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">GPTTimerDevicesCreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">TimerDeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gGPTDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>管理定时器设备</li></ol><p>对于瑞萨的RA6M5处理器而言，定时器分为3大类：</p><ol><li>滴答定时器</li><li>GPT</li><li>看门狗定时器</li></ol><p>根据config.h中的宏开关来决定是否注册这些设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DRV_USE_SYSTICK</span></span>
    <span class="token function">SystickTimerDevicesCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DRV_USE_GPT</span></span>
    <span class="token function">GPTTimerDevicesCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DRV_USE_WDT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">DRV_USE_IWDT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    
    <span class="token function">TimerDeviceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_30-4-驱动程序" tabindex="-1"><a class="header-anchor" href="#_30-4-驱动程序" aria-hidden="true">#</a> 30.4 驱动程序</h2><h3 id="_30-4-1-初始化定时器" tabindex="-1"><a class="header-anchor" href="#_30-4-1-初始化定时器" aria-hidden="true">#</a> 30.4.1 初始化定时器</h3><p>本次实验会使用定时器：红外遥控器的输入引脚，触发定时器产生中断，在中断回调函数中记录时间。所以需要使能ECL模块来连接GPIO和GPT3，并且使能GPT3的触发功能。</p><p>另外，接收到的红外遥控信号是一系列的波形，读取到完整的波形后，才能解析出数据。所以需要为GPT3创建一个环形缓冲区，用来保存一系列的时间值。</p><p>初始化代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">RingBuffer</span> <span class="token operator">*</span>gGPT3Buffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ptdev<span class="token punctuation">)</span> <span class="token keyword">return</span> EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 打开GPT设备完成初始化 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer3<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_timer3<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_timer3<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 使能GPT的ELC功能 */</span>
            err <span class="token operator">=</span> g_timer3<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_timer3<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 打开ELC设备完成初始化 */</span>
            err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_elc<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 使能ELC的连接功能 */</span>
            err <span class="token operator">=</span> g_elc<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">enable</span><span class="token punctuation">(</span>g_elc<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* 给GPT3申请一个缓冲区存储采样捕获数据 */</span>
            gGPT3Buffer <span class="token operator">=</span> <span class="token function">RingBufferNew</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第24行分配的缓冲区，只在这个驱动文件用到，用户并不关心GPT3的内部实现，所以gGPT3Buffer被设置为static类型，不要对外暴露它的存在。</p><h3 id="_30-4-2-定时器开启" tabindex="-1"><a class="header-anchor" href="#_30-4-2-定时器开启" aria-hidden="true">#</a> 30.4.2 定时器开启</h3><p>调用GPT的start函数开启即可：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvStart</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ptdev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 开启GPT的计数 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer3<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>g_timer3<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-4-3-定时器关闭" tabindex="-1"><a class="header-anchor" href="#_30-4-3-定时器关闭" aria-hidden="true">#</a> 30.4.3 定时器关闭</h3><p>关闭定时器停止计数，顺便讲计数器清零、清除环形缓冲区：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvStop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>ptdev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token comment">/* 停止GPT的计数 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_timer3<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span>g_timer3<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            err <span class="token operator">=</span> g_timer3<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span>g_timer3<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            gOverflowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> gGPT3Buffer<span class="token punctuation">)</span>
                gGPT3Buffer<span class="token operator">-&gt;</span><span class="token function">Clear</span><span class="token punctuation">(</span>gGPT3Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-4-4-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_30-4-4-中断回调函数" aria-hidden="true">#</a> 30.4.4 中断回调函数</h3><p>在定时器的回调函数里，有一个全局变量：gOverflowCount，它每隔10us累加一次。当发生GPIO捕获事件时，可以把gOverflowCount当做时间存入环形缓冲区。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">timer3_callback</span><span class="token punctuation">(</span><span class="token class-name">timer_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> TIMER_EVENT_CYCLE_END<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gOverflowCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> TIMER_EVENT_CAPTURE_A<span class="token operator">:</span>
        <span class="token keyword">case</span> TIMER_EVENT_CAPTURE_B<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">uint32_t</span>  lCaptureTime <span class="token operator">=</span> gOverflowCount<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> gGPT3Buffer<span class="token punctuation">)</span>
                gGPT3Buffer<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>gGPT3Buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>lCaptureTime<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-4-5-读取定时器的采样数据" tabindex="-1"><a class="header-anchor" href="#_30-4-5-读取定时器的采样数据" aria-hidden="true">#</a> 30.4.5 读取定时器的采样数据</h3><p>定时器的回调函数里，把信号的触发时间存入到唤醒缓冲区。要解析数据时，需要从环形缓冲区中读取数据。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GPTDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TimerDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buf<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> gGPT3Buffer<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret <span class="token operator">=</span> gGPT3Buffer<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>gGPT3Buffer<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> length<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_30-5-红外模块驱动" tabindex="-1"><a class="header-anchor" href="#_30-5-红外模块驱动" aria-hidden="true">#</a> 30.5 红外模块驱动</h2><h3 id="_30-5-1-遥控器键值" tabindex="-1"><a class="header-anchor" href="#_30-5-1-遥控器键值" aria-hidden="true">#</a> 30.5.1 遥控器键值</h3><p>红外遥控器上的所有按键的十六进制键值如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyCode<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便理解，针对这些键值定义了一个字符串指针数组：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>KeyName<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Open&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Menu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Return&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Back&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Suspend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Forward&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cancle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_30-5-2-红外设备对象封装" tabindex="-1"><a class="header-anchor" href="#_30-5-2-红外设备对象封装" aria-hidden="true">#</a> 30.5.2 红外设备对象封装</h3><p>对于红外模块而言，最重要的就是获取键值，也就是读取函数；另外也要对红外模块进行初始化，抽象出一个结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">IRDADev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key_code<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>key_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>IRDADevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在dev_irda.c中构造IRDADev，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> gIRDADev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name  <span class="token operator">=</span> <span class="token string">&quot;nec&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> IRDADevInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> IRDADevRead
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> <span class="token operator">*</span><span class="token function">IRDADeviceGet</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gIRDADev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-5-3-数据解码" tabindex="-1"><a class="header-anchor" href="#_30-5-3-数据解码" aria-hidden="true">#</a> 30.5.3 数据解码</h3><p>根据NEC协议，数据的解码总体分为3步：</p><ol><li>查找引导码字段；</li><li>查找连发码/非连发码字段；</li><li>数据解析；</li></ol><p>引导码是两个采样捕获数据的时间差在9ms左右，连发码的时间差是2.25ms左右，非连发码的在4.5ms左右，误差取为500us。</p><p>当收到一个引导码后，后续会传来32个位数据（表示地址和数据），那么定时器就需要采样64次，根据时间差分辨该位是1还是0。</p><p>综上所述，IRDA的解码程序如下设计：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">IRDADevRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key_code<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>key_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pTimerDev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token class-name">uint16_t</span> temp_buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> pQ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> tick<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> duty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ptdev<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pTimerDev<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pTimerDev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>tick<span class="token punctuation">[</span>pQ<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pQ<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pQ<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            duty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> tick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
            tick<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tick<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            pQ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>   
                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>duty<span class="token operator">&gt;=</span><span class="token number">8500</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>duty<span class="token operator">&lt;=</span><span class="token number">9500</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment">// 引导码</span>
                <span class="token punctuation">{</span>
                    step<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>duty<span class="token operator">&gt;=</span><span class="token number">4000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>duty<span class="token operator">&lt;=</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment">// 非连发码</span>
                <span class="token punctuation">{</span>
                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    step<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>duty<span class="token operator">&gt;=</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>duty<span class="token operator">&lt;=</span><span class="token number">2500</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token comment">// 连发码</span>
                <span class="token punctuation">{</span>
                    step <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>                
                temp_buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> duty<span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">64</span><span class="token punctuation">)</span>   step<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">64</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">450</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">650</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> 
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">450</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">650</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment">// 逻辑0</span>
                        <span class="token punctuation">{</span>
                        <span class="token punctuation">}</span> 
                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>temp_buff<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// 逻辑1</span>
                        <span class="token punctuation">{</span>
                            value <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        cnt<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                step<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token punctuation">{</span>
                step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                pQ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">uint8_t</span> sys_code <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>KeyCode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sys_code<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token operator">*</span>key_code <span class="token operator">=</span> sys_code<span class="token punctuation">;</span>
                        <span class="token operator">*</span>key_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>KeyName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> EIO<span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功解码后，返回按键码、按键名字。</p><h2 id="_30-6-测试程序" tabindex="-1"><a class="header-anchor" href="#_30-6-测试程序" aria-hidden="true">#</a> 30.6 测试程序</h2><p>测试程序放在Applications文件夹中，IRDA的测试源文件为app_irda.c，在里面实现了一个设备测试函数，将所有用到的设备进行注册，初始化IRDA设备，并且读取键值打印出来，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">IRDAAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">struct</span> <span class="token class-name">IRDADev</span> <span class="token operator">*</span>pIRDA <span class="token operator">=</span> <span class="token function">IRDADeviceGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pIRDA<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get IRDA device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pIRDA<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pIRDA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">==</span> pIRDA<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pIRDA<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\r\\n&quot;</span><span class="token punctuation">,</span> pIRDA<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30-7-测试结果" tabindex="-1"><a class="header-anchor" href="#_30-7-测试结果" aria-hidden="true">#</a> 30.7 测试结果</h3><p>在hal_entry()函数中调用测试函数IRDAAppTest，将编译出来的二进制可执行文件烧录到板子上运行，打开串口助手，按下遥控器按键可以看到类似下面的信息：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-30/image7.png" alt=""></p>`,107),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","chapter30.html.vue"]]);export{r as default};
