import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第13章-common-spi" tabindex="-1"><a class="header-anchor" href="#第13章-common-spi" aria-hidden="true">#</a> 第13章 Common SPI</h1><p>本章目标</p><ul><li>使用RASC快速配置Common SPI模块</li><li>学会使用Common SPI的API进行数据收发</li></ul><h2 id="_13-1-common-spi模块的使用" tabindex="-1"><a class="header-anchor" href="#_13-1-common-spi模块的使用" aria-hidden="true">#</a> 13.1 Common SPI模块的使用</h2><p>RA芯片的SPI分为Simple SPI和Common SPI。Simple SPI就是本书《第8章 SCI SPI》所讲的SCI模块的SPI模式，是使用串行总线来模拟SPI协议，而本章所讲的是芯片内部实际存在的一个硬件SPI控制器模块。</p><p>本章将会从Common SPI在RASC中的配置开始讲解，最后编写程序操作OLED（它的驱动芯片SSD1306），重点在于学习使用Common SPI的API。</p><h3 id="_13-1-1-配置spi模块" tabindex="-1"><a class="header-anchor" href="#_13-1-1-配置spi模块" aria-hidden="true">#</a> 13.1.1 配置SPI模块</h3><p>本章实验驱动的OLED模块非板载模块，而是一个外接模块，因而选择的Common SPI通道可以任选一路。本书选用的是SPI0，使用的GPIO引脚如下：</p><table><thead><tr><th>序号</th><th>模块引脚</th><th>芯片SPI0引脚</th></tr></thead><tbody><tr><td>1</td><td>CS</td><td>P205</td></tr><tr><td>2</td><td>SCK</td><td>P204</td></tr><tr><td>3</td><td>MISO</td><td>P202</td></tr><tr><td>4</td><td>MOSI</td><td>P203</td></tr><tr><td>5</td><td>GPIO</td><td>P206</td></tr></tbody></table><p>其中CS是SPI的片选信号引脚，GPIO则是OLED灯驱动芯片SSD1306在4线SPI通信下切换数据和命令的控制信号引脚（即决定SPI总线上传输的数据，是控制SSD1306的指令还是写入SSD1306显存的数据）。</p><p>配置引脚CS和GPIO为普通输出功能，参考前文《5.3 LED实验》配置GPIO。要在RASC中配置Common SPI，首先在RASC的“Pin Configuration”中的“Peripherals”里展开“Connectivity:SPI”，选中里面的SPI0，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image1.png" alt=""></p><p>在第5步配置SPI0时，对于“Pin Group Selection”，有4组可以选：Mixed/A/B/C_Only，如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image2.png" style="zoom:150%;"><p>默认是“A_only”，不同的组别支持的引脚是不同的，此处根据硬件选择的引脚决定，本章使用的是默认引脚A组的P202/P203/P204。</p><p>选好IO的组别后，将“Operation Mode”从“Disabled”改为“Enabled”。操作模式里的另一个选项“Custom”的作用是：Common SPI下的所有引脚都可以由用户自己选择；而选择“Enabled”时对应的时钟线和数据线时固定的引脚；片选引脚可以由用户自己选择。本书使用Enabled默认的数据线和时钟线，且不会使用硬件片选，而使用软件控制IO来控制片选信号。</p><p>所以Common SPI的SPI0的模式和引脚配置结果如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image3.png" alt=""></p><p>配置好SPI0的模式和引脚后，就要去RASC的“Stacks”处增加SPI0的Stack模块。在“Stacks”配置界面点击“New Stack”，选择其中的“Connectivity”，再选择里面的“SPI(r_spi)”，此处一定要注意不是选择“SPI(r_sci_spi)”。如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image4.png" alt=""></p><p>当新建好一个SPI Stack后，需要去它的“属性”中配置详细的参数。本书根据SPI协议，将SPI Stack的属性分成了8个较为重要的可配置参数，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image5.png" alt=""></p><p>① SPI模块的名称和使用通道：建议名称和通道匹配，例如本章使用的是SPI0，那么通道channel就是0，而名称则对应的是g_spi0；以后使用FSP的API操作SPI0时就可以g_spi0.papi-&gt;xxxx()来使用SPI0模块； ② 中断优先级设置：此处设置收发完成的中断优先级和错误中断优先级，需要综合考虑工程中其它外设的中断优先级设置，达到更好的系统控制效果； ③ SPI的操作模式：Master或Slave，这里选择Master； ④ SPI的时钟特性：设置SPI空闲时时钟线呈现什么电平、传输过程中在时钟的哪个边沿采样数据； ⑤ 数据位格式：可以选择高位在前或低位在前，本书使用的设备均为高位在前的模式； ⑥ 中断回调函数：建议函数名称和通道匹配； ⑦ SPI的操作模式：全双工/半双工，时钟同步或异步等； ⑧ 通信速率：本书使用的处理器在最大主频200MHz下，SPI的通信速率最大允许50MHz，通信速率需要考虑从机支持的最大通信速率来设置。</p><h3 id="_13-1-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_13-1-2-配置信息解读" aria-hidden="true">#</a> 13.1.2 配置信息解读</h3><p>使用RASC配置Common SPI后，生成了两类配置信息：Common SPI对应的引脚配置信息、Common SPI本身的配置信息。以本章的实验“1301_spi_oled”为例。</p><ol><li>引脚配置信息</li></ol><p>该信息会在1301_spi_oled\\ra_gen\\pin_data.c文件里生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
	<span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_02_PIN_02<span class="token punctuation">,</span> <span class="token comment">/* MISO */</span>
	  <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN
		        <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SPI<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_02_PIN_03<span class="token punctuation">,</span> <span class="token comment">/* MOSI */</span>
	  <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN
		        <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SPI<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_02_PIN_04<span class="token punctuation">,</span> <span class="token comment">/* SCK */</span>
	  <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN
		        <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SPI<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_02_PIN_05<span class="token punctuation">,</span> <span class="token comment">/* CS */</span>
	  <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_DRIVE_HIGH
		  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_DIRECTION_OUTPUT 
		  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_OUTPUT_HIGH<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_02_PIN_06<span class="token punctuation">,</span> <span class="token comment">/* GPIO */</span>
	  <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_DRIVE_MID
		  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_DIRECTION_OUTPUT 
		  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PORT_OUTPUT_HIGH<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第04~12行：SPI0的GPIO配置为外设复用模式；</li><li>第13~16行：SPI0的片选CS引脚配置为输出模式，默认输出高电平；</li><li>第17~20行：外接OLED模块的数据/命令切换引脚，配置为输出模式，默认输出高电平；</li></ul><ol start="2"><li>SPI配置信息</li></ol><p>SPI模块信息会在1301_spi_oled\\ra_gen\\hal_data.c文件里生成。在RASC里配置的SPI通道、时钟特性和中断回调函数函数等，都会在hal_data.c生成一个spi_cfg_t结构体，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** SPI configuration for SPI HAL driver */</span>
<span class="token keyword">const</span> <span class="token class-name">spi_cfg_t</span> g_spi0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span> <span class="token punctuation">.</span>channel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
  <span class="token punctuation">.</span>operating_mode <span class="token operator">=</span> SPI_MODE_MASTER<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>clk_phase <span class="token operator">=</span> SPI_CLK_PHASE_EDGE_ODD<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>clk_polarity <span class="token operator">=</span> SPI_CLK_POLARITY_LOW<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mode_fault <span class="token operator">=</span> SPI_MODE_FAULT_ERROR_DISABLE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>bit_order <span class="token operator">=</span> SPI_BIT_ORDER_MSB_FIRST<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>p_transfer_tx <span class="token operator">=</span> g_spi0_P_TRANSFER_TX<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>p_transfer_rx <span class="token operator">=</span> g_spi0_P_TRANSFER_RX<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>p_callback <span class="token operator">=</span> spi0_callback<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>p_context <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>p_extend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>g_spi0_ext_cfg<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第05行：操作模式为主机模式；</li><li>第06~07行：时钟特性是在第1个边沿触发数据采样，空闲时时钟线为低电平；</li><li>第10~11行：绑定spi0的收发函数；</li><li>第12行：注册中断回调函数；</li><li>第14行：配置扩展参数；</li></ul><p>扩展参数中的值来自SPI0的配置参数，它对应SPI0的某些寄存器的值。例如通信速率是50MHz时，那么扩展参数中寄存器SPBR和BRDV的值将由RASC计算出来。SPI0的扩展配置代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** SPI extended configuration for SPI HAL driver */</span>
<span class="token keyword">const</span> <span class="token class-name">spi_extended_cfg_t</span> g_spi0_ext_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span> <span class="token punctuation">.</span>spi_clksyn <span class="token operator">=</span> SPI_SSL_MODE_CLK_SYN<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>spi_comm <span class="token operator">=</span> SPI_COMMUNICATION_FULL_DUPLEX<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ssl_polarity <span class="token operator">=</span> SPI_SSLP_LOW<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ssl_select <span class="token operator">=</span> SPI_SSL_SELECT_SSL0<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mosi_idle <span class="token operator">=</span> SPI_MOSI_IDLE_VALUE_FIXING_DISABLE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>parity <span class="token operator">=</span> SPI_PARITY_MODE_DISABLE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>byte_swap <span class="token operator">=</span> SPI_BYTE_SWAP_DISABLE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>spck_div <span class="token operator">=</span>
  <span class="token punctuation">{</span>
  <span class="token comment">/* Actual calculated bitrate: 50000000. */</span><span class="token punctuation">.</span>spbr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>brdv <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>spck_delay <span class="token operator">=</span> SPI_DELAY_COUNT_1<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ssl_negation_delay <span class="token operator">=</span> SPI_DELAY_COUNT_1<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>next_access_delay <span class="token operator">=</span> SPI_DELAY_COUNT_1 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体有助于开发者了解SPI的通信细节，比如每个时钟采样或发送数据时的时延变化等。对于深度开发SPI外设的用户会比较有用。</p><h3 id="_13-1-3-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_13-1-3-中断回调函数" aria-hidden="true">#</a> 13.1.3 中断回调函数</h3><p>中断回调函数的原型已经在hal_data.h中进行了声明，需要用户在自己的程序中实现，其原型代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">spi0_callback</span></span>
<span class="token keyword">void</span> <span class="token function">spi0_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其参数类型是spi_callback_args_t结构体指针，此结构体会表明触发中断的是哪一个SPI通道，触发的事件是什么，该结构体的详细代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Common callback parameter definition */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_callback_args</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>     channel<span class="token punctuation">;</span>              <span class="token comment">///&lt; Device channel number</span>
    <span class="token class-name">spi_event_t</span>  event<span class="token punctuation">;</span>                <span class="token comment">///&lt; Event code</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>            <span class="token comment">///&lt; Context provided to user during callback</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第04行：表明SPI通道；</li><li>第05行：表明触发事件类型；</li></ul><p>触发事件类型是一个枚举类型结构体，包括但不限于发送完成事件、发送中止等，枚举代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** SPI events */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_spi_event</span>
<span class="token punctuation">{</span>
    SPI_EVENT_TRANSFER_COMPLETE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token comment">///&lt; The data transfer was completed</span>
    SPI_EVENT_TRANSFER_ABORTED<span class="token punctuation">,</span>        <span class="token comment">///&lt; The data transfer was aborted</span>
    SPI_EVENT_ERR_MODE_FAULT<span class="token punctuation">,</span>          <span class="token comment">///&lt; Mode fault error</span>
    SPI_EVENT_ERR_READ_OVERFLOW<span class="token punctuation">,</span>       <span class="token comment">///&lt; Read overflow error</span>
    SPI_EVENT_ERR_PARITY<span class="token punctuation">,</span>              <span class="token comment">///&lt; Parity error</span>
    SPI_EVENT_ERR_OVERRUN<span class="token punctuation">,</span>             <span class="token comment">///&lt; Overrun error</span>
    SPI_EVENT_ERR_FRAMING<span class="token punctuation">,</span>             <span class="token comment">///&lt; Framing error</span>
    SPI_EVENT_ERR_MODE_UNDERRUN        <span class="token comment">///&lt; Underrun error</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如本章的实验就是在中断回调函数中，根据通道值和触发事件来判断SPI传输是否完成。如果传输完成，则将一个标志位设置为true。参考代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">spi0_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>channel <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event <span class="token operator">==</span> SPI_EVENT_TRANSFER_COMPLETE<span class="token punctuation">)</span>
            gSPITxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> bool <span class="token function">SPIWaitTxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wTimeout <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gSPITxCplt <span class="token operator">&amp;&amp;</span> wTimeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wTimeout<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gSPITxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>gSPITxCplt<span class="token operator">==</span>false <span class="token operator">&amp;&amp;</span> wTimeout<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03~07行：根据通道和触发事件的值来设置通讯标志位；</li><li>第10~22行：根据通讯标志为封装一个通讯超时等待函数；</li></ul><h3 id="_13-1-4-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_13-1-4-api接口及其用法" aria-hidden="true">#</a> 13.1.4 API接口及其用法</h3><p>在路径1301_spi_oled/ra/fsp/inc/api/r_spi_api.h中定义了SPI模块的接口，它定义了一个结构体类型spi_api_t，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** Shared Interface definition for SPI */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                       <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span>
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                        <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> writeRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                            <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                            <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                            <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体的C文件中，需要定义一个spi_api_t结构体变量，比如在r_spi.c里定义了如下结构体变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* SPI implementation of SPI interface. */</span>
<span class="token keyword">const</span> <span class="token class-name">spi_api_t</span> g_spi_on_spi <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open        <span class="token operator">=</span> R_SPI_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read        <span class="token operator">=</span> R_SPI_Read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write       <span class="token operator">=</span> R_SPI_Write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>writeRead   <span class="token operator">=</span> R_SPI_WriteRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close       <span class="token operator">=</span> R_SPI_Close<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>callbackSet <span class="token operator">=</span> R_SPI_CallbackSet
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用SPI的控制接口，可以调用结构体g_spi_on_spi里的各个函数指针，也可以直接调用r_spi.c里实现的各个函数。</p><ol><li>打开SPI设备</li></ol><p>打开SPI设备的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它有两个参数：</p><ul><li>spi_ctrl_t*：一个void类型的指针类型，指向SPI的控制参数结构体spi_instance_ctrl_t，该结构体会在hal_data.h中定义一个全局变量g_spi0_ctrl，结构体原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>          open<span class="token punctuation">;</span>            <span class="token comment">///&lt; Indicates whether the open() API has been successfully called.</span>
    <span class="token class-name">spi_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>           <span class="token comment">///&lt; Pointer to instance configuration</span>
    R_SPI0_Type     <span class="token operator">*</span> p_regs<span class="token punctuation">;</span>          <span class="token comment">///&lt; Base register for this channel</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span>      <span class="token operator">*</span> p_tx_data<span class="token punctuation">;</span>       <span class="token comment">///&lt; Buffer to transmit</span>
    <span class="token keyword">void</span>            <span class="token operator">*</span> p_rx_data<span class="token punctuation">;</span>       <span class="token comment">///&lt; Buffer to receive</span>
    <span class="token class-name">uint32_t</span>          tx_count<span class="token punctuation">;</span>        <span class="token comment">///&lt; Number of Data Frames to transfer (8-bit, 16-bit, 32-bit)</span>
    <span class="token class-name">uint32_t</span>          rx_count<span class="token punctuation">;</span>        <span class="token comment">///&lt; Number of Data Frames to transfer (8-bit, 16-bit, 32-bit)</span>
    <span class="token class-name">uint32_t</span>          count<span class="token punctuation">;</span>           <span class="token comment">///&lt; Number of Data Frames to transfer (8-bit, 16-bit, 32-bit)</span>
    <span class="token class-name">spi_bit_width_t</span>   bit_width<span class="token punctuation">;</span>       <span class="token comment">///&lt; Bits per Data frame (8-bit, 16-bit, 32-bit)</span>

    <span class="token comment">/* Pointer to callback and optional working memory */</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> p_callback_memory<span class="token punctuation">;</span>

    <span class="token comment">/* Pointer to context to be passed into callback function */</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体会记录SPI通信过程中的参数变化，比如收发数据存储地址、收发数据剩余个数、收发数据位宽等；</p><ul><li>spi_cfg_t*：spi配置参数结构体，指向SPI的配置参数结构体，该结构体会在hal_data.h中定义一个全局变量g_spi0_cfg，该结构体的原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> channel<span class="token punctuation">;</span>                                   <span class="token comment">///&lt; Channel number to be used</span>

    IRQn_Type                   rxi_irq<span class="token punctuation">;</span>          <span class="token comment">///&lt; Receive Buffer Full IRQ number</span>
    IRQn_Type                   txi_irq<span class="token punctuation">;</span>       <span class="token comment">///&lt; Transmit Buffer Empty IRQ number</span>
    IRQn_Type                   tei_irq<span class="token punctuation">;</span>        <span class="token comment">///&lt; Transfer Complete IRQ number</span>
    IRQn_Type                   eri_irq<span class="token punctuation">;</span>               <span class="token comment">///&lt; Error IRQ number</span>
    <span class="token class-name">uint8_t</span>                     rxi_ipl<span class="token punctuation">;</span>      <span class="token comment">///&lt; Receive Interrupt priority</span>
    <span class="token class-name">uint8_t</span>                     txi_ipl<span class="token punctuation">;</span>       <span class="token comment">///&lt; Transmit Interrupt priority</span>
    <span class="token class-name">uint8_t</span>         tei_ipl<span class="token punctuation">;</span>      <span class="token comment">///&lt; Transfer Complete Interrupt priority</span>
    <span class="token class-name">uint8_t</span>                     eri_ipl<span class="token punctuation">;</span>               <span class="token comment">///&lt; Error Interrupt priority</span>
    <span class="token class-name">spi_mode_t</span>        operating_mode<span class="token punctuation">;</span>   <span class="token comment">///&lt; Select master or slave operating mode</span>
    <span class="token class-name">spi_clk_phase_t</span>        clk_phase<span class="token punctuation">;</span>    <span class="token comment">///&lt; Data sampling on odd or even clock edge</span>
    <span class="token class-name">spi_clk_polarity_t</span>          clk_polarity<span class="token punctuation">;</span>          <span class="token comment">///&lt; Clock level when idle</span>
    <span class="token class-name">spi_mode_fault_t</span>            mode_fault<span class="token punctuation">;</span>            <span class="token comment">///&lt; Mode fault error (master/slave conflict) flag</span>
    <span class="token class-name">spi_bit_order_t</span>             bit_order<span class="token punctuation">;</span>      <span class="token comment">///&lt; Select to transmit MSB/LSB first</span>
    <span class="token class-name">transfer_instance_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_transfer_tx<span class="token punctuation">;</span>         <span class="token comment">///&lt; To use SPI DTC/DMA write transfer, link a DTC/DMA instance here.  Set to NULL if unused.</span>
    <span class="token class-name">transfer_instance_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_transfer_rx<span class="token punctuation">;</span>         <span class="token comment">///&lt; To use SPI DTC/DMA read transfer, link a DTC/DMA instance here.  Set to NULL if unused.</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">///&lt; Pointer to user callback function</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>   <span class="token comment">///&lt; User defined context passed to callback function</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_extend<span class="token punctuation">;</span>      <span class="token comment">///&lt; Extended SPI hardware dependent configuration</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此结构体会指明SPI通信的中断类型、时钟特性和中断回调函数等。</p><p>这两个结构体的配置都由RASC自动生成，不需要用户手动配置。开发者可以参考如下代码来打开某个SPI设备完成初始化：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_spi0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error when open spi0 device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open device: spi0\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>关闭SPI设备</li></ol><p>关闭SPI设备的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数会将控制结构体中的open成员设置为false，表明SPI设备处于关闭状态，如果使能了SPI的参数校验功能，则在open为false的情况下，读写函数直接返回错误。</p><ol start="3"><li>SPI读取数据</li></ol><p>SPI读取数据的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                   <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                   <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_dest：目的数据（用来接收数据）的地址；</li><li>length：读取数据的个数</li><li>bit_width：读取数据的宽度，支持3bit~31bit；</li></ul><p>读取到的数据个数换算：count=length*bit_width/8 bytes。</p><ol start="4"><li>SPI发送数据</li></ol><p>发送数据的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span>
                    <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                    <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_src：源数据（要发送的数据）地址；</li><li>length：发送数据的个数；</li><li>bit_width：发送数据的位宽，支持3bit~31bit；</li></ul><p>发送的数据个数换算：count=length*bit_width/8 bytes。开发者可以参考如下代码来发送n个字节的数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                    <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rbuf<span class="token punctuation">,</span> 
                                    wSize<span class="token punctuation">,</span> 

                                    SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>SPI收发数据</li></ol><p>SPI传输是全双工的。即使只调用read函数想读取N字节数据，它也会发出N个字（只不过我们忽略了这些发送出去的数据，默认为0xFF）；即使你只调用write函数想发出N字节数据，它也会接收到N字节数据（只不过丢弃了而已）。需要同时读、写时，可以使用SPI的同时收发函数，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> writeRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_src<span class="token punctuation">,</span> 
                        <span class="token keyword">void</span> <span class="token operator">*</span> p_dest<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> length<span class="token punctuation">,</span>
                        <span class="token class-name">spi_bit_width_t</span> <span class="token keyword">const</span> bit_width<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_src：源数据（要发送的数据）地址；</li><li>p_dest：目的数据（用来接收数据）的地址；</li><li>length：收发数据的个数；</li><li>bit_width：收发数据的位宽；</li></ul><h2 id="_13-2-spi驱动oled显示实验" tabindex="-1"><a class="header-anchor" href="#_13-2-spi驱动oled显示实验" aria-hidden="true">#</a> 13.2 SPI驱动OLED显示实验</h2><h3 id="_13-2-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_13-2-1-硬件连接" aria-hidden="true">#</a> 13.2.1 硬件连接</h3><p>本书使用的外接SPI OLED模块是百问网的SPI OLED模块，外形如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image6.png" alt=""></p><p>和处理器的连线如下表所示：</p><table><thead><tr><th>序号</th><th>模块引脚</th><th>芯片SPI0引脚</th></tr></thead><tbody><tr><td>1</td><td>CS</td><td>P205</td></tr><tr><td>2</td><td>SCK</td><td>P204</td></tr><tr><td>3</td><td>MISO</td><td>P202</td></tr><tr><td>4</td><td>MOSI</td><td>P203</td></tr><tr><td>5</td><td>GPIO</td><td>P206</td></tr><tr><td>6</td><td>GND</td><td>GND</td></tr><tr><td>7</td><td>3V3</td><td>3V3</td></tr></tbody></table><h3 id="_13-2-2-ssd1306驱动解析" tabindex="-1"><a class="header-anchor" href="#_13-2-2-ssd1306驱动解析" aria-hidden="true">#</a> 13.2.2 SSD1306驱动解析</h3><p>SSD1306是一个分辨率为128<em>64的单色显示器，也就意味着如果要全屏刷新这个显示器的话，在处理器的内存映射中需要一个128</em>64/8字节的内存来表示显示器的显存。</p><p>驱动SSD1306需要从以下几个角度来分析：</p><ul><li>支持的接口协议；</li><li>显存写入模式；</li><li>显示区域设置；</li><li>显示模式设置；</li></ul><ol><li>接口协议</li></ol><p>SSD1306支持6800/8080并行接口协议，也支持3线制和4线制的SPI接口协议，还支持I2C接口协议。本书使用的模块是4线制SPI接口协议。</p><p>对于4线制SPI接口协议，其通信过程对于片选信号和数据/命令切换信号的要求如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image7.png" alt=""></p><p>要启动SPI传输，需要设置CS为低电平以选中目标设备。而DC#信号被用来分辨所传输的SPI数据是“命令”，还是“显存数据”。</p><p>SSD1306的4线制SPI通信的时序如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image8.png" alt=""></p><p>可以看到，对于SSD1306而言，它会在时钟信号的低电平期间切换数据，在上升沿采样数据，在时钟信号的高电平期间保持数据，传输的数据都是高位在前低位在后。因而在使用RASC配置SPI的时候就要和这个时钟特性要匹配。</p><p>需要注意的是，对于SSD1306而言，在串行通行模式（SPI或I2C）下是没有读取数据的操作，只有写操作。</p><ol start="2"><li>显存写入模式</li></ol><p>SSD1306的显存横向纵向分布方式不同。横向分布下，1个bit表示一个地址值，叫做column地址；纵向分布下，8个bit表示一个地址值，叫做页地址。SSD1306纵向共有64bit，分为8个页。</p><p>SSD1306的显存写入模式就是它的地址模式，分为：页地址模式、横向地址模式和纵向地址模式。不同的地址模式下，把数据写入显存后，显存的地址变化方式是不一样的。</p><p>在页地址模式下，如果往page0的column0写入一个byte的数据，那么column将会从0递增为1；当column递增到横向地址的最大值（满屏为127）时，column会回到0，而页地址page不会变化依然保存为0。因而，在页地址模式下要想将全屏刷新，需要分8次操作：先设置Paga n地址，写入128个字节（n的 取值从0到7）。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image9.png" alt=""></p><p>在横向地址模式下，如果往page0的column写入一个byte的数据，那么column将会从0递增为1；当column递增到横向地址的最大值时，column会回到0，而页地址会递增1；如果页地址递增到最大页数，则将回到第0页开始覆盖写。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image10.png" alt=""></p><p>在纵向地址模式下，如果往page0的column0写入一个byte的数据，那么column地址不会变化，而页地址page将会从0递增1，当page递增到最大页地址时，page会回到0地址，而column地址会递增1。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image11.png" alt=""></p><p>在横向地址模式或纵向地址模式下，要刷新全屏的数据，只需要在程序中执行一次发送128*8 bytes的数据到SSD1306即可，地址会自动变化，相比于页地址模式会更方便。</p><ol start="3"><li>显示区域设置</li></ol><p>设置显示区域有两种方法：硬件映射和命令控制。</p><p>对于硬件映射，是使用0x40~0x7F区间的指令，告诉SSD1306从硬件的0~63行的哪一行开始显示。这个方法多用“裁剪应用”，不是很常用。</p><p>而命令控制则是通过设置column起始地址和结束地址以及page页的起始地址和结束地址来划定一个显示范围，在小范围更新图像数据时比较好用（全屏刷新时不用每次都设置显示区域）。</p><p>设置column地址和页地址的方法如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13/image12.png" alt=""></p><ul><li>设置column地址的命令是0x21，然后发送2个字节的数据指明起始地址和结束地址；</li><li>设置page地址的命令是0x22，然后发送2个字节的数据指明起始地址和结束地址；</li></ul><ol start="4"><li>显示模式设置</li></ol><p>显示模式设置的参数比较多，比如：显存中每一位数据对应一个像素，那么这位数据是1还是0才能让像素被点亮？显示像素是从左往右显示，还是从右往左显示等等。</p><h3 id="_13-2-3-ssd1036驱动程序" tabindex="-1"><a class="header-anchor" href="#_13-2-3-ssd1036驱动程序" aria-hidden="true">#</a> 13.2.3 SSD1036驱动程序</h3><ol><li>中断回调函数和通讯等待函数</li></ol><p>这两个函数在前文《13.1.3 中断回调函数》已经见过，此处不再展示。</p><ol start="2"><li>信号引脚控制函数</li></ol><p>驱动SSD1306时，需要控制CS和DCX两个引脚，因而需要初始化IO且各自封装一个API供后续使用，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvGpioInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_ioport<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open GPIOs!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>CS eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> BSP_IO_PORT_02_PIN_05<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write %d to pin 0x%.4x!\\r\\n&quot;</span><span class="token punctuation">,</span> eState<span class="token punctuation">,</span> BSP_IO_PORT_02_PIN_05<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvWriteDCX</span><span class="token punctuation">(</span>DCX eState<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_ioport<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">pinWrite</span><span class="token punctuation">(</span>g_ioport<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> BSP_IO_PORT_02_PIN_06<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">bsp_io_level_t</span><span class="token punctuation">)</span>eState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to write %d to pin 0x%.4x!\\r\\n&quot;</span><span class="token punctuation">,</span> eState<span class="token punctuation">,</span> BSP_IO_PORT_02_PIN_06<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>显示设备对象封装和注册</li></ol><p>本章的实验还是使用《8.3 sci spi驱动显示屏实验》节的设备对象封装结构体来表示一个显示设备：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>FBBase<span class="token punctuation">;</span> <span class="token comment">/* CPU能直接读写的显存 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXres<span class="token punctuation">;</span>    <span class="token comment">/* X方向分辨率 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYres<span class="token punctuation">;</span>    <span class="token comment">/* Y方向分辨率 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wBpp<span class="token punctuation">;</span>     <span class="token comment">/* 每个像素使用多少个像素 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>   dwSize<span class="token punctuation">;</span>
    <span class="token keyword">int</span>            <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 硬件初始化 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>DisplayON<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 开启显示 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>DisplayOFF<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 关闭显示 */</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>SetDisplayWindow<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">,</span> \\
                                     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXs<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYs<span class="token punctuation">,</span> \\
                                     <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXe<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span>           <span class="token punctuation">(</span><span class="token operator">*</span>Flush<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 把FBBase的数据刷到LCD的显存里 */</span>

    <span class="token comment">/* 设置FBBase中的数据, 把(iX,iY)的像素设置为颜色dwColor
     * dwColor的格式:0x00RRGGBB
     */</span>
    <span class="token keyword">int</span>          <span class="token punctuation">(</span><span class="token operator">*</span>SetPixel<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>ptDev<span class="token punctuation">,</span> \\
                             <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wY<span class="token punctuation">,</span> \\
                             <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DisplayDevice<span class="token punctuation">,</span> <span class="token operator">*</span>PDisplayDevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是放在drv_disp.h中，还需要在drv_oled.c中实现DisplayDevice结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> gOledFbuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">64</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> DisplayDevice gOledDev <span class="token operator">=</span> <span class="token punctuation">{</span>
                             <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;OLED&quot;</span><span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>FBBase <span class="token operator">=</span> gOledFbuf<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>wXres <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>wYres <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>wBpp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token number">128</span><span class="token operator">*</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>Init <span class="token operator">=</span> OLEDDrvinit<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>DisplayON <span class="token operator">=</span> OLEDDrvDispON<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>DisplayOFF <span class="token operator">=</span> OLEDDrvDispOFF<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>SetDisplayWindow <span class="token operator">=</span> OLEDDrvSetDispWindow<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>Flush <span class="token operator">=</span> OLEDDrvFulsh<span class="token punctuation">,</span>
                             <span class="token punctuation">.</span>SetPixel <span class="token operator">=</span> OLEDDrvSetPixel
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且在drv_oled.c中写一个设备获取接口将OLED显示设备提供给上层应用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span> <span class="token operator">*</span><span class="token function">OLEDGetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gOledDev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数会在drv_disp.h中进行声明。</p><p>显示设备的函数指针所指向的函数将会在后文列举说明。</p><ol start="4"><li>发送指令函数</li></ol><p>发送指令时需要将DCX拉低，可以在头文件中定义一个枚举类型表明DCX的状态，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span><span class="token punctuation">{</span>
    isCommand<span class="token punctuation">,</span>
    isData
<span class="token punctuation">}</span>DCX<span class="token punctuation">;</span>     <span class="token comment">/* 数据/命令切换控制状态 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用前面的WriteDCX函数以及SPI的write函数发送指令，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvWriteReg</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> ucData<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLEDDrvWriteDCX</span><span class="token punctuation">(</span>isCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                        <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ucData<span class="token punctuation">,</span> 
                                        <span class="token number">1</span><span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPIWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>发送数据函数</li></ol><p>发送数据则需要将DCX拉高，然后再调用write函数。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvWriteDat</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> ucData<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLEDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                        <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ucData<span class="token punctuation">,</span> 
                                        <span class="token number">1</span><span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPIWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvWriteBuf</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> rbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">OLEDDrvWriteDCX</span><span class="token punctuation">(</span>isData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                                        <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rbuf<span class="token punctuation">,</span> 
                                        wSize<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPIWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是，第04行传输的是8位数据，它对应8个像素。</p><p>在某些显示设备的驱动芯片中，有可能是用16bit的来表示一个像素。</p><ol start="6"><li>SSD1306参数配置函数</li></ol><p>SSD1306可以配置的参数有很多，比如对比度、功率、时钟等等，本书不会一一详细列举代码，仅以函数名称展示：</p><table><thead><tr><th>序号</th><th>函数名</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>void OLEDDrvSetContrastValue(uint8_t ucValue)</td><td>ucValue：对比度值，范围0~255</td><td>设置SSD1306的对比度</td></tr><tr><td>2</td><td>void OLEDDrvEntrieDisp(bool bState)</td><td>bState：true-局部显示；false-全屏显示；</td><td>SSD1306全部显示或者局部显示：0xA5-局部显示；0xA4-全部显示</td></tr><tr><td>3</td><td>void OLEDDrvSetDispMode(bool bMode)</td><td>bMode：true-1显示0不显示；false-1不显示0显示；</td><td>SSD1306正常显示还是颠倒显示</td></tr><tr><td>4</td><td>void OLEDDrvSetHScroll(uint8_t ucDir, uint8_t ucStart, uint8_t ucFrtime, uint8_t ucEnd)</td><td>ucDir:true-从左往右滚动；false—从右往左滚动</td><td>设置横向滚动区域</td></tr><tr><td>5</td><td>void OLEDDrvSetHVScrool(uint8_t ucDir, uint8_t ucStart, uint8_t ucFrtime, uint8_t ucEnd, uint8_t ucOffset)</td><td>ucDir:true-从左往右滚动；false—从右往左滚动</td><td>设置横向和纵向的滚动区域</td></tr><tr><td>6</td><td>void OLEDDrvSetScroll(bool bState)</td><td>bState：true-开启滚动；false-关闭滚动</td><td>开启或者关闭滚动显示效果</td></tr><tr><td>7</td><td>static void OLEDDrvSetScrollArea(uint8_t ucArea, uint8_t ucNumOfRow)</td><td>ucArea-起始行；ucNumOfRow-滚动行数；</td><td>设置滚动显示区域</td></tr><tr><td>8</td><td>void OLEDDrvSetMemAddrMode(uint8_t ucMode)</td><td>ucMode：1-页地址模式；2-横向地址模式；3-纵向地址模式</td><td>设置地址模式</td></tr><tr><td>9</td><td>void OLEDDrvSetColumnAddr(uint8_t ucStart, uint8_t ucEnd)</td><td>ucStart-行起始地址；ucEnd-行结束地址</td><td>在页地址模式下只有起始地址有效；</td></tr><tr><td>10</td><td>void OLEDDrvSetPageAddr(uint8_t ucStart, uint8_t ucEnd)</td><td>ucStart-页起始地址；ucEnd-页束地址</td><td>在页地址模式下只有起始地址有效；</td></tr><tr><td>11</td><td>void OLEDDrvDispON(struct DisplayDevice* ptDev)</td><td>ptDev-指向显示设备</td><td>开启显示功能</td></tr><tr><td>12</td><td>void OLEDDrvDispOFF(struct DisplayDevice* ptDev)</td><td>ptDev-指向显示设备</td><td>关闭功能</td></tr></tbody></table><p>其它硬件配置函数省略，使用默认值也可。<br> 7. 设置显示区域函数</p><p>设置显示区域其实就是划定行地址和页地址的起始地址以及结束地址，将这两者封装到一起，将地址参数传入即可，参照如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvSetDispWindow</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">,</span> 
                                 <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXS<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYS<span class="token punctuation">,</span> 
                                 <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wXE<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wYE<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetColumnAddr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>wXS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>wXE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetPageAddr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>wYS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>wYE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>绘制单个像素点函数</li></ol><p>绘制单个像素首先需要知道绘制的地址是哪一个，假设将column地址设置为x，page地址设置为y，那么目标像素地址的换算公式如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-13\\image13.png" alt=""></p><p>y除以8是因为共有8页，再乘以128是因为每一页有128个column。</p><p>另外，本章实验使用的是frame buffer，为此可以封装成以下函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">OLEDDrvSetPixel</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">,</span> 
                           <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wX<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wY<span class="token punctuation">,</span>
                           <span class="token keyword">unsigned</span> <span class="token keyword">short</span> wColor<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> ptDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">;</span>
    <span class="token keyword">int</span> page<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>byte<span class="token punctuation">;</span>
    <span class="token keyword">int</span> bit<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wX <span class="token operator">&gt;=</span> ptDev<span class="token operator">-&gt;</span>wXres <span class="token operator">||</span> wY <span class="token operator">&gt;=</span> ptDev<span class="token operator">-&gt;</span>wYres<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    page <span class="token operator">=</span> wY <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    byte <span class="token operator">=</span> buf <span class="token operator">+</span> page <span class="token operator">*</span> <span class="token number">128</span> <span class="token operator">+</span> wX<span class="token punctuation">;</span>
    bit <span class="token operator">=</span> wY <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wColor<span class="token punctuation">)</span>
        <span class="token operator">*</span>byte <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token operator">*</span>byte <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>bit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第07行：获取frame buffer的首地址；</li><li>第13~14行：获取目标像素点在frame buffer中的偏移地址；</li><li>第15行：获取像素点在横向地址的位置；因为修改的像素点位置大概率不会是页数的整数倍，而是某一页的某一位，因而需要计算出这个点在那一页的哪一位需要被修改。</li><li>第16~19行：修改像素点的显示；</li></ul><ol start="9"><li>全屏刷新函数</li></ol><p>对于SSD1306而言，刷新全屏就是发送128*8 bytes的数据到显存，因而调用前文介绍的一次性发送N字节的函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OLEDDrvFulsh</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteBuf</span><span class="token punctuation">(</span>ptDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">,</span> <span class="token number">128</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>notSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本章实验使用的是横向地址模式，因而可以一次性发送全部显存数据。</p><ol start="10"><li>设备初始化函数</li></ol><p>SSD1306的初始化，需要初始化涉及的 GPIO、初始化SPI控制器、初始化SSD1306本身，读者可以参考如下代码来初始化SSD1306：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">OLEDDrvinit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">DisplayDevice</span><span class="token operator">*</span> ptDev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptDev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvGpioInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>notSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteDCX</span><span class="token punctuation">(</span>isCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_spi0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error when open spi0 device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success to open device: spi0\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetMemAddrMode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetMuxRatio</span><span class="token punctuation">(</span><span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetDispOffset</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetDispStartLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetSegRemap</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetCOMScanDir</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetCOMHWConfig</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetContrastValue</span><span class="token punctuation">(</span><span class="token number">0x7F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvEntrieDisp</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetDispMode</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetDispClock</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetChargePump</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvDispON</span><span class="token punctuation">(</span>ptDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvSetDispWindow</span><span class="token punctuation">(</span>ptDev<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ptDev<span class="token operator">-&gt;</span>wXres<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ptDev<span class="token operator">-&gt;</span>wYres<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OLEDDrvWriteCS</span><span class="token punctuation">(</span>notSelect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-2-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_13-2-4-测试程序" aria-hidden="true">#</a> 13.2.4 测试程序</h3><p>本章的测试程序放在app_disp.c中实现，示例代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DispAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DisplayDevice <span class="token operator">*</span>ptDispDev <span class="token operator">=</span> <span class="token function">OLEDGetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ptDispDev <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get OLED Display Device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ptDispDev<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>ptDispDev<span class="token operator">-&gt;</span>FBBase<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ptDispDev<span class="token operator">-&gt;</span><span class="token function">Flush</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">128</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            pBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ptDispDev<span class="token operator">-&gt;</span><span class="token function">Flush</span><span class="token punctuation">(</span>ptDispDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-2-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_13-2-5-上机实验" aria-hidden="true">#</a> 13.2.5 上机实验</h3><p>在hal_entry.c中的hal_entry()函数中初始化串口设备以及调用显示设备的测试函数来使串口设备打印调试信息，让OLED开始测试显示，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;app.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_uart.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_systick.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_data.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DispAppTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将程序编译出来的二进制可执行文件烧录到板子上，运行后可以看到OLED在不断地示横线、清屏。</p>`,174),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter13.html.vue"]]);export{r as default};
