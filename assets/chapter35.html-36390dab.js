import{_ as n,o as s,c as a,e as p}from"./app-829098b3.js";const e={},t=p(`<h1 id="第35章-adxl345三轴传感器驱动实验" tabindex="-1"><a class="header-anchor" href="#第35章-adxl345三轴传感器驱动实验" aria-hidden="true">#</a> 第35章 ADXL345三轴传感器驱动实验</h1><h2 id="_35-1-adxl345三轴传感器简介" tabindex="-1"><a class="header-anchor" href="#_35-1-adxl345三轴传感器简介" aria-hidden="true">#</a> 35.1 ADXL345三轴传感器简介</h2><h3 id="_35-1-1-产品概述" tabindex="-1"><a class="header-anchor" href="#_35-1-1-产品概述" aria-hidden="true">#</a> 35.1.1 产品概述</h3><p>ADXL345是一款小而薄的超低功耗3轴加速度计，分辨率高(13位)，测量范围达±16g。数字输出数据为16位二进制补码格式，可通过SPI(3线或4线)或I2C数字接口访问。</p><p>该器件提供多种特殊检测功能。活动和非活动检测功能：通过比较任意轴上的加速度与用户设置的阈值来检测有无运动发生。敲击检测功能：可以检测任意方向的单振和双振动作。自由落体检测功能：可以检测器件是否正在掉落。这些功能可以独立映射到两个中断输出引脚中的一个。</p><h3 id="_35-1-2-串行spi通信" tabindex="-1"><a class="header-anchor" href="#_35-1-2-串行spi通信" aria-hidden="true">#</a> 35.1.2 串行SPI通信</h3><p>对于SPI，可3线或4线配置，如以下连接图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image1.png" alt=""></p><p>本书配套开发板使用的是4线SPI，对应的通信时序如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image2.png" alt=""></p><p>从时序图中可知，ADXL345的地址只有6bit[A5:A0]，地址字节的最高位为读写控制位，此位为1表示对某个地址写数据；此位为0表示读取某个地址的数据。</p><h3 id="_35-1-3-寄存器映射表" tabindex="-1"><a class="header-anchor" href="#_35-1-3-寄存器映射表" aria-hidden="true">#</a> 35.1.3 寄存器映射表</h3><p>ADXL345的可访问寄存器多大31个，为了节省篇幅，本书就不在此处一一列举。请读者自行查阅本书配套的资料包中关于ADXL345的手册，里面对其寄存器进行了详细的说明描述。</p><h3 id="_35-1-4-adxl345的中断" tabindex="-1"><a class="header-anchor" href="#_35-1-4-adxl345的中断" aria-hidden="true">#</a> 35.1.4 ADXL345的中断</h3><p>ADXL345提供两个中断输出引脚：INT1和INT2。这两个中断引脚都是推挽低阻抗引脚。中断引脚默认配置为高电平有效。设置DATA_FORMAT寄存器(地址0x31)中的INT_INVERT位，可以更改为低电平有效。</p><h3 id="_35-1-5-adxl345的敲击检测" tabindex="-1"><a class="header-anchor" href="#_35-1-5-adxl345的敲击检测" aria-hidden="true">#</a> 35.1.5 ADXL345的敲击检测</h3><p>加速度值超过THRESH_TAP寄存器(地址0x1D)值，并且持续时间小于DUR寄存器(地址0x21)规定的时间范围的时候，SINGLE_TAP中断置位。</p><p>两次加速度事件超过THRESH_TAP寄存器(地址0x1D)值，并且持续时间小于DUR寄存器(地址0x21)的规定时间范围的时候，DOUBLE_TAP中断置位。第二次敲击开始于Latent寄存器(地址0x22)规定的时间之后，但在Window寄存器(0x23)规定时间内。详情见手册敲击检测部分。</p><h3 id="_35-1-6-adxl345的活动检测" tabindex="-1"><a class="header-anchor" href="#_35-1-6-adxl345的活动检测" aria-hidden="true">#</a> 35.1.6 ADXL345的活动检测</h3><p>加速度值大于THRESH_ACT寄存器(地址0x24)存储值时，Activity(活动)中断置位，由任一轴参与，通过ACT_INACT_CTL寄存器(0x27)置位。</p><p>加速度值小于THRESH_INACT寄存器(地址0x25)的存储值时，Inactivity(静止)位置位，所有轴参与，多于TIME_INACT寄存器(地址0x26)规定的时间，通过ACT_INACT_CTL寄存器(地址0x27)置位。TIME_INACT最大值为255秒。</p><h3 id="_35-1-7-adxl345的自由落体检测" tabindex="-1"><a class="header-anchor" href="#_35-1-7-adxl345的自由落体检测" aria-hidden="true">#</a> 35.1.7 ADXL345的自由落体检测</h3><p>加速度值小于THRESH_FF寄存器(地址0x28)的存储值时，FREE_FALL置位，大于TIME_FF寄存器(地址0x29)所有轴(逻辑与)所规定的时间。FREE_FALL中断不同于静止中断，因为：所有轴始终参与，并为逻辑“和”的形式，定时器周期小得多(最大值：1.28秒)，始终为直流耦合操作模式。</p><h2 id="_35-2-adxl345输出响应" tabindex="-1"><a class="header-anchor" href="#_35-2-adxl345输出响应" aria-hidden="true">#</a> 35.2 ADXL345输出响应</h2><p>ADXL345的输出响应，相对于XYZ方向的关系如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image3.png" alt=""></p><h2 id="_35-3-模块配置" tabindex="-1"><a class="header-anchor" href="#_35-3-模块配置" aria-hidden="true">#</a> 35.3 模块配置</h2><h3 id="_35-3-1-gpio配置" tabindex="-1"><a class="header-anchor" href="#_35-3-1-gpio配置" aria-hidden="true">#</a> 35.3.1 GPIO配置</h3><p>本次实验使用的是开发板配套扩展板的SPI组，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image4.png" alt=""></p><p>使用的SPI引脚是P202/P203/P204和P205，SPI引脚对应使用的是RA6M5的Common SPI0:</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image5.png" alt=""></p><p>对于P205，将它配置为通用输出即可。</p><h3 id="_35-3-2-spi配置" tabindex="-1"><a class="header-anchor" href="#_35-3-2-spi配置" aria-hidden="true">#</a> 35.3.2 SPI配置</h3><p>本次实验中，对于SPI的Stack配置不能直接使用默认的参数了，因为ADXL345的手册中明确指明了SPI的SCLK线在空闲时需要处于高电平，而且采样数据是在SPI的上升沿采样，在下降沿有效，而RASC中对于SPI的默认参数刚好相反，需要用户做修改：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image6.png" alt=""></p><p>另外还需要使能SPI的“发送buffer为空中断”、“接收中断”，并命名中断回调函数。</p><h2 id="_35-4-外设驱动程序" tabindex="-1"><a class="header-anchor" href="#_35-4-外设驱动程序" aria-hidden="true">#</a> 35.4 外设驱动程序</h2><h3 id="_35-4-1-gpio驱动" tabindex="-1"><a class="header-anchor" href="#_35-4-1-gpio驱动" aria-hidden="true">#</a> 35.4.1 GPIO驱动</h3><p>本次实验的SPI片选信号脚P205，会使用软件方式拉低或拉高此引脚来选中SPI设备或放弃SPI设备，因而需要使用GPIO设备对象。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">IODev</span> gSPIDACCSDev <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ADXL345 CS&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>port <span class="token operator">=</span> BSP_IO_PORT_02_PIN_05<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init <span class="token operator">=</span> IODrvInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read <span class="token operator">=</span> IODrvRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Write <span class="token operator">=</span> IODrvWrite<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">IODevicesCreate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">IODeviceInsert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gSPIDACCSDev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于GPIO的驱动函数参考《32.4.1 GPIO驱动》。</p><h3 id="_35-4-2-spi驱动" tabindex="-1"><a class="header-anchor" href="#_35-4-2-spi驱动" aria-hidden="true">#</a> 35.4.2 SPI驱动</h3><p>对于SPI设备而言，需要的驱动功能无非就是：初始化、读、写和同时读写，因而将这些属性需求封装到一个结构体中，源码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SPIDev</span><span class="token punctuation">{</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> channel<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>WriteRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> wbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>SPIDevice<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于SPI设备对象的管理依然使用链表的方式，实现注册、插入、查找和打印，在dev_spi.c中实现。</p><ol><li>初始化SPI</li></ol><p>对于RA6M5而言，初始化SPI控制器，其实就是调用open函数打开指定SPI即可，本书实验做了一点补充，将片选信号也放到初始化函数中：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">SPIDrvInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            pCSIO <span class="token operator">=</span> <span class="token function">IODeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;SPIDAC CS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pCSIO<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
            <span class="token comment">/* 打开设备 */</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_spi0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>SPI写数据</li></ol><p>Common SPI不同于SCI SPI，SCI SPI只能输出8bit的数据，而Common SPI还能够输出1~32bit的数据，因而用户完全可以根据要写的数据量来动态调整数据位数，以加速传输速度：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">SPIDrvWrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buf<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> FSP_SUCCESS<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_32_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_16_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SPI0DrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是SPI传输一次最大能够传输65536个数据，如果传输的数据超过了这个上限，用户需要分包传输。</p><ol start="3"><li>SPI读数据</li></ol><p>Common SPI读取数据也是一样的道理，可以读取32bit以内的任意位数的数据，一次读取多达数据个数也是65536个：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">SPIDrvRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buf<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> FSP_SUCCESS<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_32_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_16_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SPI0DrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>SPI同时读写数据</li></ol><p>同时读写也是一个道理：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">SPIDrvWriteRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SPIDev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> wbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rbuf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> wbuf<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> rbuf<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> length<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    <span class="token keyword">switch</span><span class="token punctuation">(</span>ptdev<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> FSP_SUCCESS<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">writeRead</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> wbuf<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_32_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                length <span class="token operator">=</span> length<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">writeRead</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> wbuf<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_16_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                err <span class="token operator">=</span> g_spi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">writeRead</span><span class="token punctuation">(</span>g_spi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> wbuf<span class="token punctuation">,</span> rbuf<span class="token punctuation">,</span> length<span class="token punctuation">,</span> SPI_BIT_WIDTH_8_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">==</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">SPI0DrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pCSIO<span class="token operator">-&gt;</span><span class="token function">Write</span><span class="token punctuation">(</span>pCSIO<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>回调函数和传输完成等待函数</li></ol><p>回调函数和传输等待在本书前文对于SPI外设的使用已经讲过，此处仅展示下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> bool gSPI0TxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spi0_callback</span><span class="token punctuation">(</span><span class="token class-name">spi_callback_args_t</span> <span class="token operator">*</span>p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SPI_EVENT_TRANSFER_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            gSPI0TxCplt <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SPI0DrvWaitTxCplt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>gSPI0TxCplt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    gSPI0TxCplt <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35-5-adxl345模块" tabindex="-1"><a class="header-anchor" href="#_35-5-adxl345模块" aria-hidden="true">#</a> 35.5 ADXL345模块</h2><p>对于ADXL345这个处理器，其官方给出了一个非常完备的参考驱动，参考地址：</p><p>https://github.com/analogdevicesinc/no-OS/tree/master/drivers/accel/adxl345</p><p>本节是对这个驱动代码的移植使用。</p><h3 id="_35-5-1-adxl345设备对象" tabindex="-1"><a class="header-anchor" href="#_35-5-1-adxl345设备对象" aria-hidden="true">#</a> 35.5.1 ADXL345设备对象</h3><p>对于ADXL345，常用操作是读取3轴上的加速度值，在有些时候还会需要手动关闭和开启它的测量；另外，还需要设置ADXL345的测量范围以及精度，因而将这些属性统一封装到一个结构体中（dev_adxl345.h）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token comment">/** Measurement range */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   selected_range<span class="token punctuation">;</span>
    <span class="token comment">/** Enable/Disable Full Resolution */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   full_resolution_set<span class="token punctuation">;</span>
    MeasureValue    value<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Init<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Stop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>ADXL345Device<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在dev_adxl345.c里构造一个ADXL345Device结构体，并给上层代码提高获得这个结构体的函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> ADXL345Device gADXL345 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ADXL345&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>selected_range <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>full_resolution_set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Init   <span class="token operator">=</span> ADXLDevInit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Read   <span class="token operator">=</span> ADXLDevRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Start  <span class="token operator">=</span> ADXLDevStart<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>Stop   <span class="token operator">=</span> ADXLDevStop
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span><span class="token function">ADXL345GetDevice</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>gADXL345<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-2-寄存器读取函数" tabindex="-1"><a class="header-anchor" href="#_35-5-2-寄存器读取函数" aria-hidden="true">#</a> 35.5.2 寄存器读取函数</h3><p>对于SPI传输，发送N个字节，就会读到N个字节。要访问ADXL345的寄存器，需要发出2个字节：第1个字节表示寄存器地址（它的最高位为1，表示要读寄存器；为0表示要写寄存器）。</p><p>针对寄存器的读写，定义了2个宏：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_SPI_READ</span>        <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_SPI_WRITE</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>读寄存器时，将寄存器的地址跟ADXL345_SPI_READ进行或运算,就得到要发出的第一个字节，要发出的第二个字节可以设为0。SPI传输中发送2个字节，就会读到2个字节，读到的第2个字节就是要得到的数据：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">uint8_t</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> register_address<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXLSPI<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> data_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> rxbuffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> register_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    data_buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ADXL345_SPI_READ <span class="token operator">|</span> register_address<span class="token punctuation">;</span>
    data_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> pADXLSPI<span class="token operator">-&gt;</span><span class="token function">WriteRead</span><span class="token punctuation">(</span>pADXLSPI<span class="token punctuation">,</span> data_buffer<span class="token punctuation">,</span> rxbuffer<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    register_value <span class="token operator">=</span> rxbuffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> register_value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-3-寄存器写函数" tabindex="-1"><a class="header-anchor" href="#_35-5-3-寄存器写函数" aria-hidden="true">#</a> 35.5.3 寄存器写函数</h3><p>写寄存器时，将寄存器的地址跟ADXL345_SPI_WRITE进行或运算,就得到要发出的第一个字节，要发出的第二个字节就是要发出的数值。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> register_address<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> register_value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXLSPI<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> data_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> rxbuffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    data_buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ADXL345_SPI_WRITE <span class="token operator">|</span> register_address<span class="token punctuation">;</span>
    data_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> register_value<span class="token punctuation">;</span>
    pADXLSPI<span class="token operator">-&gt;</span><span class="token function">WriteRead</span><span class="token punctuation">(</span>pADXLSPI<span class="token punctuation">,</span> data_buffer<span class="token punctuation">,</span> rxbuffer<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-4-adxl345指令定义" tabindex="-1"><a class="header-anchor" href="#_35-5-4-adxl345指令定义" aria-hidden="true">#</a> 35.5.4 ADXL345指令定义</h3><p>ADXL345的指令比较多，详细的请查看本章配套源码，本书此处仅展示部分代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* ADXL345 Register Map */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_DEVID</span>           <span class="token expression"><span class="token number">0x00</span> </span><span class="token comment">// R   Device ID.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_TAP</span>      <span class="token expression"><span class="token number">0x1D</span> </span><span class="token comment">// R/W Tap threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_OFSX</span>            <span class="token expression"><span class="token number">0x1E</span> </span><span class="token comment">// R/W X-axis offset.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_OFSY</span>            <span class="token expression"><span class="token number">0x1F</span> </span><span class="token comment">// R/W Y-axis offset.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_OFSZ</span>            <span class="token expression"><span class="token number">0x20</span> </span><span class="token comment">// R/W Z-axis offset.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_DUR</span>             <span class="token expression"><span class="token number">0x21</span> </span><span class="token comment">// R/W Tap duration.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_LATENT</span>          <span class="token expression"><span class="token number">0x22</span> </span><span class="token comment">// R/W Tap latency.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_WINDOW</span>          <span class="token expression"><span class="token number">0x23</span> </span><span class="token comment">// R/W Tap window.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_ACT</span>      <span class="token expression"><span class="token number">0x24</span> </span><span class="token comment">// R/W Activity threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_INACT</span>    <span class="token expression"><span class="token number">0x25</span> </span><span class="token comment">// R/W Inactivity threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_TIME_INACT</span>      <span class="token expression"><span class="token number">0x26</span> </span><span class="token comment">// R/W Inactivity time.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_ACT_INACT_CTL</span>   <span class="token expression"><span class="token number">0x27</span> </span><span class="token comment">// R/W Axis enable control for activity</span></span>
<span class="token comment">// and inactivity detection.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_FF</span>       <span class="token expression"><span class="token number">0x28</span> </span><span class="token comment">// R/W Free-fall threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_TIME_FF</span>         <span class="token expression"><span class="token number">0x29</span> </span><span class="token comment">// R/W Free-fall time.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_TAP_AXES</span>        <span class="token expression"><span class="token number">0x2A</span> </span><span class="token comment">// R/W Axis control for tap/double tap.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_ACT_TAP_STATUS</span>  <span class="token expression"><span class="token number">0x2B</span> </span><span class="token comment">// R   Source of tap/double tap.</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-5-设置功耗模式" tabindex="-1"><a class="header-anchor" href="#_35-5-5-设置功耗模式" aria-hidden="true">#</a> 35.5.5 设置功耗模式</h3><p>ADXL345的功耗模式分为标准模式和测量模式，通过寄存器地址0x2D设置：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_POWER_CTL</span>       <span class="token expression"><span class="token number">0x2D</span> </span><span class="token comment">// R/W Power saving features control.</span></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_set_power_mode</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> pwr_mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> old_power_ctl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_power_ctl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    old_power_ctl <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_POWER_CTL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_power_ctl <span class="token operator">=</span> old_power_ctl <span class="token operator">&amp;</span> <span class="token operator">~</span>ADXL345_PCTL_MEASURE<span class="token punctuation">;</span>
    new_power_ctl <span class="token operator">=</span> new_power_ctl <span class="token operator">|</span> <span class="token punctuation">(</span>pwr_mode <span class="token operator">*</span> ADXL345_PCTL_MEASURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_POWER_CTL<span class="token punctuation">,</span> new_power_ctl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-6-读取每个通道的坐标" tabindex="-1"><a class="header-anchor" href="#_35-5-6-读取每个通道的坐标" aria-hidden="true">#</a> 35.5.6 读取每个通道的坐标</h3><p>读取坐标值的寄存器起始地址是0x32：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_DATAX0</span>          <span class="token expression"><span class="token number">0x32</span> </span><span class="token comment">// R   X-Axis Data 0.</span></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_get_xyz</span><span class="token punctuation">(</span><span class="token class-name">int16_t</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token class-name">int16_t</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token class-name">int16_t</span> <span class="token operator">*</span>z<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXLSPI<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token class-name">uint8_t</span> first_reg_address <span class="token operator">=</span> ADXL345_DATAX0<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> read_buffer<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    read_buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ADXL345_SPI_READ <span class="token operator">|</span> ADXL345_SPI_MB <span class="token operator">|</span> first_reg_address<span class="token punctuation">;</span>
    pADXLSPI<span class="token operator">-&gt;</span><span class="token function">WriteRead</span><span class="token punctuation">(</span>pADXLSPI<span class="token punctuation">,</span> read_buffer<span class="token punctuation">,</span> read_buffer<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* x = ((ADXL345_DATAX1) &lt;&lt; 8) + ADXL345_DATAX0 */</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> read_buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* y = ((ADXL345_DATAY1) &lt;&lt; 8) + ADXL345_DATAY0 */</span>  
    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> read_buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* z = ((ADXL345_DATAZ1) &lt;&lt; 8) + ADXL345_DATAZ0 */</span>  
    <span class="token operator">*</span>z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">int16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>read_buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> read_buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-7-读取每个通道的加速度" tabindex="-1"><a class="header-anchor" href="#_35-5-7-读取每个通道的加速度" aria-hidden="true">#</a> 35.5.7 读取每个通道的加速度</h3><p>加速度值是通过3轴坐标值计算转换过来的，计算方法在手册的【偏移校准】节有详细解释，此处参考官网给出的计算方法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* ADXL345 Full Resolution Scale Factor */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_SCALE_FACTOR</span>    <span class="token expression"><span class="token number">0.0039</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_get_g_xyz</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>z<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">int16_t</span> x_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// X-axis&#39;s output data.</span>
    <span class="token class-name">int16_t</span> y_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// Y-axis&#39;s output data.</span>
    <span class="token class-name">int16_t</span> z_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// Z-axis&#39;s output data.</span>

    <span class="token function">adxl345_get_xyz</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x_data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y_data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>full_resolution_set  <span class="token operator">?</span> <span class="token punctuation">(</span>x_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token punctuation">(</span>x_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR <span class="token operator">*</span> <span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>selected_range <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>full_resolution_set  <span class="token operator">?</span> <span class="token punctuation">(</span>y_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token punctuation">(</span>y_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR <span class="token operator">*</span> <span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>selected_range <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>full_resolution_set  <span class="token operator">?</span> <span class="token punctuation">(</span>z_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR<span class="token punctuation">)</span> <span class="token operator">:</span>
                <span class="token punctuation">(</span>z_data <span class="token operator">*</span> ADXL345_SCALE_FACTOR <span class="token operator">*</span> <span class="token punctuation">(</span>gADXL345<span class="token punctuation">.</span>selected_range <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-8-使能-关闭敲击检测" tabindex="-1"><a class="header-anchor" href="#_35-5-8-使能-关闭敲击检测" aria-hidden="true">#</a> 35.5.8 使能/关闭敲击检测</h3><p>敲击检测涉及一系列的寄存器读写控制：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_TAP</span>      <span class="token expression"><span class="token number">0x1D</span> </span><span class="token comment">// R/W Tap threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_DUR</span>             <span class="token expression"><span class="token number">0x21</span> </span><span class="token comment">// R/W Tap duration.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_LATENT</span>          <span class="token expression"><span class="token number">0x22</span> </span><span class="token comment">// R/W Tap latency.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_WINDOW</span>          <span class="token expression"><span class="token number">0x23</span> </span><span class="token comment">// R/W Tap window.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_TAP_AXES</span>        <span class="token expression"><span class="token number">0x2A</span> </span><span class="token comment">// R/W Axis control for tap/double tap.</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过设置这些寄存器的值来配置ADXL345的敲击检测功能：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_set_tap_detection</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> tap_type<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_axes<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_dur<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_latent<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_window<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_thresh<span class="token punctuation">,</span>
                                      <span class="token class-name">uint8_t</span> tap_int<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> old_tap_axes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_tap_axes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> old_int_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_int_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> old_int_enable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_int_enable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    old_tap_axes <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_TAP_AXES<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_tap_axes <span class="token operator">=</span> old_tap_axes <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_TAP_X_EN <span class="token operator">|</span>ADXL345_TAP_Y_EN <span class="token operator">|</span>ADXL345_TAP_Z_EN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_tap_axes <span class="token operator">=</span> new_tap_axes <span class="token operator">|</span> tap_axes<span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_TAP_AXES<span class="token punctuation">,</span> new_tap_axes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_DUR<span class="token punctuation">,</span> tap_dur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_LATENT<span class="token punctuation">,</span> tap_latent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_WINDOW<span class="token punctuation">,</span> tap_window<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_THRESH_TAP<span class="token punctuation">,</span> tap_thresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    old_int_map <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_INT_MAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_map <span class="token operator">=</span> old_int_map <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_SINGLE_TAP <span class="token operator">|</span> ADXL345_DOUBLE_TAP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_map <span class="token operator">=</span> new_int_map <span class="token operator">|</span> tap_int<span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_INT_MAP<span class="token punctuation">,</span> new_int_map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    old_int_enable <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_INT_ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_enable <span class="token operator">=</span> old_int_enable <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_SINGLE_TAP <span class="token operator">|</span> ADXL345_DOUBLE_TAP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_enable <span class="token operator">=</span> new_int_enable <span class="token operator">|</span> tap_type<span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_INT_ENABLE<span class="token punctuation">,</span> new_int_enable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-9-使能-关闭活动检测" tabindex="-1"><a class="header-anchor" href="#_35-5-9-使能-关闭活动检测" aria-hidden="true">#</a> 35.5.9 使能/关闭活动检测</h3><p>配置活动检测的寄存器地址有：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_ACT_INACT_CTL</span>   <span class="token expression"><span class="token number">0x27</span> </span><span class="token comment">// R/W Axis enable control for activity</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_THRESH_ACT</span>      <span class="token expression"><span class="token number">0x24</span> </span><span class="token comment">// R/W Activity threshold.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_INT_ENABLE</span>      <span class="token expression"><span class="token number">0x2E</span> </span><span class="token comment">// R/W Interrupt enable control.</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADXL345_INT_MAP</span>         <span class="token expression"><span class="token number">0x2F</span> </span><span class="token comment">// R/W Interrupt mapping control.</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置这些寄存器来选择活动检测的方法和参数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adxl345_set_activity_detection</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> act_on_off<span class="token punctuation">,</span>
                                           <span class="token class-name">uint8_t</span> act_axes<span class="token punctuation">,</span>
                                           <span class="token class-name">uint8_t</span> act_ac_dc<span class="token punctuation">,</span>
                                           <span class="token class-name">uint8_t</span> act_thresh<span class="token punctuation">,</span>
                                           <span class="token class-name">uint8_t</span> act_int<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> old_act_inact_ctl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_act_inact_ctl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> old_int_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_int_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> old_int_enable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> new_int_enable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    old_act_inact_ctl <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_INT_ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_act_inact_ctl <span class="token operator">=</span> old_act_inact_ctl <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_ACT_ACDC <span class="token operator">|</span> ADXL345_ACT_X_EN <span class="token operator">|</span> ADXL345_ACT_Y_EN <span class="token operator">|</span> ADXL345_ACT_Z_EN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_act_inact_ctl <span class="token operator">=</span> new_act_inact_ctl <span class="token operator">|</span> <span class="token punctuation">(</span>act_ac_dc <span class="token operator">|</span> act_axes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_ACT_INACT_CTL<span class="token punctuation">,</span> new_act_inact_ctl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_THRESH_ACT<span class="token punctuation">,</span> act_thresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    old_int_map <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_INT_MAP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_map <span class="token operator">=</span> old_int_map <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_ACTIVITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_map <span class="token operator">=</span> new_int_map <span class="token operator">|</span> act_int<span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_INT_MAP<span class="token punctuation">,</span> new_int_map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    old_int_enable <span class="token operator">=</span> <span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_INT_ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_enable <span class="token operator">=</span> old_int_enable <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>ADXL345_ACTIVITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_int_enable <span class="token operator">=</span> new_int_enable <span class="token operator">|</span> <span class="token punctuation">(</span>ADXL345_ACTIVITY <span class="token operator">*</span> act_on_off<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">adxl345_set_register_value</span><span class="token punctuation">(</span>ADXL345_INT_ENABLE<span class="token punctuation">,</span> new_int_enable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-10-初始化adxl345" tabindex="-1"><a class="header-anchor" href="#_35-5-10-初始化adxl345" aria-hidden="true">#</a> 35.5.10 初始化ADXL345</h3><p>初始化ADXL345时，需要初始化SPI控制器，另外还需要设置ADXL345自身的工作模式和检测属性：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADXLDevInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    
    pINT1IO <span class="token operator">=</span> <span class="token function">IODeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;ADXL345 INT1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pINT1IO<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>

    pADXLSPI <span class="token operator">=</span> <span class="token function">SPIDeviceFind</span><span class="token punctuation">(</span><span class="token string">&quot;ADXL345 SPI&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXLSPI<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ESUCCESS <span class="token operator">!=</span> pADXLSPI<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pADXLSPI<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">adxl345_get_register_value</span><span class="token punctuation">(</span>ADXL345_DEVID<span class="token punctuation">)</span> <span class="token operator">!=</span> ADXL345_ID<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">xprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read ADXL345&#39;s ID!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">adxl345_set_power_mode</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* measure(1)/standby(0) mode.*/</span>
    <span class="token function">adxl345_set_range_resolution</span><span class="token punctuation">(</span>ADXL345_RANGE_PM_16G<span class="token punctuation">,</span>  <span class="token comment">/* Range option. +- 16g */</span>
                                 ADXL345_FULL_RES<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*Enables full resolution*/</span>
    <span class="token function">adxl345_set_tap_detection</span><span class="token punctuation">(</span>ADXL345_SINGLE_TAP <span class="token operator">|</span> ADXL345_DOUBLE_TAP<span class="token punctuation">,</span>    <span class="token comment">/* Tap type (none, single, double) */</span>
                              ADXL345_TAP_X_EN <span class="token operator">|</span> ADXL345_TAP_Y_EN <span class="token operator">|</span> ADXL345_TAP_Z_EN<span class="token punctuation">,</span> <span class="token comment">/* tap_axes */</span>
                              <span class="token number">0x0D</span><span class="token punctuation">,</span>   <span class="token comment">/* tap_dur */</span>
                              <span class="token number">0x50</span><span class="token punctuation">,</span>   <span class="token comment">/* tap_latent */</span>
                              <span class="token number">0xF0</span><span class="token punctuation">,</span>   <span class="token comment">/* tap_window */</span>
                              <span class="token number">0x20</span><span class="token punctuation">,</span>   <span class="token comment">/* Tap threshold */</span>
                              <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Interrupts pin.0x0 - interrupts on INT1 pin */</span>
    <span class="token function">adxl345_set_activity_detection</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span>    <span class="token comment">/* enables(1)/disable(0) the activity detection. */</span>
                                   ADXL345_ACT_X_EN <span class="token operator">|</span> ADXL345_ACT_Y_EN <span class="token operator">|</span> ADXL345_ACT_Z_EN<span class="token punctuation">,</span>  <span class="token comment">/* Axes which participate in detecting activity. */</span>
                                   <span class="token number">0x00</span><span class="token punctuation">,</span>    <span class="token comment">/* dc(0)/ac(ADXL345_ACT_ACDC)-coupled operation. */</span>
                                   <span class="token number">0x08</span><span class="token punctuation">,</span>    <span class="token comment">/* Threshold value for detecting activity */</span>
                                   <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* Interrupts pin.0-int1 */</span>
    <span class="token function">adxl345_set_free_fall_detection</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span>   <span class="token comment">/* disables(0)/enable(1) the free-fall detection. */</span>
                                    <span class="token number">0x08</span><span class="token punctuation">,</span>   <span class="token comment">/* Threshold value for free-fall detection. The scale factor */</span>
                                    <span class="token number">0x0A</span><span class="token punctuation">,</span>   <span class="token comment">/* Time value for free-fall detection */</span>
                                    <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Interrupts pin. */</span>
	<span class="token function">adxl345_get_all_axes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35-5-11-读取加速度" tabindex="-1"><a class="header-anchor" href="#_35-5-11-读取加速度" aria-hidden="true">#</a> 35.5.11 读取加速度</h3><p>此函数调用获取三轴加速度的adxl345_get_g_xyz函数，只是将其进行了再次封装：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ADXLDevRead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ADXL345Dev</span> <span class="token operator">*</span>ptdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> ptdev<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXLSPI<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>

    <span class="token function">adxl345_get_g_xyz</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptdev<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptdev<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptdev<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ESUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35-6-测试程序" tabindex="-1"><a class="header-anchor" href="#_35-6-测试程序" aria-hidden="true">#</a> 35.6 测试程序</h2><p>将获取到的ADXL345设备对象初始化完毕之后，每隔500ms读一次3轴加速度数据，并将它们打印出来：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DeviceTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">UartDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">TimerDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SPIDevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">IODevicesRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ADXL345Device <span class="token operator">*</span>pADXL345 <span class="token operator">=</span> <span class="token function">ADXL345GetDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pADXL345<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">xprintf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to Find ADXL345 Device!\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pADXL345<span class="token operator">-&gt;</span><span class="token function">Init</span><span class="token punctuation">(</span>pADXL345<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pADXL345<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>pADXL345<span class="token punctuation">)</span> <span class="token operator">==</span> ESUCCESS<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">xprintf</span><span class="token punctuation">(</span><span class="token string">&quot;x:%.4fg\\ty:%.4fg\\tz:%.4fg\\r\\n&quot;</span><span class="token punctuation">,</span> pADXL345<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pADXL345<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>y<span class="token punctuation">,</span> pADXL345<span class="token operator">-&gt;</span>value<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35-7-测试结果" tabindex="-1"><a class="header-anchor" href="#_35-7-测试结果" aria-hidden="true">#</a> 35.7 测试结果</h2><p>将程序烧写到开发板上运行，打开串口助手并且插上扩展板以及接上ADXL345模块，可以观察到下图所示的结果：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-35/image7.png" alt=""></p>`,114),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","chapter35.html.vue"]]);export{r as default};
