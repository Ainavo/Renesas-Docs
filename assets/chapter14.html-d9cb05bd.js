import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第14章-qspi" tabindex="-1"><a class="header-anchor" href="#第14章-qspi" aria-hidden="true">#</a> 第14章 QSPI</h1><p>本章目标</p><ul><li>使用RASC快速配置QSPI模块</li><li>学会使用QSPI的API对W25Q64进行数据读写</li></ul><h2 id="_14-1-认识qspi" tabindex="-1"><a class="header-anchor" href="#_14-1-认识qspi" aria-hidden="true">#</a> 14.1 认识QSPI</h2><p>QSPI是Quad SPI的简写，是Motorola公司推出的SPI接口的扩展协议，比普通SPI增加了两条数据线。</p><h3 id="_14-1-1-spi和qspi的区别" tabindex="-1"><a class="header-anchor" href="#_14-1-1-spi和qspi的区别" aria-hidden="true">#</a> 14.1.1 SPI和QSPI的区别</h3><p>普通SPI协议有很多扩展：Dual SPI、Quad SPI等。</p><p>通过前面章节对SPI接口协议的分析已经知道，普通SPI有4个IO控制：CS/SCK/MOSI/MISO，在通信的时候由主机通过CS选中从机设备，发出SCK时钟，主机把数据驱动到MOSI线上发给从机，主机从MISO线上将数据读进来。</p><p>对于Dual SPI（双线串行外设接口），它同样也由4根线共同完成通信：CS/SCK/IO0/IO1，和SPI不同的是，Dual SPI在收发数据的时候是使用2根数据线IO0和IO1进行的，而不是像SPI那样收发数据分别只使用1条数据线。因而，在单向数据传输上，Dual SPI的传输速度是SPI的2倍。Dual SPI是半双工的。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image1.png" style="zoom:150%;"><p>对于Quad SPI（四线串行外设接口），它较之于Dual SPI则是多了2根数据线IO2/IO3。在通信的时候，收发数据使用4根数据线进行，在单向传输上，速率是SPI的4倍，是Dual SPI的2倍。Quad SPI是半双工的。</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image2.png" style="zoom:150%;"><h3 id="_14-1-2-ra6m5系列的qspi" tabindex="-1"><a class="header-anchor" href="#_14-1-2-ra6m5系列的qspi" aria-hidden="true">#</a> 14.1.2 RA6M5系列的QSPI</h3><ol><li>QSPI框图</li></ol><p>RA6M5的QSPI框图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image3.png" alt=""></p><p>通过QSPI模块，可以方便地编写程序，使用QSPI协议访问外设。</p><ol start="2"><li>SPI总线协议</li></ol><p>QSPI向下兼容普通SPI、Dual SPI。所以它支持的SPI总线协议有3种：Single SPI/Dual SPI/Quad SPI，这三种协议需要的控制线和数据线看下表：</p><table><thead><tr><th>IO</th><th>Single SPI</th><th>Dual SPI</th><th>Quad SPI</th></tr></thead><tbody><tr><td>QSSL/CS</td><td>☑</td><td>☑</td><td>☑</td></tr><tr><td>QSPCLK/SCK</td><td>☑</td><td>☑</td><td>☑</td></tr><tr><td>QIO0</td><td>☑</td><td>☑</td><td>☑</td></tr><tr><td>QIO1</td><td>☑</td><td>☑</td><td>☑</td></tr><tr><td>QIO2</td><td>☒</td><td>☒</td><td>☑</td></tr><tr><td>QIO3</td><td>☒</td><td>☒</td><td>☑</td></tr></tbody></table><ol start="3"><li>SPI模式</li></ol><p>RA6M5的QSPI有2种SPI模式：SPI Mode0和SPI Mode3，对应的特点如下：</p><ul><li>SPI Mode 0：时钟信号线QSPCLK在SPI总线空闲地时候呈低电平；</li><li>SPI Mode 3：时钟信号线QSPCLK在SPI总线空闲地时候呈高电平；</li></ul><ol start="4"><li>QSPI的内存映射</li></ol><p>当使用QSPI连接外部存储设备时，RA6M5系列处理器的地址和外部存储设备的地址映射如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image4.png" alt=""></p><p>从图中可以看出，其映射首地址是0x60000000，结束地址是0x68000000，共有128MB大，但是用于映射外部存储器的大小只有低64MB的空间——这就是一个Bank的大小。还可通过QSPI.EXT[5:0]来选择64个Bank（只使用63个Bank），所以QSPI可以访问的最大容量为64MB*63。</p><p>使用QSPI的直接通信模式时，并不涉及这些映射关系，直接发出存储设备上的偏移地址即可。</p><p>使用XIP模式时，才需要使用这样的地址：0x60000000+存储设备偏移地址。</p><h3 id="_14-1-3-qspi的xip控制" tabindex="-1"><a class="header-anchor" href="#_14-1-3-qspi的xip控制" aria-hidden="true">#</a> 14.1.3 QSPI的XIP控制</h3><p>XIP，execute in place，直接翻译过来就是“就地执行”。就地执行什么？就地执行存储设备上的程序。使用XIP的好处是不用将存储设备的程序复制到RAM上才能运行，而是直接就地执行。</p><p>RA6M5的QSPI就支持XIP控制方法，通过寄存器SFMXD[7:0]和SFMSDC实现进入和退出XIP控制模式。</p><p>什么情况下XIP方法呢？当内部Flash不足需要把程序保存到QSPI外设上，并且RAM也不够大导致无法把QSPI外设的程序读到RAM里运行，才会考虑这种方式。但是使用这种方式时，程序执行效率会慢一些，毕竟使用QSPI读取指令的速度远低于从RAM上读取指令的速度。</p><h3 id="_14-1-4-直接通信模式" tabindex="-1"><a class="header-anchor" href="#_14-1-4-直接通信模式" aria-hidden="true">#</a> 14.1.4 直接通信模式</h3><p>对于RA6M5的QSPI，它还有一种通信模式叫做直接通信模式Direct Communication Mode。瑞萨考虑到市面上的外部存储设备有不同的访问方法，需要使用直接通信模式来发送定制化的指令以读写数据。</p><h2 id="_14-2-qspi模块的使用" tabindex="-1"><a class="header-anchor" href="#_14-2-qspi模块的使用" aria-hidden="true">#</a> 14.2 QSPI模块的使用</h2><h3 id="_14-2-1-配置qspi模块" tabindex="-1"><a class="header-anchor" href="#_14-2-1-配置qspi模块" aria-hidden="true">#</a> 14.2.1 配置QSPI模块</h3><p>本章实验驱动的W25Q64模块为板载模块，原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image5.png" alt=""></p><p>W25Q64连接到QSPI0模块，使用的GPIO引脚如下：</p><table><thead><tr><th>序号</th><th>模块引脚</th><th>芯片SPI0引脚</th></tr></thead><tbody><tr><td>1</td><td>CS</td><td>P306</td></tr><tr><td>2</td><td>SCK</td><td>P305</td></tr><tr><td>3</td><td>IO0</td><td>P307</td></tr><tr><td>4</td><td>IO1</td><td>P308</td></tr><tr><td>5</td><td>IO2</td><td>P309</td></tr><tr><td>6</td><td>IO3</td><td>P310</td></tr></tbody></table><p>其中CS是QSPI的片选信号引脚，IO0~IO3是QSPI的4根数据线。</p><p>在RASC中配置QSPI，首先在RASC的“Pin Configuration”中的“Peripherals”里展开“Storage:QSPI”，选中里面的QSPI0，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image6.png" alt=""></p><p>配置QSPI的引脚时，“Pin Group Selection”选择组别时，有混合型Mixed和组别独有型，如图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image7.png" style="zoom:150%;"><p>在不清楚引脚属于哪一个组别的情况下可以使用Mixed组别来手动指定。</p><p>对于QSPI的操作模式“Operation Mode”，支持自定义Custom模式、Single SPI和Dual SPI模式以及Quad SPI模式。如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image8.png" style="zoom:150%;"><p>本章选择的是Quad SPI模式。</p><p>配置完引脚和操作模式后，就要去“Stacks”里添加QSPI的Stack模块。点击“New Stack”，选择里面的“Storage”中的“QSPI(r_qspi)”,如图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image9.png" alt=""></p><p>添加了QSPI的Stack模块后再去配置参数。首先是General通用参数，需要在这里设置QSPI的协议、地址位数、读写模式、空闲时钟和页大小等，下图是根据W25Q64的特点进行的设置：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image10.png" style="zoom:150%;"><p>具体参数参考下表：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image11.PNG" alt=""></p><p>接着是命令定义，也就是设置QSPI通信设备的一些控制命令。FSP默认的一些命令能够满足大部分都QSPI设备，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image12.png" style="zoom:150%;"><p>这些命令需要根据通信的设备来设置，需要仔细核对。对于本章使用的W25Q64而言，这些命令都是可以使用的，本章没有对其进行修改，使用的是默认的指令。</p><p>最后是QSPI总线的时间设置，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image13.png" style="zoom:150%;"><p>在RASC中仅设置QSPI的时钟分频系数、在失能（Deselect）后的片选信号保持高电平的最小时钟个数。同样的也是需要根据通信设备的要求来设置，本章这里还是使用的是默认设置。</p><p>设置好QSPI的Stack模块之后，点击右上角的“Generate Project Content”生成代码。接下来就是去工程中看一下RASC的配置在工程中是如何体现的。</p><h3 id="_14-2-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_14-2-2-配置信息解读" aria-hidden="true">#</a> 14.2.2 配置信息解读</h3><p>配置信息分为两部分：引脚的配置信息、QSPI模块的配置信息。</p><p>QSPI涉及的引脚，它们配置信息在工程的pin_data.c中生成。在RASC里配置的每一个引脚，都会在pin_data.c生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_05<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_06<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_07<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_08<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_09<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>   <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_03_PIN_10<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
                  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_QSPI<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（省略内容）
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将QSPI的引脚P305~P310配置为QSPI外设复用功能，当使用GPIO的open函数时就会配置好这些引脚。</p><p>QSPI的配置信息，是在hal_data.c中生成。它定义了一个spi_flash_cfg_t结构体常量g_qspi0_cfg：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">spi_flash_cfg_t</span> g_qspi0_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>spi_protocol        <span class="token operator">=</span> SPI_FLASH_PROTOCOL_EXTENDED_SPI<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read_mode           <span class="token operator">=</span> SPI_FLASH_READ_MODE_FAST_READ_QUAD_IO<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>address_bytes       <span class="token operator">=</span> SPI_FLASH_ADDRESS_BYTES_3<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>dummy_clocks        <span class="token operator">=</span> SPI_FLASH_DUMMY_CLOCKS_4<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>page_program_address_lines <span class="token operator">=</span> SPI_FLASH_DATA_LINES_1<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>page_size_bytes     <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>page_program_command <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write_enable_command <span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>status_command <span class="token operator">=</span> <span class="token number">0x05</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write_status_bit    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>xip_enter_command   <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>xip_exit_command    <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_erase_command_list <span class="token operator">=</span> <span class="token operator">&amp;</span>g_qspi0_erase_command_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>erase_command_list_length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_qspi0_erase_command_list<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>g_qspi0_erase_command_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_extend            <span class="token operator">=</span> <span class="token operator">&amp;</span>g_qspi0_extended_cfg<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体的成员就包含了QSPI的协议、模式、地址位数等配置信息。</p><h3 id="_14-2-3-api接口及其用法" tabindex="-1"><a class="header-anchor" href="#_14-2-3-api接口及其用法" aria-hidden="true">#</a> 14.2.3 API接口及其用法</h3><p>在路径1401_qspi_w25q/ra/fsp/inc/api/r_spi_flash_api.h中定义了SPI Flash模块的接口，它定义了一个结构体类型spi_flash_api_t，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** SPI flash implementations follow this API. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_flash_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">spi_flash_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> directWrite<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                              <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                              <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                              bool <span class="token keyword">const</span> read_after_write<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> directRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                             <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span> 
                             <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> directTransfer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                                 <span class="token class-name">spi_flash_direct_transfer_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_transfer<span class="token punctuation">,</span>
                                 <span class="token class-name">spi_flash_direct_transfer_dir_t</span> direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> spiProtocolSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                                 <span class="token class-name">spi_flash_protocol_t</span> spi_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span>
                        <span class="token class-name">uint32_t</span> byte_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> erase<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_device_address<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> byte_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                            <span class="token class-name">spi_flash_status_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> xipEnter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> xipExit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> bankSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> bank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> autoCalibrate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_flash_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在r_qspi.c中实现了上述结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">spi_flash_api_t</span> g_qspi_on_spi_flash <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>open           <span class="token operator">=</span> R_QSPI_Open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>directWrite    <span class="token operator">=</span> R_QSPI_DirectWrite<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>directRead     <span class="token operator">=</span> R_QSPI_DirectRead<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>directTransfer <span class="token operator">=</span> R_QSPI_DirectTransfer<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>spiProtocolSet <span class="token operator">=</span> R_QSPI_SpiProtocolSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write          <span class="token operator">=</span> R_QSPI_Write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>erase          <span class="token operator">=</span> R_QSPI_Erase<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>statusGet      <span class="token operator">=</span> R_QSPI_StatusGet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>xipEnter       <span class="token operator">=</span> R_QSPI_XipEnter<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>xipExit        <span class="token operator">=</span> R_QSPI_XipExit<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bankSet        <span class="token operator">=</span> R_QSPI_BankSet<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>autoCalibrate  <span class="token operator">=</span> R_QSPI_AutoCalibrate<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>close          <span class="token operator">=</span> R_QSPI_Close<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于QSPI的操作，开发者可以使用spi_flash_api_t结构体的函数指针，也可以直接调用r_qspi.c实现的R_QSPI_xxx()函数。本书使用的是面向对象的编程思想，选择使用函数指针的操作方式。</p><p>接下来我们就来看下FSP中QSPI的一些基本操作。</p><ol><li>打开QSPI设备</li></ol><p>打开QSPI设备的函数指针原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                   <span class="token class-name">spi_flash_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它有两个参数：</p><ul><li>spi_flash_ctrl_t：这是一个void类型指针，实际会指向一个qspi_instance_ctrl_t的结构体变量，qspi_instance_ctrl_t的原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_qspi_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spi_flash_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_cfg<span class="token punctuation">;</span>            <span class="token comment">// Pointer to initial configuration</span>
    <span class="token class-name">spi_flash_data_lines_t</span>  data_lines<span class="token punctuation">;</span>       <span class="token comment">// Data lines</span>
    <span class="token class-name">uint32_t</span>                total_size_bytes<span class="token punctuation">;</span> <span class="token comment">// Total size of the flash in bytes</span>
    <span class="token class-name">uint32_t</span>                open<span class="token punctuation">;</span>             <span class="token comment">// Whether or not driver is open</span>
<span class="token punctuation">}</span> <span class="token class-name">qspi_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结构体会指明QSPI设备的open状态和配置参数spi_flash_cfg_t；</p><ul><li>spi_flash_cfg_t：QSPI设备的配置参数结构体，其原型如下：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_flash_cfg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spi_flash_protocol_t</span>      spi_protocol<span class="token punctuation">;</span>                      <span class="token comment">///&lt; Initial SPI protocol.  SPI protocol can be changed in @ref spi_flash_api_t::spiProtocolSet.</span>
    <span class="token class-name">spi_flash_read_mode_t</span>     read_mode<span class="token punctuation">;</span>                         <span class="token comment">///&lt; Read mode</span>
    <span class="token class-name">spi_flash_address_bytes_t</span> address_bytes<span class="token punctuation">;</span>                     <span class="token comment">///&lt; Number of bytes used to represent the address</span>
    <span class="token class-name">spi_flash_dummy_clocks_t</span>  dummy_clocks<span class="token punctuation">;</span>                      <span class="token comment">///&lt; Number of dummy clocks to use for fast read operations</span>

    <span class="token comment">/** Number of lines used to send address for page program command. This should either be 1 or match the number of lines used in
     * the selected read mode. */</span>
    <span class="token class-name">spi_flash_data_lines_t</span>            page_program_address_lines<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span>                           write_status_bit<span class="token punctuation">;</span>          <span class="token comment">///&lt; Which bit determines write status</span>
    <span class="token class-name">uint8_t</span>                           write_enable_bit<span class="token punctuation">;</span>          <span class="token comment">///&lt; Which bit determines write status</span>
    <span class="token class-name">uint32_t</span>                          page_size_bytes<span class="token punctuation">;</span>           <span class="token comment">///&lt; Page size in bytes (maximum number of bytes for page program). Used to specify single continuous write size (bytes) in case of OSPI RAM.</span>
    <span class="token class-name">uint8_t</span>                           page_program_command<span class="token punctuation">;</span>      <span class="token comment">///&lt; Page program command</span>
    <span class="token class-name">uint8_t</span>                           write_enable_command<span class="token punctuation">;</span>      <span class="token comment">///&lt; Command to enable write or erase, typically 0x06</span>
    <span class="token class-name">uint8_t</span>                           status_command<span class="token punctuation">;</span>            <span class="token comment">///&lt; Command to read the write status</span>
    <span class="token class-name">uint8_t</span>                           read_command<span class="token punctuation">;</span>              <span class="token comment">///&lt; Read command - OSPI SPI mode only</span>
    <span class="token class-name">uint8_t</span>                           xip_enter_command<span class="token punctuation">;</span>         <span class="token comment">///&lt; Command to enter XIP mode</span>
    <span class="token class-name">uint8_t</span>                           xip_exit_command<span class="token punctuation">;</span>          <span class="token comment">///&lt; Command to exit XIP mode</span>
    <span class="token class-name">uint8_t</span>                           erase_command_list_length<span class="token punctuation">;</span> <span class="token comment">///&lt; Length of erase command list</span>
    <span class="token class-name">spi_flash_erase_command_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_erase_command_list<span class="token punctuation">;</span>      <span class="token comment">///&lt; List of all erase commands and associated sizes</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span>                      <span class="token operator">*</span> p_extend<span class="token punctuation">;</span>                  <span class="token comment">///&lt; Pointer to implementation specific extended configurations</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_flash_cfg_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用RASC配置QSPI的参数并生成工程后，会在hal_data.c定义一个常量g_qspi0_cfg，在调用open函数时就会用到g_qspi0_cfg（下列代码的g_qspi0.p_cfg）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_qspi0<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>QSPI的直接写和直接读</li></ol><p>QSPI的直接写函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> directWrite<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                          <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">,</span>
                          bool <span class="token keyword">const</span> read_after_write<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：spi flash控制结构体指针；</li><li>p_src：源数据（要发送的数据）地址；</li><li>bytes：发送数据的个数；</li><li>read_after_write：发送数据结束后是否要立即读数据的标志位，true-会立即读；</li></ul><p>QSPI直接读的函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> directRead<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                         <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span> 
                         <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：spi flash控制结构体指针；</li><li>p_src：源数据（要发送的数据）地址；</li><li>bytes：读取数据的个数；</li></ul><p>对于很多QSPI接口的存储器而言，想要读取它们的某些信息，比如ID、储存的数据等，往往都是要先发送读取指令，接着发送读取地址后，主机才能读到数据。因而对于读操作，需要先发起写操作。</p><p>下面是一个例子，读取W25Q64的ID：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">W25QDrvReadID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> cmd <span class="token operator">=</span> <span class="token number">0x9F</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> id<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directWrite</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> 
                               <span class="token operator">&amp;</span>cmd<span class="token punctuation">,</span> 
                               <span class="token number">1</span><span class="token punctuation">,</span> 
                               true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directRead</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ID<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：读取ID的指令是0x9F；</li><li>第05~08行：使用直接写函数发送读ID指令，并且表明紧跟着会读取数据；</li><li>第09行：使用直接读函数将读到的ID保存到数据id中；</li><li>第10~11行：组合ID并返回给调用者；</li></ul><ol start="3"><li>使用QSPI对存储设备进行页写</li></ol><p>QSPI封装了一个对QSPI接口存储器的页写函数，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                    <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span>
                    <span class="token class-name">uint32_t</span> byte_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_ctrl：spi flash控制指针；</li><li>p_src：源数据（要发送的数据）地址；</li><li>p_dest：存储设备的目标地址；</li><li>byte_count：数据个数</li></ul><p>这是一个页写功能的函数，如果byte_count超过RASC中配置的页大小，则写入失败。</p><p>要用好此函数，必须配合外部存储器的内存特性进行计算，得到地址偏移。</p><p>本章后面，会把扇区擦除、状态获取、页写函数等，封装出一个更好用的写函数，供读者参考使用。</p><ol start="4"><li>使用QSPI擦除存储设备的扇区</li></ol><p>对于一些ROM型的外部存储器，要想写入数据，必须先擦除。</p><p>以本章使用的实验对象W25Q64而言，它的最小擦除单位是1个扇区（一个扇区是由16个页组成），而FSP恰好也封装了一个对扇区的擦除函数，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> erase<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                    <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_device_address<span class="token punctuation">,</span> 
                    <span class="token class-name">uint32_t</span> byte_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_device_address：要擦除的外部存储器的起始地址；</li><li>byte_count：要擦除的数据个数；</li></ul><p>执行此函数时，byte_count必须等于可擦除块的大小（可能有多个取值，比如4096、32768、65536、SPI_FLASH_ERASE_SIZE_CHIP_ERASE）。</p><ol start="5"><li>状态获取</li></ol><p>在写、擦除QSPI之前，需要判断上一个操作是否完成。FSP也对这个功能进行了封装，函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> statusGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">spi_flash_ctrl_t</span> <span class="token operator">*</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">spi_flash_status_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>p_status：指向保存状态值的地址，是一个spi_flash_status_t结构体类型，此结构体的原型是：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_spi_flash_status</span>
<span class="token punctuation">{</span>
    bool write_in_progress<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">spi_flash_status_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有一个bool成员write_in_progress，用来表示外部存储器是否“正在处理写操作”。</p><p>读者可以参考以下代码来获取状态值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">spi_flash_status_t</span> status <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>write_in_progress <span class="token operator">=</span> true<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>write_in_progress <span class="token operator">==</span> true<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">statusGet</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-3-qspi读写外部flash" tabindex="-1"><a class="header-anchor" href="#_14-3-qspi读写外部flash" aria-hidden="true">#</a> 14.3 QSPI读写外部Flash</h2><h3 id="_14-3-1-硬件连接" tabindex="-1"><a class="header-anchor" href="#_14-3-1-硬件连接" aria-hidden="true">#</a> 14.3.1 硬件连接</h3><p>使用QSPI连接W25Q64的原理图如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image14.png" alt=""></p><h3 id="_14-3-2-w25q64驱动解析" tabindex="-1"><a class="header-anchor" href="#_14-3-2-w25q64驱动解析" aria-hidden="true">#</a> 14.3.2 W25Q64驱动解析</h3><p>W25Q64是华邦电子的一款支持SPI、扩展SPI（Single/Dual/Quad SPI）接口的外部存储器，存储大小是64M-bit。</p><p>写操作的单位是页，每一页有256 bytes。擦除操作的单位是扇区，每16页为一个扇区，也就是进行擦除操作时，最小的擦除单位是16*256 bytes=4096 bytes。</p><ol><li>W25Q64的指令表</li></ol><p>对于W25Q64的所有操作都是执行对应的指令，因而需要先了解W25Q64支持哪些指令，指令表如下：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image15.PNG" alt=""></p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image16.png" alt=""></p><ul><li>MF7-MF0：制造商ID；</li><li>ID15-ID8：内存类型；</li><li>ID7-ID0：生产ID；</li></ul><ol start="2"><li>读取W25Q64的ID</li></ol><p>从指令表中可以看到读取ID有好几个指令：0xAB/0x90/0x4B/0x9F，也不难看出指令0x9F获取的ID内容是最丰富的，因而常用的就是0x9F。</p><p>对于W25Q64的各个ID的描述，在手册中有说明，如下图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image17.png" alt=""></p><p>如果使用0x9F去读取ID，那么Byte2~Byte4组合起来就是0xEF4017。</p><p>读取JEDEC ID的时序是先发送指令0x9F，然后连续读取3个字节即可。</p><ol start="3"><li>W25Q64的写使能</li></ol><p>要想对W25Q64进行写操作或者擦除操作，必须要先使能对W25Q64的写功能。写使能的指令是0x06，操作时序是主机发送一个0x06给W25Q64即可。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image18.png" alt=""></p><ol start="4"><li>读取W25Q64的状态寄存器</li></ol><p>W25Q64的状态寄存器有2个：register-1和register-2。它们表示W25Q64不同的控制状态，如下表所示：</p><table><thead><tr><th></th><th>S7</th><th>S6</th><th>S5</th><th>S4</th><th>S3</th><th>S2</th><th>S1</th><th>S0</th></tr></thead><tbody><tr><td>register-1</td><td>SRP0</td><td>SEC</td><td>TB</td><td>BP2</td><td>BP1</td><td>BP0</td><td>WEL</td><td>BUSY</td></tr><tr><td></td><td>S15</td><td>S14</td><td>S13</td><td>S12</td><td>S11</td><td>S10</td><td>S9</td><td>S8</td></tr><tr><td>register-2</td><td>R</td><td>R</td><td>R</td><td>R</td><td>R</td><td>R</td><td>QE</td><td>SRP1</td></tr></tbody></table><ul><li>BUSY:Erase or Write in process;1-busy;0-free;</li><li>WEL:Write Enable Latch；</li><li>BP1~BP2：Block Protect;</li><li>TB：Top/Bottom Write Protect;</li><li>SEC：Sector Protect;</li><li>SRP0：Status Register Protect;</li><li>SRP1: Status Register Protect 1;</li><li>QE：Quad Enable;</li></ul><p>指令0x05读取状态寄存器1；指令0x35读取状态寄存器2。</p><ol start="5"><li>W25Q64的数据写操作</li></ol><p>W25Q64有两种写操作：Page Program和Quad Input Page Program。这两者都是页写功能，它们有2个差别：指令不同（Page Program的指令是0x02，而Quad Input Page Program的指令是0x32），使用的数据线不同（Page Program使用1根数据线，Quad Input Page Program使用4跟数据线）。</p><p>下图是Page Program的时序图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image19.png" alt=""></p><p>下图是Quad Input Page Program的时序图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image20.png" alt=""></p><p>不管是Page Program还是Quad Input Page Program，都只能在已经擦除过的地方写数据，并且必须先发送使能指令0x01。</p><p>在页写的时候，如果写入的数据个数少于一页，且和该页已写的数据加起来也不会超过一页的数据量，那么从该页已写数据的末地址开始写入新数据的话不会影响之前已写的数据。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image21.png" alt=""></p><p>当写入的数据加上该页已写入的数据超过一页的数据量，那么超过的数据将会被舍弃，并不会写入到下一页。</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image22.png" alt=""></p><ol start="6"><li>W25Q64的数据擦除操作</li></ol><p>W25Q64有4种擦除方式：扇区擦除(0x20)、32KB块擦除(0x52)、64KB块擦除(0xD8)和整片擦除(0xC7/0x60)。</p><p>使用扇区擦除、块擦除需要在发送指令后，紧接着发送要擦除的扇区地址或者块地址，地址必须是扇区地址或块地址的整数倍。</p><p>当芯片内部执行擦除操纵时，状态标志寄存器1的BUSY会被置1，表示“处于忙状态”。</p><ol start="7"><li>W25Q64的数据读操作</li></ol><p>W25Q64的读操作就有很多种方式了：</p><p>a) Read Data(0x03)</p><p>b) Fast Read Data(0x08)</p><p>c) Fast Read Dual Output(0x3B)</p><p>d) Fast Read Quad Output(0x6B)</p><p>e) Fast Read Dual IO(0xBB)</p><p>f) Fast Read Quad IO(0xEB)</p><p>不管是哪种读方式，都必须是在QSPI总线处于空闲状态下才能执行。</p><p>使用上述6种方式中的哪一种，需要结合QSPI模式来考虑。比如硬件上使用Quad模式，那么为了提高读取速度，软件上也应该使用Quad的方式去读。</p><p>只是在使用Fast Read读取数据的时候，需要根据手册的时序图来设置空读时钟，例如Fast Read Data方式下就需要空读一个字节，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image23.png" alt=""></p><h3 id="_14-3-3-w25q64驱动程序" tabindex="-1"><a class="header-anchor" href="#_14-3-3-w25q64驱动程序" aria-hidden="true">#</a> 14.3.3 W25Q64驱动程序</h3><p>在介绍QSPI的API的时候已经知道，FSP已经封装了直接读写函数、扇区擦除函数和页写函数，本章实验是在这些函数的基础上封装了3个函数：读ID、状态等待、读写任意地址任意大小的数据。</p><ol><li>读取ID</li></ol><p>在分析W25Q64的ID读取到时候就已经清楚，要想读ID，首先要发送一个字节的指令数据，然后读3个字节的数据即可。函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">W25QDrvReadID</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> cmd <span class="token operator">=</span> <span class="token number">0x9F</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> id<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directWrite</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directRead</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>id<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ID<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第05行：使用直接写函数发送cmd指令，且表示紧跟着会读取数据；</li><li>第06行：读取3个字节的ID；</li><li>第07行：将ID组合以便当作返回值提供给调用者；</li></ul><ol start="2"><li>等待擦除或写数据完成</li></ol><p>在擦除或者写数据的时候，需要在QSPI总线空闲地时候进行，也就是状态寄存器1的BUSY位为0才可，因而设计了如下的等待函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spi_flash_status_t</span> status <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>write_in_progress <span class="token operator">=</span> true<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>write_in_progress <span class="token operator">==</span> true<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">statusGet</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>读取数据</li></ol><p>本章使用的数据读取方式就是普通的QSPI Read Data方式，使用的指令是0x03。根据它的时序图，需要先用直接写函数发送1个字节的指令，再发送3个字节的地址，紧接着读取n字节的数据，因而封装了如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">W25QDrvRead</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwAddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dwAddr <span class="token operator">=</span> QSPI_DEVICE_START_ADDRESS <span class="token operator">+</span> dwAddr<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cmd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>  <span class="token comment">// read data command</span>
    cmd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dwAddr<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">;</span>
    cmd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dwAddr<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">;</span>
    cmd<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dwAddr<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token punctuation">;</span>
    <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directWrite</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">directRead</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回独处数据的个数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>dwSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第03行：因为QSPI接的外部存储器在内存中的映射起始地址是0x60000000，为了方便使用，调用者在调用读取数据的函数时只需要传入0~64MB的地址值即可，在此函数内部做内存映射偏移；</li><li>第09行：需要等待QSPI总线空闲时才能读；</li><li>第10行：使用直接写函数发送4字节数据：指令和地址，并且表示紧接着会读取数据；</li><li>第16行：使用直接读函数从dwAddr处读取dwSize个字节的数据，存到buf；</li></ul><ol start="4"><li>写数据</li></ol><p>要想在任意地址写入任意大小的数据，就稍微有点复杂了。需要考虑以下几个问题：</p><p>a) 要写入到这片区域是否擦除了？要擦除几个扇区？ b) 要写入到这个地址是否和页地址对齐？ c) 要写入到数据个数是否超过一页？ d) 数据个数超过一页又该如何写？</p><p>考虑到这些问题，本章设计了如下图这样的流程图：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image24.png" alt=""></p><p>再根据此流程图设计了下面的函数：可以在任意地址处写入任意个数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">W25QDrvWrite</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwAddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 第1步 擦除扇区 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwOffsetAddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwStartAddr <span class="token operator">=</span> dwAddr<span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwSectorCount <span class="token operator">=</span> <span class="token punctuation">(</span>dwSize <span class="token operator">+</span> dwAddr<span class="token operator">%</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4096</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dwSectorCount<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nAddr <span class="token operator">=</span> dwStartAddr <span class="token operator">+</span> dwOffsetAddr<span class="token punctuation">;</span>
        <span class="token class-name">fsp_err_t</span>  err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">erase</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>QSPI_DEVICE_START_ADDRESS<span class="token operator">+</span>nAddr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dwOffsetAddr <span class="token operator">+=</span> <span class="token number">4096</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* 第2部 分页写 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwPageCount <span class="token operator">=</span> <span class="token punctuation">(</span>dwSize <span class="token operator">+</span> dwAddr<span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果从起始地址开始偏移dwSize都没有超过一页就从起始地址开始写dwSize字节</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dwPageCount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>QSPI_DEVICE_START_ADDRESS<span class="token operator">+</span>dwAddr<span class="token punctuation">)</span><span class="token punctuation">,</span> dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nAddr <span class="token operator">=</span> dwAddr<span class="token punctuation">;</span>
        <span class="token comment">// 如果超过了一页则先将起始地址所在页填充满</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwFirstBytes <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">-</span> dwAddr<span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算出写满起始地址所在页后剩余要写的数据个数</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dwRestBytes <span class="token operator">=</span> dwSize <span class="token operator">-</span> dwFirstBytes<span class="token punctuation">;</span>
        <span class="token comment">// 填充起始地址所在页</span>
        <span class="token class-name">fsp_err_t</span> err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>QSPI_DEVICE_START_ADDRESS<span class="token operator">+</span>nAddr<span class="token punctuation">)</span><span class="token punctuation">,</span> dwFirstBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将W25Q的地址偏移到下一页的起始地址</span>
        nAddr <span class="token operator">+=</span> dwFirstBytes<span class="token punctuation">;</span>
        <span class="token comment">// 要写入的数据buff地址也要更新</span>
        buf <span class="token operator">+=</span> dwFirstBytes<span class="token punctuation">;</span>
        <span class="token comment">// 开始将剩下的数据写入到W25Q</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>dwRestBytes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 剩下的数据个数不满一页的话</span>
            <span class="token comment">// 最后一次就将剩下的数据全部写入到最后要写的这一页</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dwRestBytes <span class="token operator">&lt;=</span> <span class="token number">256</span><span class="token punctuation">)</span>
                nBytes <span class="token operator">=</span> dwRestBytes<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                nBytes <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>

            err <span class="token operator">=</span> g_qspi0<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_qspi0<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>QSPI_DEVICE_START_ADDRESS<span class="token operator">+</span>nAddr<span class="token punctuation">)</span><span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>FSP_SUCCESS <span class="token operator">!=</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function:%s\\tLine:%d\\r\\n&quot;</span><span class="token punctuation">,</span> __FUNCTION__<span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">W25QDrvWaitXfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// W25Q地址和buf地址偏移，剩余个数递减刚才写入的数据个数</span>
            nAddr <span class="token operator">+=</span> nBytes<span class="token punctuation">;</span>
            buf <span class="token operator">+=</span> nBytes<span class="token punctuation">;</span>
            dwRestBytes <span class="token operator">-=</span> nBytes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回写入数据的个数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>dwSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-3-4-测试程序" tabindex="-1"><a class="header-anchor" href="#_14-3-4-测试程序" aria-hidden="true">#</a> 14.3.4 测试程序</h3><p>本章使用QSPI驱动测试W25Q64，就是读取它的ID，以及在随机地址处写入随机大小的数据进去，然后再读出比较，测试代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TEST_SIZE</span>       <span class="token expression"><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span></span></span>
<span class="token class-name">uint8_t</span> wBuf<span class="token punctuation">[</span>TEST_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> rBuf<span class="token punctuation">[</span>TEST_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">W25QAppTest</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">W25QDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Device ID: 0x%.8x\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">W25QDrvReadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>TEST_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        wBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">uint32_t</span> dwAddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> dwSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>TEST_SIZE<span class="token punctuation">;</span>
    <span class="token function">W25QDrvWrite</span><span class="token punctuation">(</span>dwAddr<span class="token punctuation">,</span> wBuf<span class="token punctuation">,</span> dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25QDrvRead</span><span class="token punctuation">(</span>dwAddr<span class="token punctuation">,</span> rBuf<span class="token punctuation">,</span> dwSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> wCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>dwSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>wBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> rBuf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            wCnt<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\tRW Addr: 0x%.4x\\r\\n\\tRW Size: %d\\r\\n\\tError count: %d\\r\\n&quot;</span><span class="token punctuation">,</span> dwAddr<span class="token punctuation">,</span> dwSize<span class="token punctuation">,</span> wCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-3-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_14-3-5-上机实验" aria-hidden="true">#</a> 14.3.5 上机实验</h3><p>在hal_entry.c中的hal_enter()函数调用测试函数，例如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;app.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_systick.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_w25q.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;drv_uart.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hal_data.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token function">SystickInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">UARTDrvInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">W25QAppTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将编译出来的二进制可执行文件烧录到处理器中运行，然后在串口助手中可以看到如下图这样的调试打印信息：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-14/image25.png" style="zoom:150%;"><p>读者自行测试的时候，读写的地址和数据个数可能会和本书的不一样。</p>`,203),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chapter14.html.vue"]]);export{r as default};
