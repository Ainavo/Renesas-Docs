import{_ as n,o as s,c as a,e as t}from"./app-829098b3.js";const p={},e=t(`<h1 id="第7章-uart" tabindex="-1"><a class="header-anchor" href="#第7章-uart" aria-hidden="true">#</a> 第7章 UART</h1><p>本章目标</p><ul><li>使用RASC快速操作UART</li><li>理解它的内部流程，改进程序</li></ul><h2 id="_7-1-sci-uart模块的使用" tabindex="-1"><a class="header-anchor" href="#_7-1-sci-uart模块的使用" aria-hidden="true">#</a> 7.1 sci_uart模块的使用</h2><h3 id="_7-1-1-使用rasc配置" tabindex="-1"><a class="header-anchor" href="#_7-1-1-使用rasc配置" aria-hidden="true">#</a> 7.1.1 使用RASC配置</h3><p>本节的源码是“0701_UART”。</p><p>使用RASC配置UART时，需要进行两方面的配置：引脚配置、UART本身的配置。</p><p>首先进行引脚的配置，先打开原理图确认使用哪一个UART，比如引脚使用TXD0/RXD0、TXD1/RXD1、……中的哪一个，电路图如下，它使用TXD7/RXD7，记住这个编号7（TXDn/RXDn使用SCIn）：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image1.png" style="zoom:150%;"><p>然后在RASC配置界面点击Pins页面，在左侧找到“Peripherals &gt; Connectivity:SCI”，点击里面的SCI7，配置它工作于UART模式、选择引脚为P613、P614，如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image2.png" alt=""></p><p>配置好引脚后，就需要配置UART本身了。点击Stack页面，点击“New Stack”然后找到“Connectivity &gt; UART(r_sci_uart)”，添加新的Stack。如下图操作：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image3.png" alt=""></p><p>下一步要要配置新添加的r_sci_uart，如下图所示，先选中刚新建的r_sci_uart，点击“Properties”，然后设置：</p><ul><li><p>在“General”下，设置变量名称，比如“g_uart7”；选择对应的UART通道，比如把Channel设置为7，然后设置数据位（Data Bits）为8、检验位（Parity）为None、停止位（Stop Bits）为1。</p></li><li><p>在“Baud”下，设置波特率（Baud Rate）为115200。</p></li><li><p>在“Flow Control”下，不要修改默认配置，如果修改了需要按图改回去</p></li><li><p>在“Interrupts”下，指定“Callback”为“uart7_callback”（这个函数需要我们实现）</p></li><li><p>在“Pins”下，确认TXD7、TXD6分别为P613、P614，跟前面在“Pins”页面的设置保持一致。</p></li></ul><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image4.png" alt=""></p><p>配置好引脚和UART后，点击右上角的“Generate Project Content”就会生成代码。</p><h3 id="_7-1-2-配置信息解读" tabindex="-1"><a class="header-anchor" href="#_7-1-2-配置信息解读" aria-hidden="true">#</a> 7.1.2 配置信息解读</h3><p>使用RASC配置UART后，生成了引脚配置信息、UART本身的配置信息。</p><ol><li>引脚配置信息</li></ol><p>该信息会在0701_UART\\ra_gen\\pin_data.c文件里生成。</p><p>在RASC里配置的每一个引脚，都会生成一个ioport_pin_cfg_t数组项，里面的内容跟配置时选择的参数一致。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">ioport_pin_cfg_t</span> g_bsp_pin_cfg_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_06_PIN_13<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SCI1_3_5_7_9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>pin <span class="token operator">=</span> BSP_IO_PORT_06_PIN_14<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>pin_cfg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_CFG_PERIPHERAL_PIN 
<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span> IOPORT_PERIPHERAL_SCI1_3_5_7_9<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第3~6行被用来配置P613;</p></li><li><p>第7~10行被用来配置P614。它们都被配置为“IOPORT_CFG_PERIPHERAL_PIN”，也就是要连接到芯片的其它模块（非GPIO）;</p></li></ul><p>连接到哪个模块呢？另一个参数“IOPORT_PERIPHERAL_SCI1_3_5_7_9)”表示它们被连接到SCI模块。</p><ol start="2"><li>UART配置信息</li></ol><p>该信息会在0701_UART\\ra_gen\\hal_data.c文件里生成。</p><p>在RASC里指定了UART使用哪个SCI通道、指定了它的数据格式（数据位/校验位/停止位）、指定了波特率等信息，这些配置信息都被放入一个uart_cfg_t结构体，部分代码摘录如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">uart_cfg_t</span> g_uart7_cfg <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>channel             <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>data_bits           <span class="token operator">=</span> UART_DATA_BITS_8<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parity              <span class="token operator">=</span> UART_PARITY_OFF<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>stop_bits           <span class="token operator">=</span> UART_STOP_BITS_1<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_callback          <span class="token operator">=</span> uart7_callback<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体g_uart7_cfg里引用到了另一个结构体g_uart7_cfg_extend，里面含有时钟、FIFO、流量控制等信息，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token class-name">sci_uart_extended_cfg_t</span> g_uart7_cfg_extend <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span>clock                <span class="token operator">=</span> SCI_UART_CLOCK_INT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_edge_start          <span class="token operator">=</span> SCI_UART_START_BIT_FALLING_EDGE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>noise_cancel         <span class="token operator">=</span> SCI_UART_NOISE_CANCELLATION_DISABLE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>rx_fifo_trigger        <span class="token operator">=</span> SCI_UART_RX_FIFO_TRIGGER_MAX<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>p_baud_setting         <span class="token operator">=</span> <span class="token operator">&amp;</span>g_uart7_baud_setting<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>flow_control           <span class="token operator">=</span> SCI_UART_FLOW_CONTROL_RTS<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>省略内容<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第04~06行指定了数据格式，第07行指定了用户提供的回调函函数。</p></li><li><p>第12~15行指定了时钟等硬件信息;</p></li><li><p>还在第16行引用了另一个结构体g_uart7_baud_setting。在RASC里配置了波特率为115200，RASC会计算出各个寄存器的值，存放在结构体g_uart7_baud_setting里，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">baud_setting_t</span>    g_uart7_baud_setting <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Baud rate calculated with 0.469% error. */</span> 
    <span class="token punctuation">.</span>semr_baudrate_bits_b<span class="token punctuation">.</span>abcse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>semr_baudrate_bits_b<span class="token punctuation">.</span>abcs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>semr_baudrate_bits_b<span class="token punctuation">.</span>bgdm <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>cks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>brr <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>mddr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span> <span class="token number">256</span><span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>semr_baudrate_bits_b<span class="token punctuation">.</span>brme <span class="token operator">=</span> false
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_7-1-3-api接口" tabindex="-1"><a class="header-anchor" href="#_7-1-3-api接口" aria-hidden="true">#</a> 7.1.3 API接口</h3><p>在0701_UART\\ra\\fsp\\inc\\api\\r_uart_api.h中定义了uart模块的接口，它定义了一个结构体类型uart_api_t，内容如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_uart_api</span>
<span class="token punctuation">{</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uart_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                       <span class="token class-name">uint8_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_dest<span class="token punctuation">,</span> 
                       <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                        <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> 
                        <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> baudSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                          <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_baudrate_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> infoGet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uart_info_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> communicationAbort<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> 
                                     <span class="token class-name">uart_dir_t</span> communication_to_abort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> callbackSet<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">,</span> 
                              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_context<span class="token punctuation">,</span> 
                              <span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_callback_memory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> readStop<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span> remaining_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_api_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在具体的C文件中，需要实现一个uart_api_t结构体，比如在r_sci_uart.c里实现了如下结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* UART on SCI HAL API mapping for UART interface */</span>
<span class="token keyword">const</span> <span class="token class-name">uart_api_t</span> g_uart_on_sci <span class="token operator">=</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span>open        <span class="token operator">=</span> R_SCI_UART_Open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>close        <span class="token operator">=</span> R_SCI_UART_Close<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write        <span class="token operator">=</span> R_SCI_UART_Write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read        <span class="token operator">=</span> R_SCI_UART_Read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>infoGet       <span class="token operator">=</span> R_SCI_UART_InfoGet<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>baudSet       <span class="token operator">=</span> R_SCI_UART_BaudSet<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>communicationAbort <span class="token operator">=</span> R_SCI_UART_Abort<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>callbackSet     <span class="token operator">=</span> R_SCI_UART_CallbackSet<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>readStop      <span class="token operator">=</span> R_SCI_UART_ReadStop<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用UART收发数据时，可以调用结构体g_uart_on_sci里的各个函数指针，也可以直接调用r_sci_uart.c里实现的各个函数（比如R_SCI_UART_Open、R_SCI_UART_Read）。</p><h3 id="_7-1-4-中断回调函数" tabindex="-1"><a class="header-anchor" href="#_7-1-4-中断回调函数" aria-hidden="true">#</a> 7.1.4 中断回调函数</h3><p>操作一个UART引脚时，要先打开它（open），open函数会配置UART；然后再调用read、write函数读、写串口。需要注意的是，sci_uart模块里的读、写函数，只是“启动”读、写功能，这些函数返回时并不表示读、写已经完成。后续的读、写操作是由中断函数实现的。在传输过程中，中断函数会调用回调函数来处理各种状态（传输完成？出错？）。</p><p>回调函数原型在0701_UART\\ra_gen\\hal_data.h中定义，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">uart7_callback</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的p_args参数是uart_callback_args_t结构体类型，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_uart_callback_arg</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span>     channel<span class="token punctuation">;</span>              <span class="token comment">/// 哪一个UART通道</span>
    <span class="token class-name">uart_event_t</span> event<span class="token punctuation">;</span>                <span class="token comment">/// event，什么原因</span>

    <span class="token comment">/** 当event是UART_EVENT_RX_CHAR或UART_EVENT_ERR_PARITY时，data为刚接收到的字符
     * 当event是UART_EVENT_ERR_FRAMING或UART_EVENT_ERR_OVERFLOW时，data未被使用 */</span>
    <span class="token class-name">uint32_t</span>     data<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_context<span class="token punctuation">;</span>            <span class="token comment">///&lt; Context provided to user during callback</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_callback_args_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调函数被调用时，参数里的event表示原因，它是一个uart_event_t枚举类型，取值如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** UART Event codes */</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">e_sf_event</span>
<span class="token punctuation">{</span>
    UART_EVENT_RX_COMPLETE   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// 使用read函数启动接收后，接收完毕</span>
    UART_EVENT_TX_COMPLETE   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// 发送完毕</span>
    UART_EVENT_RX_CHAR       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// 未调用read启动接收，但是接收到了数据</span>
    UART_EVENT_ERR_PARITY    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// 校验错误</span>
    UART_EVENT_ERR_FRAMING   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// &lt; Mode fault error event</span>
    UART_EVENT_ERR_OVERFLOW  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// FIFO溢出</span>
    UART_EVENT_BREAK_DETECT  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// &lt; Break detect error event</span>
    UART_EVENT_TX_DATA_EMPTY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/// 最后一个字节已经发送出去了，但是还没发送完毕</span>
<span class="token punctuation">}</span> <span class="token class-name">uart_event_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于接收，有2个event：UART_EVENT_RX_COMPLETE、UART_EVENT_RX_CHAR。前者被调用的时机是：调用read后接收到所有数据时；后者被调用的时机是：未调用read函数，但是接收到了数据。</li><li>对于发送，有2个event：UART_EVENT_TX_DATA_EMPTY、UART_EVENT_TX_COMPLETE。以发送2个字节的数据为例，前者被调用的时机是：第1个字节已经成功发送完毕，第2个字节已经被移入发送器但是还没发送完毕；后者被调用的时机是：这2个字节都发送完毕。前者先被调用，在“最后一个字节被发送，但是未发送完毕”时被调用；后者在“最后一个字节也完全发送完毕后”被调用。</li></ul><p>对于普通的读写操作，可以在回调函数里设置状态标记，用来表示读、写是否已经完成。这样，使用read、write函数启动读、写操作后，就可以轮询这些状态以等待操作完成。示例代码在0701_UART\\src\\hal_entry.c文件中，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> g_uart7_tx_complete <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> g_uart7_rx_complete <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart7_callback</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> UART_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            g_uart7_tx_complete  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> UART_EVENT_RX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            g_uart7_rx_complete <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">uart7_wait_for_tx</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_uart7_tx_complete<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_uart7_tx_complete <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">uart7_wait_for_rx</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_uart7_rx_complete<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_uart7_rx_complete <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第8~12行，在回调函数里设置全局变量g_uart7_tx_complete，表示发送完毕。用户程序在调用write启动UART发送后，就可以调用第25行的uart7_wait_for_tx以等待发送完毕。</li><li>第13~17行，在回调函数里设置全局变量g_uart7_rx_complete，表示接收完毕。用户程序在调用read启动UART接收后，就可以调用第31行的uart7_wait_for_rx以等待接收完毕。</li></ul><h3 id="_7-1-5-api接口用法" tabindex="-1"><a class="header-anchor" href="#_7-1-5-api接口用法" aria-hidden="true">#</a> 7.1.5 API接口用法</h3><p>sci_uart模块的接口在文件0701_UART\\ra\\fsp\\inc\\api\\r_uart_api.h中定义。</p><ol><li>打开UART设备</li></ol><p>此函数用于配置UART，并且标记转态为“已经打开”。函数原型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uart_cfg_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数指针有两个参数，p_ctrl是一个uart_ctrl_t指针，它的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token class-name">uart_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以在r_uart_api.h文件里，p_ctrl实际上是一个void指针，它可以指向任意类型的数据类型，这是一种良好的编程思想：封装内部实现的细节。在r_sci_uart.h里，这个参数实际的类型是sci_uart_instance_ctrl_t结构体，定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/** UART instance control block. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_sci_uart_instance_ctrl</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Parameters to control UART peripheral device */</span>
    <span class="token class-name">uint8_t</span>  fifo_depth<span class="token punctuation">;</span>               <span class="token comment">// FIFO深度</span>
    <span class="token class-name">uint8_t</span>  rx_transfer_in_progress<span class="token punctuation">;</span>  <span class="token comment">// 1表示当前正在处理一个“接收传输”</span>
    ……
    <span class="token class-name">uint32_t</span> open<span class="token punctuation">;</span>                     <span class="token comment">// 表示状态，当前UART是否已经被打开、被配置</span>
    ……
    <span class="token comment">/* 发数据时的源数据buffer */</span>
    <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_tx_src<span class="token punctuation">;</span>
    <span class="token comment">/* 还有多少数据未发送 */</span>
    <span class="token class-name">uint32_t</span> tx_src_bytes<span class="token punctuation">;</span>
    <span class="token comment">/* 收数据时的目的buffer */</span>
    <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> p_rx_dest<span class="token punctuation">;</span>
    <span class="token comment">/* 还有多少数据未接收 */</span>
    <span class="token class-name">uint32_t</span> rx_dest_bytes<span class="token punctuation">;</span>
    <span class="token comment">/* 这个UART通道的寄存器基地址 */</span>
    R_SCI0_Type <span class="token operator">*</span> p_reg<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span> p_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回调函数</span>
    ……
<span class="token punctuation">}</span> <span class="token class-name">sci_uart_instance_ctrl_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体sci_uart_instance_ctrl_t的open成员被用来表示串口的状态，其他成员被用来实现读、写函数。比p_tx_src指向数据buffer，tx_src_bytes等于要发送的数据长度，每发送完n个数据中断函数里会把tx_src_bytes减去n，当中断函数发现tx_src_bytes等于0时，就会调用p_callback（它指向RASC里指定的回调函数）。</p><p>第二个参数p_cfg是一个uart_cfg_t结构体指针，在《7.1.2配置信息解读》里有详细描述。</p><ol start="2"><li>关闭UART设备</li></ol><p>关闭UART设备的函数指针是close，传入的参数是uart_ctrl_t结构体变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数指针在使用FSP生成到工程中会指向R_SCI_UART_Close，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token function">R_SCI_UART_Close</span> <span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_api_ctrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">sci_uart_instance_ctrl_t</span> <span class="token operator">*</span> p_ctrl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">sci_uart_instance_ctrl_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> p_api_ctrl<span class="token punctuation">;</span>
    ……
    <span class="token comment">/* 修改状态位0，表示已经关闭 */</span>
    p_ctrl<span class="token operator">-&gt;</span>open <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
    <span class="token comment">/* 禁止UART通道: 关闭中断、关闭时钟等 */</span>
    p_ctrl<span class="token operator">-&gt;</span>p_reg<span class="token operator">-&gt;</span>SCR <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>
    ……
    <span class="token comment">/* 禁止中断 */</span>
    <span class="token function">R_BSP_IrqDisable</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>p_cfg<span class="token operator">-&gt;</span>rxi_irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">R_BSP_IrqDisable</span><span class="token punctuation">(</span>p_ctrl<span class="token operator">-&gt;</span>p_cfg<span class="token operator">-&gt;</span>eri_irq<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 关闭这个UART通道的电源 */</span>
    <span class="token function">R_BSP_MODULE_STOP</span><span class="token punctuation">(</span>FSP_IP_SCI<span class="token punctuation">,</span> p_ctrl<span class="token operator">-&gt;</span>p_cfg<span class="token operator">-&gt;</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ……<span class="token punctuation">;</span>
    <span class="token keyword">return</span> FSP_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>发送数据</li></ol><p>使用write函数来“启动”发送，函数返回时并不表示数据已经全部发送完毕。原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">fsp_err_t</span> <span class="token punctuation">(</span><span class="token operator">*</span> write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">uart_ctrl_t</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_ctrl<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p_src<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>读取数据</li></ol><p>使用read函数来“启动”接收，函数返回时并不表示数据已经全部接收完毕。原型如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fsp_err_t (* read)(uart_ctrl_t * const p_ctrl,
                   uint8_t * const p_dest, 
                   uint32_t const bytes);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在调用read函数来“启动接收”之前，UART已经接收到了数据，中断函数也会调用回调函数（event为UART_EVENT_RX_CHAR）。</p><h2 id="_7-2-uart读写实验" tabindex="-1"><a class="header-anchor" href="#_7-2-uart读写实验" aria-hidden="true">#</a> 7.2 UART读写实验</h2><p>本实验的源码是“0701_UART”，使用串口工具给开发板发送字符，开发板接收到后把字符加1，再发给PC。</p><h3 id="_7-2-1-配置uart" tabindex="-1"><a class="header-anchor" href="#_7-2-1-配置uart" aria-hidden="true">#</a> 7.2.1 配置UART</h3><p>参考《7.1.1使用RASC配置》进行配置，参考《7.1.4中断回调函数》添加代码。</p><h3 id="_7-2-2-应用程序" tabindex="-1"><a class="header-anchor" href="#_7-2-2-应用程序" aria-hidden="true">#</a> 7.2.2 应用程序</h3><p>在hal_entry.c文件中的hal_entry()函数里添加如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* TODO: add your own code here */</span>
<span class="token class-name">fsp_err_t</span> err<span class="token punctuation">;</span>
<span class="token class-name">uint8_t</span> c<span class="token punctuation">;</span>

<span class="token comment">/* 配置串口 */</span>
err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_uart7<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 启动发送字符 */</span>
g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token string">&quot;100ask\\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 等待发送完毕 */</span>
<span class="token function">uart7_wait_for_tx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* 启动接收字符 */</span>
    err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 等待接收完毕 */</span>
        <span class="token function">uart7_wait_for_rx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        c<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">/* 加1 */</span>

        <span class="token comment">/* 启动发送字符 */</span>
        g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 等待发送完毕 */</span>
        <span class="token function">uart7_wait_for_tx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-3-上机实验" tabindex="-1"><a class="header-anchor" href="#_7-2-3-上机实验" aria-hidden="true">#</a> 7.2.3 上机实验</h3><p>先使用串口工具打开开发板自带的USB串口，波特率设置为115200，数据位为8，停止位为1，无校验位，不使用流控。</p><p>程序运行后，在串口工具里可以看到打印出“100ask”，然后输入“1234abc”会显示出“2345bcd”，示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>100ask
2345bcd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-3-stdio实验" tabindex="-1"><a class="header-anchor" href="#_7-3-stdio实验" aria-hidden="true">#</a> 7.3 stdio实验</h2><p>本实验的源码是“0702_stdio”，它的功能是：使用printf、scanf。</p><h3 id="_7-3-1-实现思路" tabindex="-1"><a class="header-anchor" href="#_7-3-1-实现思路" aria-hidden="true">#</a> 7.3.1 实现思路</h3><p>printf、scanf本身的代码来自于C库，或者MicroLIB库。要在串口上使用printf、scanf，实现串口相关的fputc、fgetc函数即可。</p><p>在使用scanf时，使用“回显功能”体验更好。“回显”就是：在PC机上使用串口工具发送一个字符给开发板，开发板接收到后把同样的字符发回给PC机，这样串口工具就会显示出这个字符。如果不使用回显功能，我们在串口工具上输入时没有任何显示，相当于“盲打”。</p><p>如何实现“回显”？在fgetc函数里，接收到PC发来的字符后，再使用fputc把它发送给PC即可。如果发现接收到回车字符（&#39;\\r’），则还需要发送换行字符（&#39;\\n’），否则我们在串口工具上按下回车键时，光标只会回到行首而不会调到下一行。</p><h3 id="_7-3-2-编写程序" tabindex="-1"><a class="header-anchor" href="#_7-3-2-编写程序" aria-hidden="true">#</a> 7.3.2 编写程序</h3><p>“0702_stdio”是在“0701_UART”的基础上修改的。在src\\hal_entry.c中实现了fputc、fgetc函数，代码如下：</p><p>/* 重写这个函数,重定向printf */</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>

    <span class="token comment">/* 启动发送字符 */</span>
    g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 等待发送完毕 */</span>
    <span class="token function">uart7_wait_for_tx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 重写这个函数,重定向scanf */</span>
<span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> ch<span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>

    <span class="token comment">/* 启动接收字符 */</span>
    g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 等待接收完毕 */</span>
    <span class="token function">uart7_wait_for_rx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 回显 */</span>
    <span class="token punctuation">{</span>
        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 回车之后加换行 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码如下，从串口上读入两个整数，求和后输出：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token class-name">fsp_err_t</span> err<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>

    <span class="token comment">/* 配置串口 */</span>
    err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_uart7<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;www.100ask.net\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter two number:\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d+%d=%d\\r\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-3-上机实验" tabindex="-1"><a class="header-anchor" href="#_7-3-3-上机实验" aria-hidden="true">#</a> 7.3.3 上机实验</h3><p>在Keil工程里，确保选择了MicroLIB，如下图确认：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image5.png" alt=""></p><p>程序烧写、运行后，在串口工具上看到“Please enter two number:”时，输入一个数值并回车，再输入第2个数值并回车，即可看到效果。如下图：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>www<span class="token punctuation">.</span><span class="token number">100</span>ask<span class="token punctuation">.</span>net
Please enter two number<span class="token operator">:</span>
<span class="token number">12</span>
<span class="token number">34</span>
<span class="token number">12</span><span class="token operator">+</span><span class="token number">34</span><span class="token operator">=</span><span class="token number">46</span>
Please enter two number<span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-4-接收大量数据" tabindex="-1"><a class="header-anchor" href="#_7-4-接收大量数据" aria-hidden="true">#</a> 7.4 接收大量数据</h2><p>本实验的源码是“0703_circle_buffer”，它的能接收大量的串口数据。板子使用串口连接其他模块（比如WIFI模块）时，这些模块有可能突然发来大量的数据。怎样确保数据不丢失？</p><h3 id="_7-4-1-问题与解决思路" tabindex="-1"><a class="header-anchor" href="#_7-4-1-问题与解决思路" aria-hidden="true">#</a> 7.4.1 问题与解决思路</h3><p>使用sci_uart模块接收串口数据时，有两种方法：</p><ol><li>程序调用read函数“启动接收”，中断回调函数里确定参数event等于UART_EVENT_RX_COMPLETE，表示接收到指定数目的数据了</li><li>程序没有调用read函数，中断回调函数确定参数event等于UART_EVENT_RX_CHAR，然后保存数据</li></ol><p>假设函数A读取串口数据、处理，示例代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 启动接收字符 */</span>
        err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 等待接收完毕 */</span>
        <span class="token function">uart7_wait_for_rx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* 处理 */</span>
        <span class="token function">process_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑这个场景：</p><ul><li>第6行代码启动“接收”，在第8行等待接收成功</li><li>第10行的process_data函数非常耗时</li><li>在第10行的函数执行期间，外接的模块继续发来大量的数据，这个时候就会出现问题</li></ul><p>中断程序得到其他字符时会调用回调函数：event为UART_EVENT_RX_CHAR，而不是UART_EVENT_RX_COMPLETE：因为process_data未执行完，导致第6行的代码还没有被调用。</p><p>所以，我们需要在回调函数里处理event为UART_EVENT_RX_CHAR的情况：以存储“来不及处理的字符”。既然如此，干脆把所有接收到的字符存入一个buffer，同时修改fgetc让它直接返回buffer里的数据。</p><p>对于这个buffer，中断函数的回调函数从UART得到数据后写入buffer，程序从中读取数据，非常适合使用环形缓冲区。</p><h3 id="_7-4-2-环形缓冲区" tabindex="-1"><a class="header-anchor" href="#_7-4-2-环形缓冲区" aria-hidden="true">#</a> 7.4.2 环形缓冲区</h3><p>环形缓冲区特别适合这种场景：</p><ul><li>一方写buffer</li><li>另一方读buffer。</li></ul><p>环形缓冲区实际上还是一维数组，假设有N个数组项，从第0个数组项开始遍历，访问完第N-1个数组项后，再从0开始——这就是“环形”的含义，如下图所示：</p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image6.png" style="zoom:150%;"><p>环形缓冲区的工作原理如下图所示：</p><p><img src="http://photos.100ask.net/renesas-docs/DShanMCU_RA6M5/object_oriented_module_programming_method_in_ARM_embedded_system/chapter-7/image7.png" alt=""></p><p>① 有读位置、写位置：r、w，它们表示“下一个要读的位置”、“下一个要写的位置”。初始值都是0。 ② 写数据时：把数据写入buffer[w]，然后调整w指向下一个位置（当w越界后要从0开始）。 ③ 读数据时：从buffer[r]读出数据，然后调整r指向下一个位置（当r越界后要从0开始）。 ④ 判断buffer为空：r等于w时表示空 ⑤ 判断buffer为满：“下一个写位置”等于当前读位置</p><h3 id="_7-4-3-环形缓冲区编程" tabindex="-1"><a class="header-anchor" href="#_7-4-3-环形缓冲区编程" aria-hidden="true">#</a> 7.4.3 环形缓冲区编程</h3><p>以面向对象的编程思想，针对环形缓冲区先定义一个结构体类型，代码在0703_circle_buffer\\src\\circle_buf.h文件中，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">circle_buf</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> r<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> w<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> max_len<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span>  <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    
    <span class="token class-name">int32_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>put<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle_buf</span> <span class="token operator">*</span>pcb<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>get<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle_buf</span> <span class="token operator">*</span>pcb<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token class-name">circle_buf_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第2~5行分别是读位置、写位置、buffer大小、buffer指针。</li><li>第6、7行是两个函数指针：写buffer、读buffer。</li></ul><p>在0703_circle_buffer\\src\\circle_buf.c中，定义并初始化了一个环形缓冲区结构体，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">uint8_t</span> rx_buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">circle_buf_t</span> g_rx_buf<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">circlebuf_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    g_rx_buf<span class="token punctuation">.</span>r <span class="token operator">=</span> g_rx_buf<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    g_rx_buf<span class="token punctuation">.</span>buffer  <span class="token operator">=</span> rx_buf<span class="token punctuation">;</span>
    g_rx_buf<span class="token punctuation">.</span>max_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rx_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    g_rx_buf<span class="token punctuation">.</span>get <span class="token operator">=</span> circlebuf_get<span class="token punctuation">;</span>
    g_rx_buf<span class="token punctuation">.</span>put <span class="token operator">=</span> circlebuf_put<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第01行定义了一个buffer，在第50行里它被赋给环形缓冲区结构体。</li><li>第02行定义了一个全局的环形缓冲区结构体变量g_rx_buf，以后会直接使用这个变量。</li><li>第04行的circlebuf_init函数被用来初始化g_rx_buf。</li><li>第09、10行给g_rx_buf设置了两个函数，这是环形缓冲区的核心操作函数。</li></ul><ol><li><p>写环形缓冲区的代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">int32_t</span> <span class="token function">circlebuf_put</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle_buf</span> <span class="token operator">*</span>pcb<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> next_w<span class="token punctuation">;</span>

    <span class="token comment">/* 计算&quot;下一个写位置的下一个&quot;, 如果越界就要设置为0 */</span>
    next_w <span class="token operator">=</span> pcb<span class="token operator">-&gt;</span>w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next_w <span class="token operator">==</span> pcb<span class="token operator">-&gt;</span>max_len<span class="token punctuation">)</span>
        next_w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* 未满? */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next_w <span class="token operator">!=</span> pcb<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* 写入数据 */</span>
        pcb<span class="token operator">-&gt;</span>buffer<span class="token punctuation">[</span>pcb<span class="token operator">-&gt;</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>

        <span class="token comment">/* 设置下一个写位置 */</span>
        pcb<span class="token operator">-&gt;</span>w <span class="token operator">=</span> next_w<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>读环形缓冲区的代码</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">static</span> <span class="token class-name">int32_t</span> <span class="token function">circlebuf_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">circle_buf</span> <span class="token operator">*</span>pcb<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>pv<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
     <span class="token comment">/* 不空? */</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>pcb<span class="token operator">-&gt;</span>w <span class="token operator">!=</span> pcb<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         <span class="token comment">/* 读出数据 */</span>
         <span class="token operator">*</span>pv <span class="token operator">=</span> pcb<span class="token operator">-&gt;</span>buffer<span class="token punctuation">[</span>pcb<span class="token operator">-&gt;</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>

         <span class="token comment">/* 计算&quot;下一个读位置&quot;, 如果越界就要设置为0 */</span>
         pcb<span class="token operator">-&gt;</span>r<span class="token operator">++</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>pcb<span class="token operator">-&gt;</span>r <span class="token operator">==</span> pcb<span class="token operator">-&gt;</span>max_len<span class="token punctuation">)</span>
             pcb<span class="token operator">-&gt;</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_7-4-4-改造程序" tabindex="-1"><a class="header-anchor" href="#_7-4-4-改造程序" aria-hidden="true">#</a> 7.4.4 改造程序</h3><p>使用环形缓冲区后，应用程序无需调用UART的read函数来“启动读取”，只需要读取环形缓冲区即可。</p><p>谁给环形缓冲区提供数据？板子接收到串口数据时，中断函数被调用，中断函数会调用回调函数，回调函数里把数据写入环形缓冲区。</p><p>在0703_circle_buffer\\src\\hal_entry.c里，回调函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> g_uart7_tx_complete <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">uart7_callback</span><span class="token punctuation">(</span><span class="token class-name">uart_callback_args_t</span> <span class="token operator">*</span> p_args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p_args<span class="token operator">-&gt;</span>event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> UART_EVENT_TX_COMPLETE<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            g_uart7_tx_complete  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> UART_EVENT_RX_CHAR<span class="token operator">:</span>
        <span class="token punctuation">{</span>
            g_rx_buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_rx_buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span>p_args<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第12~16行，把接收到在字符放入环形缓冲区g_rx_buf里。</li></ul><p>现在可以修改fgetc函数了，代码在0703_circle_buffer\\src\\console.c里，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 重写这个函数,重定向scanf */</span>
<span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
     <span class="token class-name">uint8_t</span> ch<span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span>g_rx_buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_rx_buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/* 回显 */</span>
    <span class="token punctuation">{</span>
        <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 回车之后加换行 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第07行从环形缓冲区中得到数据：如果失败则再次读取。</li><li>第09~18行是回显操作。</li></ul><p>为了测试“唤醒缓冲区可以不丢数据”，修改应用程序代码在0703_circle_buffer\\src\\hal_entry.c，如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* TODO: add your own code here */</span>
    <span class="token class-name">fsp_err_t</span> err<span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span>

    <span class="token comment">/* 初始化环形缓冲区 */</span>
    <span class="token function">circlebuf_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 配置串口 */</span>
    err <span class="token operator">=</span> g_uart7<span class="token punctuation">.</span>p_api<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>g_uart7<span class="token punctuation">.</span>p_ctrl<span class="token punctuation">,</span> g_uart7<span class="token punctuation">.</span>p_cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;www.100ask.net\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;waiting 10 seconds, you can enter datas too.\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 延时10秒</span>
    <span class="token function">R_BSP_SoftwareDelay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>BSP_DELAY_UNITS_SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter two number:\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d + %d = %d\\r\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第16行里故意延时10秒，你可以在这个时间里输入字符。</li></ul><h3 id="_7-4-5-上机实验" tabindex="-1"><a class="header-anchor" href="#_7-4-5-上机实验" aria-hidden="true">#</a> 7.4.5 上机实验</h3><p>当程序打印出“waiting 10 seconds, you can enter datas too.”时，可以输入1并回车、输入2并回车（盲打，这时没有回显），然后等待。最后可以看到打印后续结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>www.100ask.net
waiting 10 seconds, you can enter datas too.
Please enter two number:
1
2
1 + 2 = 3
Please enter two numbe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,144),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","chapter7.html.vue"]]);export{r as default};
